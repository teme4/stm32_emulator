
test03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  080001e4  080001e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000025  08004d20  08004d20  000105e8  2**0
                  CONTENTS, READONLY
  3 .init_array   00000004  08005a54  08005a54  0000da54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005a58  08005a58  0000da58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005e8  20000000  08005a5c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008f8  200005e8  08006044  000105e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20000ee0  0800693c  000105e8  2**0
                  ALLOC
  8 .debug_abbrev 000032d4  00000000  00000000  0001060d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000103f8  00000000  00000000  000138e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b923  00000000  00000000  00023cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00a86d19  00000000  00000000  0002f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008770  00000000  00000000  00ab6315  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00003a74  00000000  00000000  00abea85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000017a9  00000000  00000000  00ac24f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000017b0  00000000  00000000  00ac3ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001548  00000000  00000000  00ac5458  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000065c4  00000000  00000000  00ac69a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000002a  00000000  00000000  00accf64  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005038  00000000  00000000  00accf90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	f240 53e8 	movw	r3, #1512	; 0x5e8
 80001e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001ec:	781a      	ldrb	r2, [r3, #0]
 80001ee:	b90a      	cbnz	r2, 80001f4 <__do_global_dtors_aux+0x10>
 80001f0:	2001      	movs	r0, #1
 80001f2:	7018      	strb	r0, [r3, #0]
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <frame_dummy>:
 80001f8:	f240 50e8 	movw	r0, #1512	; 0x5e8
 80001fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000200:	b508      	push	{r3, lr}
 8000202:	6803      	ldr	r3, [r0, #0]
 8000204:	b12b      	cbz	r3, 8000212 <frame_dummy+0x1a>
 8000206:	f240 0300 	movw	r3, #0
 800020a:	f2c0 0300 	movt	r3, #0
 800020e:	b103      	cbz	r3, 8000212 <frame_dummy+0x1a>
 8000210:	4798      	blx	r3
 8000212:	bd08      	pop	{r3, pc}

08000214 <_puts_r>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	4604      	mov	r4, r0
 8000218:	b089      	sub	sp, #36	; 0x24
 800021a:	4608      	mov	r0, r1
 800021c:	460d      	mov	r5, r1
 800021e:	f000 f83d 	bl	800029c <strlen>
 8000222:	f644 5300 	movw	r3, #19712	; 0x4d00
 8000226:	9501      	str	r5, [sp, #4]
 8000228:	f6c0 0300 	movt	r3, #2048	; 0x800
 800022c:	9303      	str	r3, [sp, #12]
 800022e:	2301      	movs	r3, #1
 8000230:	9304      	str	r3, [sp, #16]
 8000232:	ab01      	add	r3, sp, #4
 8000234:	9305      	str	r3, [sp, #20]
 8000236:	2302      	movs	r3, #2
 8000238:	9306      	str	r3, [sp, #24]
 800023a:	1c42      	adds	r2, r0, #1
 800023c:	9002      	str	r0, [sp, #8]
 800023e:	9207      	str	r2, [sp, #28]
 8000240:	b10c      	cbz	r4, 8000246 <_puts_r+0x32>
 8000242:	69a3      	ldr	r3, [r4, #24]
 8000244:	b1eb      	cbz	r3, 8000282 <_puts_r+0x6e>
 8000246:	f240 03e4 	movw	r3, #228	; 0xe4
 800024a:	4620      	mov	r0, r4
 800024c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	899a      	ldrh	r2, [r3, #12]
 8000256:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800025a:	bf01      	itttt	eq
 800025c:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8000260:	819a      	strheq	r2, [r3, #12]
 8000262:	6e59      	ldreq	r1, [r3, #100]	; 0x64
 8000264:	f421 5200 	biceq.w	r2, r1, #8192	; 0x2000
 8000268:	68a1      	ldr	r1, [r4, #8]
 800026a:	bf08      	it	eq
 800026c:	665a      	streq	r2, [r3, #100]	; 0x64
 800026e:	aa05      	add	r2, sp, #20
 8000270:	f000 fa74 	bl	800075c <__sfvwrite_r>
 8000274:	2800      	cmp	r0, #0
 8000276:	bf0c      	ite	eq
 8000278:	200a      	moveq	r0, #10
 800027a:	f04f 30ff 	movne.w	r0, #4294967295
 800027e:	b009      	add	sp, #36	; 0x24
 8000280:	bd30      	pop	{r4, r5, pc}
 8000282:	4620      	mov	r0, r4
 8000284:	f000 f862 	bl	800034c <__sinit>
 8000288:	e7dd      	b.n	8000246 <_puts_r+0x32>
 800028a:	bf00      	nop

0800028c <puts>:
 800028c:	f240 03e4 	movw	r3, #228	; 0xe4
 8000290:	4601      	mov	r1, r0
 8000292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	e7bc      	b.n	8000214 <_puts_r>
 800029a:	bf00      	nop

0800029c <strlen>:
 800029c:	f020 0103 	bic.w	r1, r0, #3
 80002a0:	f010 0003 	ands.w	r0, r0, #3
 80002a4:	f1c0 0000 	rsb	r0, r0, #0
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f100 0c04 	add.w	ip, r0, #4
 80002b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80002b4:	f06f 0200 	mvn.w	r2, #0
 80002b8:	bf1c      	itt	ne
 80002ba:	fa22 f20c 	lsrne.w	r2, r2, ip
 80002be:	4313      	orrne	r3, r2
 80002c0:	f04f 0c01 	mov.w	ip, #1
 80002c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80002c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80002cc:	eba3 020c 	sub.w	r2, r3, ip
 80002d0:	ea22 0203 	bic.w	r2, r2, r3
 80002d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80002d8:	bf04      	itt	eq
 80002da:	f851 3b04 	ldreq.w	r3, [r1], #4
 80002de:	3004      	addeq	r0, #4
 80002e0:	d0f4      	beq.n	80002cc <strlen+0x30>
 80002e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80002e6:	bf1f      	itttt	ne
 80002e8:	3001      	addne	r0, #1
 80002ea:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 80002ee:	3001      	addne	r0, #1
 80002f0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 80002f4:	bf18      	it	ne
 80002f6:	3001      	addne	r0, #1
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop

080002fc <__fp_lock>:
 80002fc:	2000      	movs	r0, #0
 80002fe:	4770      	bx	lr

08000300 <__fp_unlock>:
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr

08000304 <_cleanup_r>:
 8000304:	f641 21ed 	movw	r1, #6893	; 0x1aed
 8000308:	f6c0 0100 	movt	r1, #2048	; 0x800
 800030c:	f000 bbc2 	b.w	8000a94 <_fwalk>

08000310 <__sfmoreglue>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	2568      	movs	r5, #104	; 0x68
 8000314:	460e      	mov	r6, r1
 8000316:	fb05 f501 	mul.w	r5, r5, r1
 800031a:	f105 010c 	add.w	r1, r5, #12
 800031e:	f000 fc0f 	bl	8000b40 <_malloc_r>
 8000322:	4604      	mov	r4, r0
 8000324:	b148      	cbz	r0, 800033a <__sfmoreglue+0x2a>
 8000326:	f100 030c 	add.w	r3, r0, #12
 800032a:	2100      	movs	r1, #0
 800032c:	6046      	str	r6, [r0, #4]
 800032e:	462a      	mov	r2, r5
 8000330:	4618      	mov	r0, r3
 8000332:	6021      	str	r1, [r4, #0]
 8000334:	60a3      	str	r3, [r4, #8]
 8000336:	f001 f809 	bl	800134c <memset>
 800033a:	4620      	mov	r0, r4
 800033c:	bd70      	pop	{r4, r5, r6, pc}
 800033e:	bf00      	nop

08000340 <_cleanup>:
 8000340:	f644 43fc 	movw	r3, #19708	; 0x4cfc
 8000344:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	e7db      	b.n	8000304 <_cleanup_r>

0800034c <__sinit>:
 800034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000350:	4605      	mov	r5, r0
 8000352:	6984      	ldr	r4, [r0, #24]
 8000354:	b083      	sub	sp, #12
 8000356:	2c00      	cmp	r4, #0
 8000358:	d178      	bne.n	800044c <__sinit+0x100>
 800035a:	f240 3205 	movw	r2, #773	; 0x305
 800035e:	2301      	movs	r3, #1
 8000360:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000364:	6183      	str	r3, [r0, #24]
 8000366:	6282      	str	r2, [r0, #40]	; 0x28
 8000368:	f641 094d 	movw	r9, #6221	; 0x184d
 800036c:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
 8000370:	f641 0875 	movw	r8, #6261	; 0x1875
 8000374:	f8c0 40dc 	str.w	r4, [r0, #220]	; 0xdc
 8000378:	f641 0ab1 	movw	sl, #6321	; 0x18b1
 800037c:	f8c0 40e0 	str.w	r4, [r0, #224]	; 0xe0
 8000380:	f641 0bd9 	movw	fp, #6361	; 0x18d9
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	f000 f865 	bl	8000454 <__sfp>
 800038a:	f6c0 0900 	movt	r9, #2048	; 0x800
 800038e:	f6c0 0800 	movt	r8, #2048	; 0x800
 8000392:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8000396:	f6c0 0b00 	movt	fp, #2048	; 0x800
 800039a:	6068      	str	r0, [r5, #4]
 800039c:	4628      	mov	r0, r5
 800039e:	f000 f859 	bl	8000454 <__sfp>
 80003a2:	60a8      	str	r0, [r5, #8]
 80003a4:	4628      	mov	r0, r5
 80003a6:	f000 f855 	bl	8000454 <__sfp>
 80003aa:	686f      	ldr	r7, [r5, #4]
 80003ac:	4621      	mov	r1, r4
 80003ae:	2208      	movs	r2, #8
 80003b0:	60e8      	str	r0, [r5, #12]
 80003b2:	2004      	movs	r0, #4
 80003b4:	603c      	str	r4, [r7, #0]
 80003b6:	81b8      	strh	r0, [r7, #12]
 80003b8:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80003bc:	607c      	str	r4, [r7, #4]
 80003be:	60bc      	str	r4, [r7, #8]
 80003c0:	667c      	str	r4, [r7, #100]	; 0x64
 80003c2:	81fc      	strh	r4, [r7, #14]
 80003c4:	613c      	str	r4, [r7, #16]
 80003c6:	617c      	str	r4, [r7, #20]
 80003c8:	61bc      	str	r4, [r7, #24]
 80003ca:	f000 ffbf 	bl	800134c <memset>
 80003ce:	68ae      	ldr	r6, [r5, #8]
 80003d0:	9b01      	ldr	r3, [sp, #4]
 80003d2:	4621      	mov	r1, r4
 80003d4:	2208      	movs	r2, #8
 80003d6:	2009      	movs	r0, #9
 80003d8:	623f      	str	r7, [r7, #32]
 80003da:	81b0      	strh	r0, [r6, #12]
 80003dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80003e0:	81f3      	strh	r3, [r6, #14]
 80003e2:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
 80003e6:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
 80003ea:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
 80003ee:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
 80003f2:	6034      	str	r4, [r6, #0]
 80003f4:	6074      	str	r4, [r6, #4]
 80003f6:	60b4      	str	r4, [r6, #8]
 80003f8:	6674      	str	r4, [r6, #100]	; 0x64
 80003fa:	6134      	str	r4, [r6, #16]
 80003fc:	6174      	str	r4, [r6, #20]
 80003fe:	61b4      	str	r4, [r6, #24]
 8000400:	f000 ffa4 	bl	800134c <memset>
 8000404:	68ed      	ldr	r5, [r5, #12]
 8000406:	2312      	movs	r3, #18
 8000408:	2002      	movs	r0, #2
 800040a:	6236      	str	r6, [r6, #32]
 800040c:	4621      	mov	r1, r4
 800040e:	81e8      	strh	r0, [r5, #14]
 8000410:	2208      	movs	r2, #8
 8000412:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
 8000416:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800041a:	81ab      	strh	r3, [r5, #12]
 800041c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8000420:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
 8000424:	f8c6 b030 	str.w	fp, [r6, #48]	; 0x30
 8000428:	602c      	str	r4, [r5, #0]
 800042a:	606c      	str	r4, [r5, #4]
 800042c:	60ac      	str	r4, [r5, #8]
 800042e:	666c      	str	r4, [r5, #100]	; 0x64
 8000430:	612c      	str	r4, [r5, #16]
 8000432:	616c      	str	r4, [r5, #20]
 8000434:	61ac      	str	r4, [r5, #24]
 8000436:	f000 ff89 	bl	800134c <memset>
 800043a:	622d      	str	r5, [r5, #32]
 800043c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
 8000440:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
 8000444:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
 8000448:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
 800044c:	b003      	add	sp, #12
 800044e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000452:	bf00      	nop

08000454 <__sfp>:
 8000454:	f644 43fc 	movw	r3, #19708	; 0x4cfc
 8000458:	f6c0 0300 	movt	r3, #2048	; 0x800
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4606      	mov	r6, r0
 8000460:	681d      	ldr	r5, [r3, #0]
 8000462:	69ab      	ldr	r3, [r5, #24]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d029      	beq.n	80004bc <__sfp+0x68>
 8000468:	35d8      	adds	r5, #216	; 0xd8
 800046a:	686b      	ldr	r3, [r5, #4]
 800046c:	68ac      	ldr	r4, [r5, #8]
 800046e:	3b01      	subs	r3, #1
 8000470:	d503      	bpl.n	800047a <__sfp+0x26>
 8000472:	e01f      	b.n	80004b4 <__sfp+0x60>
 8000474:	3468      	adds	r4, #104	; 0x68
 8000476:	3b01      	subs	r3, #1
 8000478:	d31c      	bcc.n	80004b4 <__sfp+0x60>
 800047a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800047e:	2a00      	cmp	r2, #0
 8000480:	d1f8      	bne.n	8000474 <__sfp+0x20>
 8000482:	2500      	movs	r5, #0
 8000484:	f04f 33ff 	mov.w	r3, #4294967295
 8000488:	6665      	str	r5, [r4, #100]	; 0x64
 800048a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800048e:	81e3      	strh	r3, [r4, #14]
 8000490:	4629      	mov	r1, r5
 8000492:	2301      	movs	r3, #1
 8000494:	6025      	str	r5, [r4, #0]
 8000496:	81a3      	strh	r3, [r4, #12]
 8000498:	2208      	movs	r2, #8
 800049a:	60a5      	str	r5, [r4, #8]
 800049c:	6065      	str	r5, [r4, #4]
 800049e:	6125      	str	r5, [r4, #16]
 80004a0:	6165      	str	r5, [r4, #20]
 80004a2:	61a5      	str	r5, [r4, #24]
 80004a4:	f000 ff52 	bl	800134c <memset>
 80004a8:	6365      	str	r5, [r4, #52]	; 0x34
 80004aa:	63a5      	str	r5, [r4, #56]	; 0x38
 80004ac:	64a5      	str	r5, [r4, #72]	; 0x48
 80004ae:	64e5      	str	r5, [r4, #76]	; 0x4c
 80004b0:	4620      	mov	r0, r4
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	6828      	ldr	r0, [r5, #0]
 80004b6:	b128      	cbz	r0, 80004c4 <__sfp+0x70>
 80004b8:	4605      	mov	r5, r0
 80004ba:	e7d6      	b.n	800046a <__sfp+0x16>
 80004bc:	4628      	mov	r0, r5
 80004be:	f7ff ff45 	bl	800034c <__sinit>
 80004c2:	e7d1      	b.n	8000468 <__sfp+0x14>
 80004c4:	4630      	mov	r0, r6
 80004c6:	2104      	movs	r1, #4
 80004c8:	f7ff ff22 	bl	8000310 <__sfmoreglue>
 80004cc:	6028      	str	r0, [r5, #0]
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d1f2      	bne.n	80004b8 <__sfp+0x64>
 80004d2:	230c      	movs	r3, #12
 80004d4:	4604      	mov	r4, r0
 80004d6:	6033      	str	r3, [r6, #0]
 80004d8:	e7ea      	b.n	80004b0 <__sfp+0x5c>
 80004da:	bf00      	nop

080004dc <__sfp_lock_acquire>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__sfp_lock_release>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <__sinit_lock_acquire>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <__sinit_lock_release>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <__fp_lock_all>:
 80004ec:	f240 03e4 	movw	r3, #228	; 0xe4
 80004f0:	f240 21fd 	movw	r1, #765	; 0x2fd
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80004fc:	6818      	ldr	r0, [r3, #0]
 80004fe:	f000 bac9 	b.w	8000a94 <_fwalk>
 8000502:	bf00      	nop

08000504 <__fp_unlock_all>:
 8000504:	f240 03e4 	movw	r3, #228	; 0xe4
 8000508:	f240 3101 	movw	r1, #769	; 0x301
 800050c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000510:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	f000 babd 	b.w	8000a94 <_fwalk>
 800051a:	bf00      	nop

0800051c <_malloc_trim_r>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	f240 14d8 	movw	r4, #472	; 0x1d8
 8000522:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000526:	460f      	mov	r7, r1
 8000528:	4605      	mov	r5, r0
 800052a:	f000 ff69 	bl	8001400 <__malloc_lock>
 800052e:	68a3      	ldr	r3, [r4, #8]
 8000530:	685e      	ldr	r6, [r3, #4]
 8000532:	f026 0603 	bic.w	r6, r6, #3
 8000536:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
 800053a:	330f      	adds	r3, #15
 800053c:	1bdf      	subs	r7, r3, r7
 800053e:	0b3f      	lsrs	r7, r7, #12
 8000540:	3f01      	subs	r7, #1
 8000542:	033f      	lsls	r7, r7, #12
 8000544:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8000548:	db07      	blt.n	800055a <_malloc_trim_r+0x3e>
 800054a:	2100      	movs	r1, #0
 800054c:	4628      	mov	r0, r5
 800054e:	f001 f969 	bl	8001824 <_sbrk_r>
 8000552:	68a3      	ldr	r3, [r4, #8]
 8000554:	199b      	adds	r3, r3, r6
 8000556:	4298      	cmp	r0, r3
 8000558:	d004      	beq.n	8000564 <_malloc_trim_r+0x48>
 800055a:	4628      	mov	r0, r5
 800055c:	f000 ff52 	bl	8001404 <__malloc_unlock>
 8000560:	2000      	movs	r0, #0
 8000562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000564:	4279      	negs	r1, r7
 8000566:	4628      	mov	r0, r5
 8000568:	f001 f95c 	bl	8001824 <_sbrk_r>
 800056c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000570:	d010      	beq.n	8000594 <_malloc_trim_r+0x78>
 8000572:	f240 6318 	movw	r3, #1560	; 0x618
 8000576:	68a1      	ldr	r1, [r4, #8]
 8000578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800057c:	1bf6      	subs	r6, r6, r7
 800057e:	4628      	mov	r0, r5
 8000580:	f046 0601 	orr.w	r6, r6, #1
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	604e      	str	r6, [r1, #4]
 8000588:	1bd7      	subs	r7, r2, r7
 800058a:	601f      	str	r7, [r3, #0]
 800058c:	f000 ff3a 	bl	8001404 <__malloc_unlock>
 8000590:	2001      	movs	r0, #1
 8000592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000594:	2100      	movs	r1, #0
 8000596:	4628      	mov	r0, r5
 8000598:	f001 f944 	bl	8001824 <_sbrk_r>
 800059c:	68a3      	ldr	r3, [r4, #8]
 800059e:	1ac2      	subs	r2, r0, r3
 80005a0:	2a0f      	cmp	r2, #15
 80005a2:	ddda      	ble.n	800055a <_malloc_trim_r+0x3e>
 80005a4:	f240 54e0 	movw	r4, #1504	; 0x5e0
 80005a8:	f240 6118 	movw	r1, #1560	; 0x618
 80005ac:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80005b0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80005b4:	f042 0201 	orr.w	r2, r2, #1
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	1ac0      	subs	r0, r0, r3
 80005be:	6008      	str	r0, [r1, #0]
 80005c0:	e7cb      	b.n	800055a <_malloc_trim_r+0x3e>
 80005c2:	bf00      	nop

080005c4 <_free_r>:
 80005c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c8:	460d      	mov	r5, r1
 80005ca:	4604      	mov	r4, r0
 80005cc:	2900      	cmp	r1, #0
 80005ce:	d058      	beq.n	8000682 <_free_r+0xbe>
 80005d0:	f000 ff16 	bl	8001400 <__malloc_lock>
 80005d4:	f1a5 0208 	sub.w	r2, r5, #8
 80005d8:	f240 10d8 	movw	r0, #472	; 0x1d8
 80005dc:	6856      	ldr	r6, [r2, #4]
 80005de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80005e2:	f026 0301 	bic.w	r3, r6, #1
 80005e6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80005ea:	18d1      	adds	r1, r2, r3
 80005ec:	458c      	cmp	ip, r1
 80005ee:	684f      	ldr	r7, [r1, #4]
 80005f0:	f027 0703 	bic.w	r7, r7, #3
 80005f4:	d065      	beq.n	80006c2 <_free_r+0xfe>
 80005f6:	f016 0601 	ands.w	r6, r6, #1
 80005fa:	604f      	str	r7, [r1, #4]
 80005fc:	d031      	beq.n	8000662 <_free_r+0x9e>
 80005fe:	2600      	movs	r6, #0
 8000600:	19cd      	adds	r5, r1, r7
 8000602:	686d      	ldr	r5, [r5, #4]
 8000604:	f015 0f01 	tst.w	r5, #1
 8000608:	d106      	bne.n	8000618 <_free_r+0x54>
 800060a:	19db      	adds	r3, r3, r7
 800060c:	2e00      	cmp	r6, #0
 800060e:	d04b      	beq.n	80006a8 <_free_r+0xe4>
 8000610:	688d      	ldr	r5, [r1, #8]
 8000612:	68c9      	ldr	r1, [r1, #12]
 8000614:	60e9      	str	r1, [r5, #12]
 8000616:	608d      	str	r5, [r1, #8]
 8000618:	f043 0101 	orr.w	r1, r3, #1
 800061c:	50d3      	str	r3, [r2, r3]
 800061e:	6051      	str	r1, [r2, #4]
 8000620:	b9d6      	cbnz	r6, 8000658 <_free_r+0x94>
 8000622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000626:	d32e      	bcc.n	8000686 <_free_r+0xc2>
 8000628:	0a59      	lsrs	r1, r3, #9
 800062a:	2904      	cmp	r1, #4
 800062c:	d86b      	bhi.n	8000706 <_free_r+0x142>
 800062e:	099e      	lsrs	r6, r3, #6
 8000630:	3638      	adds	r6, #56	; 0x38
 8000632:	00f5      	lsls	r5, r6, #3
 8000634:	1945      	adds	r5, r0, r5
 8000636:	68a9      	ldr	r1, [r5, #8]
 8000638:	42a9      	cmp	r1, r5
 800063a:	d103      	bne.n	8000644 <_free_r+0x80>
 800063c:	e069      	b.n	8000712 <_free_r+0x14e>
 800063e:	6889      	ldr	r1, [r1, #8]
 8000640:	428d      	cmp	r5, r1
 8000642:	d004      	beq.n	800064e <_free_r+0x8a>
 8000644:	6848      	ldr	r0, [r1, #4]
 8000646:	f020 0003 	bic.w	r0, r0, #3
 800064a:	4283      	cmp	r3, r0
 800064c:	d3f7      	bcc.n	800063e <_free_r+0x7a>
 800064e:	68cb      	ldr	r3, [r1, #12]
 8000650:	60d3      	str	r3, [r2, #12]
 8000652:	6091      	str	r1, [r2, #8]
 8000654:	60ca      	str	r2, [r1, #12]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	4620      	mov	r0, r4
 800065a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800065e:	f000 bed1 	b.w	8001404 <__malloc_unlock>
 8000662:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8000666:	f100 0c08 	add.w	ip, r0, #8
 800066a:	1b52      	subs	r2, r2, r5
 800066c:	195b      	adds	r3, r3, r5
 800066e:	6895      	ldr	r5, [r2, #8]
 8000670:	4565      	cmp	r5, ip
 8000672:	d046      	beq.n	8000702 <_free_r+0x13e>
 8000674:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8000678:	f8c5 c00c 	str.w	ip, [r5, #12]
 800067c:	f8cc 5008 	str.w	r5, [ip, #8]
 8000680:	e7be      	b.n	8000600 <_free_r+0x3c>
 8000682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000686:	08db      	lsrs	r3, r3, #3
 8000688:	2501      	movs	r5, #1
 800068a:	6846      	ldr	r6, [r0, #4]
 800068c:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 8000690:	109b      	asrs	r3, r3, #2
 8000692:	fa15 f303 	lsls.w	r3, r5, r3
 8000696:	60d1      	str	r1, [r2, #12]
 8000698:	688d      	ldr	r5, [r1, #8]
 800069a:	ea46 0303 	orr.w	r3, r6, r3
 800069e:	6043      	str	r3, [r0, #4]
 80006a0:	6095      	str	r5, [r2, #8]
 80006a2:	60ea      	str	r2, [r5, #12]
 80006a4:	608a      	str	r2, [r1, #8]
 80006a6:	e7d7      	b.n	8000658 <_free_r+0x94>
 80006a8:	688d      	ldr	r5, [r1, #8]
 80006aa:	4f2b      	ldr	r7, [pc, #172]	; (8000758 <_free_r+0x194>)
 80006ac:	42bd      	cmp	r5, r7
 80006ae:	d1b0      	bne.n	8000612 <_free_r+0x4e>
 80006b0:	60ea      	str	r2, [r5, #12]
 80006b2:	f043 0101 	orr.w	r1, r3, #1
 80006b6:	60aa      	str	r2, [r5, #8]
 80006b8:	60d5      	str	r5, [r2, #12]
 80006ba:	6095      	str	r5, [r2, #8]
 80006bc:	6051      	str	r1, [r2, #4]
 80006be:	50d3      	str	r3, [r2, r3]
 80006c0:	e7ca      	b.n	8000658 <_free_r+0x94>
 80006c2:	f016 0f01 	tst.w	r6, #1
 80006c6:	443b      	add	r3, r7
 80006c8:	d107      	bne.n	80006da <_free_r+0x116>
 80006ca:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80006ce:	1a52      	subs	r2, r2, r1
 80006d0:	185b      	adds	r3, r3, r1
 80006d2:	6895      	ldr	r5, [r2, #8]
 80006d4:	68d1      	ldr	r1, [r2, #12]
 80006d6:	60e9      	str	r1, [r5, #12]
 80006d8:	608d      	str	r5, [r1, #8]
 80006da:	f240 51e4 	movw	r1, #1508	; 0x5e4
 80006de:	f043 0501 	orr.w	r5, r3, #1
 80006e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80006e6:	6055      	str	r5, [r2, #4]
 80006e8:	6082      	str	r2, [r0, #8]
 80006ea:	680a      	ldr	r2, [r1, #0]
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d3b3      	bcc.n	8000658 <_free_r+0x94>
 80006f0:	f240 6314 	movw	r3, #1556	; 0x614
 80006f4:	4620      	mov	r0, r4
 80006f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	f7ff ff0e 	bl	800051c <_malloc_trim_r>
 8000700:	e7aa      	b.n	8000658 <_free_r+0x94>
 8000702:	2601      	movs	r6, #1
 8000704:	e77c      	b.n	8000600 <_free_r+0x3c>
 8000706:	2914      	cmp	r1, #20
 8000708:	d80c      	bhi.n	8000724 <_free_r+0x160>
 800070a:	f101 065b 	add.w	r6, r1, #91	; 0x5b
 800070e:	00f5      	lsls	r5, r6, #3
 8000710:	e790      	b.n	8000634 <_free_r+0x70>
 8000712:	2501      	movs	r5, #1
 8000714:	6847      	ldr	r7, [r0, #4]
 8000716:	10b6      	asrs	r6, r6, #2
 8000718:	460b      	mov	r3, r1
 800071a:	40b5      	lsls	r5, r6
 800071c:	ea47 0505 	orr.w	r5, r7, r5
 8000720:	6045      	str	r5, [r0, #4]
 8000722:	e795      	b.n	8000650 <_free_r+0x8c>
 8000724:	2954      	cmp	r1, #84	; 0x54
 8000726:	d803      	bhi.n	8000730 <_free_r+0x16c>
 8000728:	0b1e      	lsrs	r6, r3, #12
 800072a:	366e      	adds	r6, #110	; 0x6e
 800072c:	00f5      	lsls	r5, r6, #3
 800072e:	e781      	b.n	8000634 <_free_r+0x70>
 8000730:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 8000734:	d803      	bhi.n	800073e <_free_r+0x17a>
 8000736:	0bde      	lsrs	r6, r3, #15
 8000738:	3677      	adds	r6, #119	; 0x77
 800073a:	00f5      	lsls	r5, r6, #3
 800073c:	e77a      	b.n	8000634 <_free_r+0x70>
 800073e:	f240 5554 	movw	r5, #1364	; 0x554
 8000742:	42a9      	cmp	r1, r5
 8000744:	d803      	bhi.n	800074e <_free_r+0x18a>
 8000746:	0c9e      	lsrs	r6, r3, #18
 8000748:	367c      	adds	r6, #124	; 0x7c
 800074a:	00f5      	lsls	r5, r6, #3
 800074c:	e772      	b.n	8000634 <_free_r+0x70>
 800074e:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
 8000752:	267e      	movs	r6, #126	; 0x7e
 8000754:	e76e      	b.n	8000634 <_free_r+0x70>
 8000756:	bf00      	nop
 8000758:	200001e0 	.word	0x200001e0

0800075c <__sfvwrite_r>:
 800075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000760:	b085      	sub	sp, #20
 8000762:	4690      	mov	r8, r2
 8000764:	460c      	mov	r4, r1
 8000766:	9002      	str	r0, [sp, #8]
 8000768:	6890      	ldr	r0, [r2, #8]
 800076a:	2800      	cmp	r0, #0
 800076c:	f000 8089 	beq.w	8000882 <__sfvwrite_r+0x126>
 8000770:	898b      	ldrh	r3, [r1, #12]
 8000772:	fa1f f983 	uxth.w	r9, r3
 8000776:	f019 0f08 	tst.w	r9, #8
 800077a:	f000 80a3 	beq.w	80008c4 <__sfvwrite_r+0x168>
 800077e:	690a      	ldr	r2, [r1, #16]
 8000780:	2a00      	cmp	r2, #0
 8000782:	f000 809f 	beq.w	80008c4 <__sfvwrite_r+0x168>
 8000786:	f019 0b02 	ands.w	fp, r9, #2
 800078a:	f8d8 5000 	ldr.w	r5, [r8]
 800078e:	bf1c      	itt	ne
 8000790:	f04f 0900 	movne.w	r9, #0
 8000794:	464f      	movne	r7, r9
 8000796:	d17b      	bne.n	8000890 <__sfvwrite_r+0x134>
 8000798:	f019 0901 	ands.w	r9, r9, #1
 800079c:	bf1d      	ittte	ne
 800079e:	46dc      	movne	ip, fp
 80007a0:	46da      	movne	sl, fp
 80007a2:	465f      	movne	r7, fp
 80007a4:	464e      	moveq	r6, r9
 80007a6:	d136      	bne.n	8000816 <__sfvwrite_r+0xba>
 80007a8:	b356      	cbz	r6, 8000800 <__sfvwrite_r+0xa4>
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	68a7      	ldr	r7, [r4, #8]
 80007ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80007b2:	f000 8092 	beq.w	80008da <__sfvwrite_r+0x17e>
 80007b6:	42be      	cmp	r6, r7
 80007b8:	46bb      	mov	fp, r7
 80007ba:	f0c0 80b4 	bcc.w	8000926 <__sfvwrite_r+0x1ca>
 80007be:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80007c2:	f040 8117 	bne.w	80009f4 <__sfvwrite_r+0x298>
 80007c6:	6820      	ldr	r0, [r4, #0]
 80007c8:	9703      	str	r7, [sp, #12]
 80007ca:	4637      	mov	r7, r6
 80007cc:	4649      	mov	r1, r9
 80007ce:	465a      	mov	r2, fp
 80007d0:	f000 fd62 	bl	8001298 <memmove>
 80007d4:	46b2      	mov	sl, r6
 80007d6:	68a2      	ldr	r2, [r4, #8]
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	9903      	ldr	r1, [sp, #12]
 80007dc:	445b      	add	r3, fp
 80007de:	6023      	str	r3, [r4, #0]
 80007e0:	1a52      	subs	r2, r2, r1
 80007e2:	60a2      	str	r2, [r4, #8]
 80007e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80007e8:	44d1      	add	r9, sl
 80007ea:	ebca 0606 	rsb	r6, sl, r6
 80007ee:	1bdf      	subs	r7, r3, r7
 80007f0:	f8c8 7008 	str.w	r7, [r8, #8]
 80007f4:	2f00      	cmp	r7, #0
 80007f6:	f000 8094 	beq.w	8000922 <__sfvwrite_r+0x1c6>
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	2e00      	cmp	r6, #0
 80007fe:	d1d4      	bne.n	80007aa <__sfvwrite_r+0x4e>
 8000800:	f8d5 9000 	ldr.w	r9, [r5]
 8000804:	686e      	ldr	r6, [r5, #4]
 8000806:	3508      	adds	r5, #8
 8000808:	e7ce      	b.n	80007a8 <__sfvwrite_r+0x4c>
 800080a:	f8d5 a000 	ldr.w	sl, [r5]
 800080e:	f04f 0c00 	mov.w	ip, #0
 8000812:	686f      	ldr	r7, [r5, #4]
 8000814:	3508      	adds	r5, #8
 8000816:	2f00      	cmp	r7, #0
 8000818:	d0f7      	beq.n	800080a <__sfvwrite_r+0xae>
 800081a:	f1bc 0f00 	cmp.w	ip, #0
 800081e:	f000 80ba 	beq.w	8000996 <__sfvwrite_r+0x23a>
 8000822:	6922      	ldr	r2, [r4, #16]
 8000824:	45bb      	cmp	fp, r7
 8000826:	bf34      	ite	cc
 8000828:	46d9      	movcc	r9, fp
 800082a:	46b9      	movcs	r9, r7
 800082c:	6820      	ldr	r0, [r4, #0]
 800082e:	6963      	ldr	r3, [r4, #20]
 8000830:	68a6      	ldr	r6, [r4, #8]
 8000832:	4290      	cmp	r0, r2
 8000834:	bf94      	ite	ls
 8000836:	2200      	movls	r2, #0
 8000838:	2201      	movhi	r2, #1
 800083a:	199e      	adds	r6, r3, r6
 800083c:	45b1      	cmp	r9, r6
 800083e:	bfd4      	ite	le
 8000840:	2200      	movle	r2, #0
 8000842:	f002 0201 	andgt.w	r2, r2, #1
 8000846:	2a00      	cmp	r2, #0
 8000848:	f040 808c 	bne.w	8000964 <__sfvwrite_r+0x208>
 800084c:	4599      	cmp	r9, r3
 800084e:	db6f      	blt.n	8000930 <__sfvwrite_r+0x1d4>
 8000850:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000852:	4652      	mov	r2, sl
 8000854:	6a21      	ldr	r1, [r4, #32]
 8000856:	9802      	ldr	r0, [sp, #8]
 8000858:	f8cd c004 	str.w	ip, [sp, #4]
 800085c:	47b0      	blx	r6
 800085e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000862:	1e06      	subs	r6, r0, #0
 8000864:	f340 8090 	ble.w	8000988 <__sfvwrite_r+0x22c>
 8000868:	ebbb 0b06 	subs.w	fp, fp, r6
 800086c:	d073      	beq.n	8000956 <__sfvwrite_r+0x1fa>
 800086e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000872:	44b2      	add	sl, r6
 8000874:	1bbf      	subs	r7, r7, r6
 8000876:	1b9e      	subs	r6, r3, r6
 8000878:	f8c8 6008 	str.w	r6, [r8, #8]
 800087c:	2e00      	cmp	r6, #0
 800087e:	d1ca      	bne.n	8000816 <__sfvwrite_r+0xba>
 8000880:	4630      	mov	r0, r6
 8000882:	b005      	add	sp, #20
 8000884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000888:	f8d5 9000 	ldr.w	r9, [r5]
 800088c:	686f      	ldr	r7, [r5, #4]
 800088e:	3508      	adds	r5, #8
 8000890:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8000894:	bf34      	ite	cc
 8000896:	463b      	movcc	r3, r7
 8000898:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800089c:	464a      	mov	r2, r9
 800089e:	9802      	ldr	r0, [sp, #8]
 80008a0:	2f00      	cmp	r7, #0
 80008a2:	d0f1      	beq.n	8000888 <__sfvwrite_r+0x12c>
 80008a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008a6:	6a21      	ldr	r1, [r4, #32]
 80008a8:	47b0      	blx	r6
 80008aa:	2800      	cmp	r0, #0
 80008ac:	4481      	add	r9, r0
 80008ae:	ebc0 0707 	rsb	r7, r0, r7
 80008b2:	dd69      	ble.n	8000988 <__sfvwrite_r+0x22c>
 80008b4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80008b8:	1a30      	subs	r0, r6, r0
 80008ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80008be:	2800      	cmp	r0, #0
 80008c0:	d1e6      	bne.n	8000890 <__sfvwrite_r+0x134>
 80008c2:	e7de      	b.n	8000882 <__sfvwrite_r+0x126>
 80008c4:	9802      	ldr	r0, [sp, #8]
 80008c6:	4621      	mov	r1, r4
 80008c8:	f001 f820 	bl	800190c <__swsetup_r>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	f040 80d2 	bne.w	8000a76 <__sfvwrite_r+0x31a>
 80008d2:	89a3      	ldrh	r3, [r4, #12]
 80008d4:	fa1f f983 	uxth.w	r9, r3
 80008d8:	e755      	b.n	8000786 <__sfvwrite_r+0x2a>
 80008da:	6923      	ldr	r3, [r4, #16]
 80008dc:	46ba      	mov	sl, r7
 80008de:	6820      	ldr	r0, [r4, #0]
 80008e0:	4298      	cmp	r0, r3
 80008e2:	bf94      	ite	ls
 80008e4:	2300      	movls	r3, #0
 80008e6:	2301      	movhi	r3, #1
 80008e8:	42b7      	cmp	r7, r6
 80008ea:	bf2c      	ite	cs
 80008ec:	2300      	movcs	r3, #0
 80008ee:	f003 0301 	andcc.w	r3, r3, #1
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d16f      	bne.n	80009d6 <__sfvwrite_r+0x27a>
 80008f6:	6963      	ldr	r3, [r4, #20]
 80008f8:	429e      	cmp	r6, r3
 80008fa:	d35f      	bcc.n	80009bc <__sfvwrite_r+0x260>
 80008fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80008fe:	464a      	mov	r2, r9
 8000900:	9802      	ldr	r0, [sp, #8]
 8000902:	6a21      	ldr	r1, [r4, #32]
 8000904:	47b8      	blx	r7
 8000906:	1e07      	subs	r7, r0, #0
 8000908:	dd3e      	ble.n	8000988 <__sfvwrite_r+0x22c>
 800090a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800090e:	46ba      	mov	sl, r7
 8000910:	44d1      	add	r9, sl
 8000912:	ebca 0606 	rsb	r6, sl, r6
 8000916:	1bdf      	subs	r7, r3, r7
 8000918:	f8c8 7008 	str.w	r7, [r8, #8]
 800091c:	2f00      	cmp	r7, #0
 800091e:	f47f af6c 	bne.w	80007fa <__sfvwrite_r+0x9e>
 8000922:	4638      	mov	r0, r7
 8000924:	e7ad      	b.n	8000882 <__sfvwrite_r+0x126>
 8000926:	6820      	ldr	r0, [r4, #0]
 8000928:	46b3      	mov	fp, r6
 800092a:	9603      	str	r6, [sp, #12]
 800092c:	4637      	mov	r7, r6
 800092e:	e74d      	b.n	80007cc <__sfvwrite_r+0x70>
 8000930:	464a      	mov	r2, r9
 8000932:	4651      	mov	r1, sl
 8000934:	464e      	mov	r6, r9
 8000936:	f8cd c004 	str.w	ip, [sp, #4]
 800093a:	f000 fcad 	bl	8001298 <memmove>
 800093e:	68a2      	ldr	r2, [r4, #8]
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	ebbb 0b06 	subs.w	fp, fp, r6
 8000946:	ebc9 0202 	rsb	r2, r9, r2
 800094a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800094e:	444b      	add	r3, r9
 8000950:	60a2      	str	r2, [r4, #8]
 8000952:	6023      	str	r3, [r4, #0]
 8000954:	d18b      	bne.n	800086e <__sfvwrite_r+0x112>
 8000956:	9802      	ldr	r0, [sp, #8]
 8000958:	4621      	mov	r1, r4
 800095a:	f001 f8cf 	bl	8001afc <_fflush_r>
 800095e:	b998      	cbnz	r0, 8000988 <__sfvwrite_r+0x22c>
 8000960:	46dc      	mov	ip, fp
 8000962:	e784      	b.n	800086e <__sfvwrite_r+0x112>
 8000964:	4651      	mov	r1, sl
 8000966:	4632      	mov	r2, r6
 8000968:	f8cd c004 	str.w	ip, [sp, #4]
 800096c:	f000 fc94 	bl	8001298 <memmove>
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	4621      	mov	r1, r4
 8000974:	9802      	ldr	r0, [sp, #8]
 8000976:	199b      	adds	r3, r3, r6
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	f001 f8bf 	bl	8001afc <_fflush_r>
 800097e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000982:	2800      	cmp	r0, #0
 8000984:	f43f af70 	beq.w	8000868 <__sfvwrite_r+0x10c>
 8000988:	89a3      	ldrh	r3, [r4, #12]
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000992:	81a3      	strh	r3, [r4, #12]
 8000994:	e775      	b.n	8000882 <__sfvwrite_r+0x126>
 8000996:	4650      	mov	r0, sl
 8000998:	210a      	movs	r1, #10
 800099a:	463a      	mov	r2, r7
 800099c:	f107 0b01 	add.w	fp, r7, #1
 80009a0:	f000 fb8c 	bl	80010bc <memchr>
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	2800      	cmp	r0, #0
 80009aa:	f43f af3a 	beq.w	8000822 <__sfvwrite_r+0xc6>
 80009ae:	f100 0b01 	add.w	fp, r0, #1
 80009b2:	f04f 0c01 	mov.w	ip, #1
 80009b6:	ebca 0b0b 	rsb	fp, sl, fp
 80009ba:	e732      	b.n	8000822 <__sfvwrite_r+0xc6>
 80009bc:	4632      	mov	r2, r6
 80009be:	4649      	mov	r1, r9
 80009c0:	f000 fc6a 	bl	8001298 <memmove>
 80009c4:	68a2      	ldr	r2, [r4, #8]
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	4637      	mov	r7, r6
 80009ca:	1b92      	subs	r2, r2, r6
 80009cc:	46b2      	mov	sl, r6
 80009ce:	199b      	adds	r3, r3, r6
 80009d0:	60a2      	str	r2, [r4, #8]
 80009d2:	6023      	str	r3, [r4, #0]
 80009d4:	e706      	b.n	80007e4 <__sfvwrite_r+0x88>
 80009d6:	4649      	mov	r1, r9
 80009d8:	463a      	mov	r2, r7
 80009da:	f000 fc5d 	bl	8001298 <memmove>
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	9802      	ldr	r0, [sp, #8]
 80009e2:	4621      	mov	r1, r4
 80009e4:	19db      	adds	r3, r3, r7
 80009e6:	6023      	str	r3, [r4, #0]
 80009e8:	f001 f888 	bl	8001afc <_fflush_r>
 80009ec:	2800      	cmp	r0, #0
 80009ee:	f43f aef9 	beq.w	80007e4 <__sfvwrite_r+0x88>
 80009f2:	e7c9      	b.n	8000988 <__sfvwrite_r+0x22c>
 80009f4:	6967      	ldr	r7, [r4, #20]
 80009f6:	6822      	ldr	r2, [r4, #0]
 80009f8:	6921      	ldr	r1, [r4, #16]
 80009fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80009fe:	ebc1 0a02 	rsb	sl, r1, r2
 8000a02:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8000a06:	f10a 0001 	add.w	r0, sl, #1
 8000a0a:	1980      	adds	r0, r0, r6
 8000a0c:	107f      	asrs	r7, r7, #1
 8000a0e:	4287      	cmp	r7, r0
 8000a10:	463a      	mov	r2, r7
 8000a12:	bf3c      	itt	cc
 8000a14:	4607      	movcc	r7, r0
 8000a16:	4602      	movcc	r2, r0
 8000a18:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000a1c:	d01d      	beq.n	8000a5a <__sfvwrite_r+0x2fe>
 8000a1e:	9802      	ldr	r0, [sp, #8]
 8000a20:	4611      	mov	r1, r2
 8000a22:	f000 f88d 	bl	8000b40 <_malloc_r>
 8000a26:	4683      	mov	fp, r0
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d02e      	beq.n	8000a8a <__sfvwrite_r+0x32e>
 8000a2c:	6921      	ldr	r1, [r4, #16]
 8000a2e:	4652      	mov	r2, sl
 8000a30:	f000 fb8a 	bl	8001148 <memcpy>
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3e:	81a3      	strh	r3, [r4, #12]
 8000a40:	eb0b 000a 	add.w	r0, fp, sl
 8000a44:	ebca 0307 	rsb	r3, sl, r7
 8000a48:	f8c4 b010 	str.w	fp, [r4, #16]
 8000a4c:	46b3      	mov	fp, r6
 8000a4e:	6167      	str	r7, [r4, #20]
 8000a50:	4637      	mov	r7, r6
 8000a52:	9603      	str	r6, [sp, #12]
 8000a54:	6020      	str	r0, [r4, #0]
 8000a56:	60a3      	str	r3, [r4, #8]
 8000a58:	e6b8      	b.n	80007cc <__sfvwrite_r+0x70>
 8000a5a:	9802      	ldr	r0, [sp, #8]
 8000a5c:	f000 fcd4 	bl	8001408 <_realloc_r>
 8000a60:	4683      	mov	fp, r0
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d1ec      	bne.n	8000a40 <__sfvwrite_r+0x2e4>
 8000a66:	6921      	ldr	r1, [r4, #16]
 8000a68:	9802      	ldr	r0, [sp, #8]
 8000a6a:	f7ff fdab 	bl	80005c4 <_free_r>
 8000a6e:	9902      	ldr	r1, [sp, #8]
 8000a70:	230c      	movs	r3, #12
 8000a72:	600b      	str	r3, [r1, #0]
 8000a74:	e788      	b.n	8000988 <__sfvwrite_r+0x22c>
 8000a76:	9902      	ldr	r1, [sp, #8]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	89a3      	ldrh	r3, [r4, #12]
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a82:	81a3      	strh	r3, [r4, #12]
 8000a84:	2309      	movs	r3, #9
 8000a86:	600b      	str	r3, [r1, #0]
 8000a88:	e6fb      	b.n	8000882 <__sfvwrite_r+0x126>
 8000a8a:	9a02      	ldr	r2, [sp, #8]
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	e77a      	b.n	8000988 <__sfvwrite_r+0x22c>
 8000a92:	bf00      	nop

08000a94 <_fwalk>:
 8000a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a98:	4607      	mov	r7, r0
 8000a9a:	4689      	mov	r9, r1
 8000a9c:	f7ff fd1e 	bl	80004dc <__sfp_lock_acquire>
 8000aa0:	37d8      	adds	r7, #216	; 0xd8
 8000aa2:	bf08      	it	eq
 8000aa4:	46b8      	moveq	r8, r7
 8000aa6:	d01a      	beq.n	8000ade <_fwalk+0x4a>
 8000aa8:	f04f 0800 	mov.w	r8, #0
 8000aac:	687e      	ldr	r6, [r7, #4]
 8000aae:	68bc      	ldr	r4, [r7, #8]
 8000ab0:	2e00      	cmp	r6, #0
 8000ab2:	dd11      	ble.n	8000ad8 <_fwalk+0x44>
 8000ab4:	2500      	movs	r5, #0
 8000ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aba:	3501      	adds	r5, #1
 8000abc:	b143      	cbz	r3, 8000ad0 <_fwalk+0x3c>
 8000abe:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d002      	beq.n	8000ad0 <_fwalk+0x3c>
 8000aca:	47c8      	blx	r9
 8000acc:	ea48 0800 	orr.w	r8, r8, r0
 8000ad0:	42b5      	cmp	r5, r6
 8000ad2:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8000ad6:	d1ee      	bne.n	8000ab6 <_fwalk+0x22>
 8000ad8:	683f      	ldr	r7, [r7, #0]
 8000ada:	2f00      	cmp	r7, #0
 8000adc:	d1e6      	bne.n	8000aac <_fwalk+0x18>
 8000ade:	f7ff fcff 	bl	80004e0 <__sfp_lock_release>
 8000ae2:	4640      	mov	r0, r8
 8000ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000ae8 <_fwalk_reent>:
 8000ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aec:	4680      	mov	r8, r0
 8000aee:	468a      	mov	sl, r1
 8000af0:	f7ff fcf4 	bl	80004dc <__sfp_lock_acquire>
 8000af4:	f118 07d8 	adds.w	r7, r8, #216	; 0xd8
 8000af8:	bf08      	it	eq
 8000afa:	46b9      	moveq	r9, r7
 8000afc:	d01b      	beq.n	8000b36 <_fwalk_reent+0x4e>
 8000afe:	f04f 0900 	mov.w	r9, #0
 8000b02:	687e      	ldr	r6, [r7, #4]
 8000b04:	68bc      	ldr	r4, [r7, #8]
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	dd12      	ble.n	8000b30 <_fwalk_reent+0x48>
 8000b0a:	2500      	movs	r5, #0
 8000b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b10:	3501      	adds	r5, #1
 8000b12:	b14b      	cbz	r3, 8000b28 <_fwalk_reent+0x40>
 8000b14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8000b18:	4621      	mov	r1, r4
 8000b1a:	4640      	mov	r0, r8
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d002      	beq.n	8000b28 <_fwalk_reent+0x40>
 8000b22:	47d0      	blx	sl
 8000b24:	ea49 0900 	orr.w	r9, r9, r0
 8000b28:	42b5      	cmp	r5, r6
 8000b2a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8000b2e:	d1ed      	bne.n	8000b0c <_fwalk_reent+0x24>
 8000b30:	683f      	ldr	r7, [r7, #0]
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d1e5      	bne.n	8000b02 <_fwalk_reent+0x1a>
 8000b36:	f7ff fcd3 	bl	80004e0 <__sfp_lock_release>
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000b40 <_malloc_r>:
 8000b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b44:	f101 040b 	add.w	r4, r1, #11
 8000b48:	2c16      	cmp	r4, #22
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	d931      	bls.n	8000bb4 <_malloc_r+0x74>
 8000b50:	f024 0407 	bic.w	r4, r4, #7
 8000b54:	0fe3      	lsrs	r3, r4, #31
 8000b56:	428c      	cmp	r4, r1
 8000b58:	bf2c      	ite	cs
 8000b5a:	4619      	movcs	r1, r3
 8000b5c:	f043 0101 	orrcc.w	r1, r3, #1
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d130      	bne.n	8000bc6 <_malloc_r+0x86>
 8000b64:	4630      	mov	r0, r6
 8000b66:	f000 fc4b 	bl	8001400 <__malloc_lock>
 8000b6a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8000b6e:	d22f      	bcs.n	8000bd0 <_malloc_r+0x90>
 8000b70:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8000b74:	f240 15d8 	movw	r5, #472	; 0x1d8
 8000b78:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000b7c:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 8000b80:	462f      	mov	r7, r5
 8000b82:	68d3      	ldr	r3, [r2, #12]
 8000b84:	4293      	cmp	r3, r2
 8000b86:	f000 822d 	beq.w	8000fe4 <_malloc_r+0x4a4>
 8000b8a:	685c      	ldr	r4, [r3, #4]
 8000b8c:	f103 0808 	add.w	r8, r3, #8
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	4630      	mov	r0, r6
 8000b94:	f024 0403 	bic.w	r4, r4, #3
 8000b98:	6899      	ldr	r1, [r3, #8]
 8000b9a:	191b      	adds	r3, r3, r4
 8000b9c:	685c      	ldr	r4, [r3, #4]
 8000b9e:	60ca      	str	r2, [r1, #12]
 8000ba0:	f044 0401 	orr.w	r4, r4, #1
 8000ba4:	6091      	str	r1, [r2, #8]
 8000ba6:	605c      	str	r4, [r3, #4]
 8000ba8:	f000 fc2c 	bl	8001404 <__malloc_unlock>
 8000bac:	4640      	mov	r0, r8
 8000bae:	b003      	add	sp, #12
 8000bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2410      	movs	r4, #16
 8000bb8:	428c      	cmp	r4, r1
 8000bba:	bf2c      	ite	cs
 8000bbc:	4619      	movcs	r1, r3
 8000bbe:	f043 0101 	orrcc.w	r1, r3, #1
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d0ce      	beq.n	8000b64 <_malloc_r+0x24>
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	f04f 0800 	mov.w	r8, #0
 8000bcc:	6033      	str	r3, [r6, #0]
 8000bce:	e7ed      	b.n	8000bac <_malloc_r+0x6c>
 8000bd0:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 8000bd4:	bf04      	itt	eq
 8000bd6:	ea4f 0cd4 	moveq.w	ip, r4, lsr #3
 8000bda:	ea4f 00cc 	moveq.w	r0, ip, lsl #3
 8000bde:	f040 8086 	bne.w	8000cee <_malloc_r+0x1ae>
 8000be2:	f240 15d8 	movw	r5, #472	; 0x1d8
 8000be6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000bea:	1828      	adds	r0, r5, r0
 8000bec:	462f      	mov	r7, r5
 8000bee:	68c3      	ldr	r3, [r0, #12]
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	d106      	bne.n	8000c02 <_malloc_r+0xc2>
 8000bf4:	e00d      	b.n	8000c12 <_malloc_r+0xd2>
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	f280 8179 	bge.w	8000eee <_malloc_r+0x3ae>
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	4298      	cmp	r0, r3
 8000c00:	d007      	beq.n	8000c12 <_malloc_r+0xd2>
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	f022 0203 	bic.w	r2, r2, #3
 8000c08:	1b11      	subs	r1, r2, r4
 8000c0a:	290f      	cmp	r1, #15
 8000c0c:	ddf3      	ble.n	8000bf6 <_malloc_r+0xb6>
 8000c0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000c12:	f10c 0c01 	add.w	ip, ip, #1
 8000c16:	4abd      	ldr	r2, [pc, #756]	; (8000f0c <_malloc_r+0x3cc>)
 8000c18:	6893      	ldr	r3, [r2, #8]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	bf08      	it	eq
 8000c1e:	6878      	ldreq	r0, [r7, #4]
 8000c20:	d024      	beq.n	8000c6c <_malloc_r+0x12c>
 8000c22:	6858      	ldr	r0, [r3, #4]
 8000c24:	f020 0003 	bic.w	r0, r0, #3
 8000c28:	1b01      	subs	r1, r0, r4
 8000c2a:	290f      	cmp	r1, #15
 8000c2c:	f300 81c0 	bgt.w	8000fb0 <_malloc_r+0x470>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	60d2      	str	r2, [r2, #12]
 8000c34:	6092      	str	r2, [r2, #8]
 8000c36:	f280 8094 	bge.w	8000d62 <_malloc_r+0x222>
 8000c3a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000c3e:	f080 8177 	bcs.w	8000f30 <_malloc_r+0x3f0>
 8000c42:	08c0      	lsrs	r0, r0, #3
 8000c44:	f04f 0e01 	mov.w	lr, #1
 8000c48:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8000c4c:	eb07 01c0 	add.w	r1, r7, r0, lsl #3
 8000c50:	1080      	asrs	r0, r0, #2
 8000c52:	fa0e f000 	lsl.w	r0, lr, r0
 8000c56:	60d9      	str	r1, [r3, #12]
 8000c58:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000c5c:	ea40 0008 	orr.w	r0, r0, r8
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	f8c3 e008 	str.w	lr, [r3, #8]
 8000c66:	f8ce 300c 	str.w	r3, [lr, #12]
 8000c6a:	608b      	str	r3, [r1, #8]
 8000c6c:	f04f 0e01 	mov.w	lr, #1
 8000c70:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8000c74:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c78:	4586      	cmp	lr, r0
 8000c7a:	d87d      	bhi.n	8000d78 <_malloc_r+0x238>
 8000c7c:	ea10 0f0e 	tst.w	r0, lr
 8000c80:	d108      	bne.n	8000c94 <_malloc_r+0x154>
 8000c82:	f02c 0c03 	bic.w	ip, ip, #3
 8000c86:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000c8a:	f10c 0c04 	add.w	ip, ip, #4
 8000c8e:	ea10 0f0e 	tst.w	r0, lr
 8000c92:	d0f8      	beq.n	8000c86 <_malloc_r+0x146>
 8000c94:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
 8000c98:	46e1      	mov	r9, ip
 8000c9a:	46d0      	mov	r8, sl
 8000c9c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8000ca0:	4580      	cmp	r8, r0
 8000ca2:	d107      	bne.n	8000cb4 <_malloc_r+0x174>
 8000ca4:	e196      	b.n	8000fd4 <_malloc_r+0x494>
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f280 81a6 	bge.w	8000ff8 <_malloc_r+0x4b8>
 8000cac:	68c0      	ldr	r0, [r0, #12]
 8000cae:	4580      	cmp	r8, r0
 8000cb0:	f000 8190 	beq.w	8000fd4 <_malloc_r+0x494>
 8000cb4:	6841      	ldr	r1, [r0, #4]
 8000cb6:	f021 0103 	bic.w	r1, r1, #3
 8000cba:	1b0b      	subs	r3, r1, r4
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	ddf2      	ble.n	8000ca6 <_malloc_r+0x166>
 8000cc0:	4680      	mov	r8, r0
 8000cc2:	68c5      	ldr	r5, [r0, #12]
 8000cc4:	1901      	adds	r1, r0, r4
 8000cc6:	f044 0e01 	orr.w	lr, r4, #1
 8000cca:	f858 7f08 	ldr.w	r7, [r8, #8]!
 8000cce:	f043 0401 	orr.w	r4, r3, #1
 8000cd2:	f8c0 e004 	str.w	lr, [r0, #4]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	604c      	str	r4, [r1, #4]
 8000cda:	60fd      	str	r5, [r7, #12]
 8000cdc:	60af      	str	r7, [r5, #8]
 8000cde:	60d1      	str	r1, [r2, #12]
 8000ce0:	6091      	str	r1, [r2, #8]
 8000ce2:	60ca      	str	r2, [r1, #12]
 8000ce4:	608a      	str	r2, [r1, #8]
 8000ce6:	50cb      	str	r3, [r1, r3]
 8000ce8:	f000 fb8c 	bl	8001404 <__malloc_unlock>
 8000cec:	e75e      	b.n	8000bac <_malloc_r+0x6c>
 8000cee:	f1bc 0f04 	cmp.w	ip, #4
 8000cf2:	bf9e      	ittt	ls
 8000cf4:	ea4f 1c94 	movls.w	ip, r4, lsr #6
 8000cf8:	f10c 0c38 	addls.w	ip, ip, #56	; 0x38
 8000cfc:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 8000d00:	f67f af6f 	bls.w	8000be2 <_malloc_r+0xa2>
 8000d04:	f1bc 0f14 	cmp.w	ip, #20
 8000d08:	bf9c      	itt	ls
 8000d0a:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8000d0e:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 8000d12:	f67f af66 	bls.w	8000be2 <_malloc_r+0xa2>
 8000d16:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8000d1a:	bf9e      	ittt	ls
 8000d1c:	ea4f 3c14 	movls.w	ip, r4, lsr #12
 8000d20:	f10c 0c6e 	addls.w	ip, ip, #110	; 0x6e
 8000d24:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 8000d28:	f67f af5b 	bls.w	8000be2 <_malloc_r+0xa2>
 8000d2c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8000d30:	bf9e      	ittt	ls
 8000d32:	ea4f 3cd4 	movls.w	ip, r4, lsr #15
 8000d36:	f10c 0c77 	addls.w	ip, ip, #119	; 0x77
 8000d3a:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 8000d3e:	f67f af50 	bls.w	8000be2 <_malloc_r+0xa2>
 8000d42:	f240 5354 	movw	r3, #1364	; 0x554
 8000d46:	459c      	cmp	ip, r3
 8000d48:	bf95      	itete	ls
 8000d4a:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 8000d4e:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 8000d52:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 8000d56:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 8000d5a:	bf98      	it	ls
 8000d5c:	ea4f 00cc 	movls.w	r0, ip, lsl #3
 8000d60:	e73f      	b.n	8000be2 <_malloc_r+0xa2>
 8000d62:	181a      	adds	r2, r3, r0
 8000d64:	f103 0808 	add.w	r8, r3, #8
 8000d68:	4630      	mov	r0, r6
 8000d6a:	6853      	ldr	r3, [r2, #4]
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
 8000d72:	f000 fb47 	bl	8001404 <__malloc_unlock>
 8000d76:	e719      	b.n	8000bac <_malloc_r+0x6c>
 8000d78:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8000d7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000d80:	f023 0903 	bic.w	r9, r3, #3
 8000d84:	454c      	cmp	r4, r9
 8000d86:	ebc4 0209 	rsb	r2, r4, r9
 8000d8a:	bf94      	ite	ls
 8000d8c:	2300      	movls	r3, #0
 8000d8e:	2301      	movhi	r3, #1
 8000d90:	2a0f      	cmp	r2, #15
 8000d92:	bfd8      	it	le
 8000d94:	f043 0301 	orrle.w	r3, r3, #1
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80b9 	beq.w	8000f10 <_malloc_r+0x3d0>
 8000d9e:	f240 6a14 	movw	sl, #1556	; 0x614
 8000da2:	f8d5 3408 	ldr.w	r3, [r5, #1032]	; 0x408
 8000da6:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8000daa:	4630      	mov	r0, r6
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	f8da 2000 	ldr.w	r2, [sl]
 8000db4:	f102 0b10 	add.w	fp, r2, #16
 8000db8:	44a3      	add	fp, r4
 8000dba:	bf1f      	itttt	ne
 8000dbc:	f50b 6b7e 	addne.w	fp, fp, #4064	; 0xfe0
 8000dc0:	f10b 0b1f 	addne.w	fp, fp, #31
 8000dc4:	f42b 6b7e 	bicne.w	fp, fp, #4064	; 0xfe0
 8000dc8:	f02b 0b1f 	bicne.w	fp, fp, #31
 8000dcc:	4659      	mov	r1, fp
 8000dce:	f000 fd29 	bl	8001824 <_sbrk_r>
 8000dd2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f000 8118 	beq.w	800100c <_malloc_r+0x4cc>
 8000ddc:	eb08 0109 	add.w	r1, r8, r9
 8000de0:	4281      	cmp	r1, r0
 8000de2:	f200 8110 	bhi.w	8001006 <_malloc_r+0x4c6>
 8000de6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000dea:	4281      	cmp	r1, r0
 8000dec:	445a      	add	r2, fp
 8000dee:	f8ca 2004 	str.w	r2, [sl, #4]
 8000df2:	f000 813e 	beq.w	8001072 <_malloc_r+0x532>
 8000df6:	f8d5 e408 	ldr.w	lr, [r5, #1032]	; 0x408
 8000dfa:	f240 15d8 	movw	r5, #472	; 0x1d8
 8000dfe:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000e02:	f1be 3fff 	cmp.w	lr, #4294967295
 8000e06:	bf17      	itett	ne
 8000e08:	1882      	addne	r2, r0, r2
 8000e0a:	f8c5 0408 	streq.w	r0, [r5, #1032]	; 0x408
 8000e0e:	ebc1 0102 	rsbne	r1, r1, r2
 8000e12:	f8ca 1004 	strne.w	r1, [sl, #4]
 8000e16:	f010 0507 	ands.w	r5, r0, #7
 8000e1a:	bf17      	itett	ne
 8000e1c:	f1c5 0508 	rsbne	r5, r5, #8
 8000e20:	f44f 5580 	moveq.w	r5, #4096	; 0x1000
 8000e24:	1943      	addne	r3, r0, r5
 8000e26:	f505 5580 	addne.w	r5, r5, #4096	; 0x1000
 8000e2a:	eb03 020b 	add.w	r2, r3, fp
 8000e2e:	4630      	mov	r0, r6
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	0512      	lsls	r2, r2, #20
 8000e34:	0d12      	lsrs	r2, r2, #20
 8000e36:	1aad      	subs	r5, r5, r2
 8000e38:	4629      	mov	r1, r5
 8000e3a:	f000 fcf3 	bl	8001824 <_sbrk_r>
 8000e3e:	9b01      	ldr	r3, [sp, #4]
 8000e40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000e44:	f000 812c 	beq.w	80010a0 <_malloc_r+0x560>
 8000e48:	1ac1      	subs	r1, r0, r3
 8000e4a:	1949      	adds	r1, r1, r5
 8000e4c:	f041 0101 	orr.w	r1, r1, #1
 8000e50:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000e54:	45b8      	cmp	r8, r7
 8000e56:	f240 6b14 	movw	fp, #1556	; 0x614
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	442a      	add	r2, r5
 8000e5e:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8000e62:	6059      	str	r1, [r3, #4]
 8000e64:	f8ca 2004 	str.w	r2, [sl, #4]
 8000e68:	d017      	beq.n	8000e9a <_malloc_r+0x35a>
 8000e6a:	f1b9 0f0f 	cmp.w	r9, #15
 8000e6e:	f240 80e1 	bls.w	8001034 <_malloc_r+0x4f4>
 8000e72:	f1a9 030c 	sub.w	r3, r9, #12
 8000e76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8000e7a:	f023 0307 	bic.w	r3, r3, #7
 8000e7e:	2005      	movs	r0, #5
 8000e80:	eb08 0103 	add.w	r1, r8, r3
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	f005 0501 	and.w	r5, r5, #1
 8000e8a:	ea43 0505 	orr.w	r5, r3, r5
 8000e8e:	f8c8 5004 	str.w	r5, [r8, #4]
 8000e92:	6048      	str	r0, [r1, #4]
 8000e94:	6088      	str	r0, [r1, #8]
 8000e96:	f200 80fb 	bhi.w	8001090 <_malloc_r+0x550>
 8000e9a:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 8000e9e:	f240 6314 	movw	r3, #1556	; 0x614
 8000ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea6:	428a      	cmp	r2, r1
 8000ea8:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
 8000eac:	bf88      	it	hi
 8000eae:	62da      	strhi	r2, [r3, #44]	; 0x2c
 8000eb0:	f240 6314 	movw	r3, #1556	; 0x614
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eba:	f240 80a7 	bls.w	800100c <_malloc_r+0x4cc>
 8000ebe:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ec4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000ec8:	f023 0303 	bic.w	r3, r3, #3
 8000ecc:	429c      	cmp	r4, r3
 8000ece:	ebc4 0203 	rsb	r2, r4, r3
 8000ed2:	bf94      	ite	ls
 8000ed4:	2300      	movls	r3, #0
 8000ed6:	2301      	movhi	r3, #1
 8000ed8:	2a0f      	cmp	r2, #15
 8000eda:	bfd8      	it	le
 8000edc:	f043 0301 	orrle.w	r3, r3, #1
 8000ee0:	b1b3      	cbz	r3, 8000f10 <_malloc_r+0x3d0>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f04f 0800 	mov.w	r8, #0
 8000ee8:	f000 fa8c 	bl	8001404 <__malloc_unlock>
 8000eec:	e65e      	b.n	8000bac <_malloc_r+0x6c>
 8000eee:	189a      	adds	r2, r3, r2
 8000ef0:	68d9      	ldr	r1, [r3, #12]
 8000ef2:	689c      	ldr	r4, [r3, #8]
 8000ef4:	f103 0808 	add.w	r8, r3, #8
 8000ef8:	6855      	ldr	r5, [r2, #4]
 8000efa:	4630      	mov	r0, r6
 8000efc:	f045 0301 	orr.w	r3, r5, #1
 8000f00:	60e1      	str	r1, [r4, #12]
 8000f02:	608c      	str	r4, [r1, #8]
 8000f04:	6053      	str	r3, [r2, #4]
 8000f06:	f000 fa7d 	bl	8001404 <__malloc_unlock>
 8000f0a:	e64f      	b.n	8000bac <_malloc_r+0x6c>
 8000f0c:	200001e0 	.word	0x200001e0
 8000f10:	eb08 0304 	add.w	r3, r8, r4
 8000f14:	f042 0201 	orr.w	r2, r2, #1
 8000f18:	f044 0401 	orr.w	r4, r4, #1
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f8c8 4004 	str.w	r4, [r8, #4]
 8000f22:	f108 0808 	add.w	r8, r8, #8
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	f000 fa6b 	bl	8001404 <__malloc_unlock>
 8000f2e:	e63d      	b.n	8000bac <_malloc_r+0x6c>
 8000f30:	0a41      	lsrs	r1, r0, #9
 8000f32:	2904      	cmp	r1, #4
 8000f34:	bf9c      	itt	ls
 8000f36:	ea4f 1e90 	movls.w	lr, r0, lsr #6
 8000f3a:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8000f3e:	d91d      	bls.n	8000f7c <_malloc_r+0x43c>
 8000f40:	2914      	cmp	r1, #20
 8000f42:	bf98      	it	ls
 8000f44:	f101 0e5b 	addls.w	lr, r1, #91	; 0x5b
 8000f48:	d918      	bls.n	8000f7c <_malloc_r+0x43c>
 8000f4a:	2954      	cmp	r1, #84	; 0x54
 8000f4c:	bf9c      	itt	ls
 8000f4e:	ea4f 3e10 	movls.w	lr, r0, lsr #12
 8000f52:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8000f56:	d911      	bls.n	8000f7c <_malloc_r+0x43c>
 8000f58:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 8000f5c:	bf9c      	itt	ls
 8000f5e:	ea4f 3ed0 	movls.w	lr, r0, lsr #15
 8000f62:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8000f66:	d909      	bls.n	8000f7c <_malloc_r+0x43c>
 8000f68:	f240 5e54 	movw	lr, #1364	; 0x554
 8000f6c:	4571      	cmp	r1, lr
 8000f6e:	bf96      	itet	ls
 8000f70:	ea4f 4e90 	movls.w	lr, r0, lsr #18
 8000f74:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8000f78:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8000f7c:	eb07 08ce 	add.w	r8, r7, lr, lsl #3
 8000f80:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8000f84:	4541      	cmp	r1, r8
 8000f86:	d103      	bne.n	8000f90 <_malloc_r+0x450>
 8000f88:	e047      	b.n	800101a <_malloc_r+0x4da>
 8000f8a:	6889      	ldr	r1, [r1, #8]
 8000f8c:	4588      	cmp	r8, r1
 8000f8e:	d005      	beq.n	8000f9c <_malloc_r+0x45c>
 8000f90:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8000f94:	f02e 0e03 	bic.w	lr, lr, #3
 8000f98:	4570      	cmp	r0, lr
 8000f9a:	d3f6      	bcc.n	8000f8a <_malloc_r+0x44a>
 8000f9c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8000fa0:	f8c3 e00c 	str.w	lr, [r3, #12]
 8000fa4:	6099      	str	r1, [r3, #8]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	60cb      	str	r3, [r1, #12]
 8000faa:	f8ce 3008 	str.w	r3, [lr, #8]
 8000fae:	e65d      	b.n	8000c6c <_malloc_r+0x12c>
 8000fb0:	191d      	adds	r5, r3, r4
 8000fb2:	f041 0701 	orr.w	r7, r1, #1
 8000fb6:	60d5      	str	r5, [r2, #12]
 8000fb8:	f044 0401 	orr.w	r4, r4, #1
 8000fbc:	6095      	str	r5, [r2, #8]
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	605c      	str	r4, [r3, #4]
 8000fc2:	f103 0808 	add.w	r8, r3, #8
 8000fc6:	60ea      	str	r2, [r5, #12]
 8000fc8:	60aa      	str	r2, [r5, #8]
 8000fca:	606f      	str	r7, [r5, #4]
 8000fcc:	5069      	str	r1, [r5, r1]
 8000fce:	f000 fa19 	bl	8001404 <__malloc_unlock>
 8000fd2:	e5eb      	b.n	8000bac <_malloc_r+0x6c>
 8000fd4:	f109 0901 	add.w	r9, r9, #1
 8000fd8:	f019 0f03 	tst.w	r9, #3
 8000fdc:	d02f      	beq.n	800103e <_malloc_r+0x4fe>
 8000fde:	f108 0808 	add.w	r8, r8, #8
 8000fe2:	e65b      	b.n	8000c9c <_malloc_r+0x15c>
 8000fe4:	f103 0208 	add.w	r2, r3, #8
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	bf08      	it	eq
 8000fee:	f10c 0c02 	addeq.w	ip, ip, #2
 8000ff2:	f43f ae10 	beq.w	8000c16 <_malloc_r+0xd6>
 8000ff6:	e5c8      	b.n	8000b8a <_malloc_r+0x4a>
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	1843      	adds	r3, r0, r1
 8000ffc:	68c2      	ldr	r2, [r0, #12]
 8000ffe:	4630      	mov	r0, r6
 8001000:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8001004:	e5ca      	b.n	8000b9c <_malloc_r+0x5c>
 8001006:	45b8      	cmp	r8, r7
 8001008:	f43f aeed 	beq.w	8000de6 <_malloc_r+0x2a6>
 800100c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8001010:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001014:	f023 0303 	bic.w	r3, r3, #3
 8001018:	e758      	b.n	8000ecc <_malloc_r+0x38c>
 800101a:	f04f 0901 	mov.w	r9, #1
 800101e:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8001022:	ea4f 00ae 	mov.w	r0, lr, asr #2
 8001026:	468e      	mov	lr, r1
 8001028:	fa09 f000 	lsl.w	r0, r9, r0
 800102c:	ea48 0000 	orr.w	r0, r8, r0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	e7b5      	b.n	8000fa0 <_malloc_r+0x460>
 8001034:	4698      	mov	r8, r3
 8001036:	2201      	movs	r2, #1
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	2300      	movs	r3, #0
 800103c:	e746      	b.n	8000ecc <_malloc_r+0x38c>
 800103e:	4651      	mov	r1, sl
 8001040:	f01c 0f03 	tst.w	ip, #3
 8001044:	460b      	mov	r3, r1
 8001046:	f10c 3cff 	add.w	ip, ip, #4294967295
 800104a:	d02c      	beq.n	80010a6 <_malloc_r+0x566>
 800104c:	f853 1908 	ldr.w	r1, [r3], #-8
 8001050:	4299      	cmp	r1, r3
 8001052:	d0f5      	beq.n	8001040 <_malloc_r+0x500>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800105a:	459e      	cmp	lr, r3
 800105c:	f63f ae8c 	bhi.w	8000d78 <_malloc_r+0x238>
 8001060:	f1be 0f00 	cmp.w	lr, #0
 8001064:	f43f ae88 	beq.w	8000d78 <_malloc_r+0x238>
 8001068:	ea1e 0f03 	tst.w	lr, r3
 800106c:	d020      	beq.n	80010b0 <_malloc_r+0x570>
 800106e:	46cc      	mov	ip, r9
 8001070:	e610      	b.n	8000c94 <_malloc_r+0x154>
 8001072:	ea4f 5e01 	mov.w	lr, r1, lsl #20
 8001076:	ea4f 5e1e 	mov.w	lr, lr, lsr #20
 800107a:	f1be 0f00 	cmp.w	lr, #0
 800107e:	f47f aeba 	bne.w	8000df6 <_malloc_r+0x2b6>
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	eb0b 0109 	add.w	r1, fp, r9
 8001088:	f041 0101 	orr.w	r1, r1, #1
 800108c:	6059      	str	r1, [r3, #4]
 800108e:	e704      	b.n	8000e9a <_malloc_r+0x35a>
 8001090:	4630      	mov	r0, r6
 8001092:	f108 0108 	add.w	r1, r8, #8
 8001096:	f7ff fa95 	bl	80005c4 <_free_r>
 800109a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800109e:	e6fc      	b.n	8000e9a <_malloc_r+0x35a>
 80010a0:	2101      	movs	r1, #1
 80010a2:	2500      	movs	r5, #0
 80010a4:	e6d4      	b.n	8000e50 <_malloc_r+0x310>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	ea23 030e 	bic.w	r3, r3, lr
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	e7d1      	b.n	8001054 <_malloc_r+0x514>
 80010b0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80010b4:	f109 0904 	add.w	r9, r9, #4
 80010b8:	e7d6      	b.n	8001068 <_malloc_r+0x528>
 80010ba:	bf00      	nop

080010bc <memchr>:
 80010bc:	f010 0f03 	tst.w	r0, #3
 80010c0:	4603      	mov	r3, r0
 80010c2:	b470      	push	{r4, r5, r6}
 80010c4:	b2c9      	uxtb	r1, r1
 80010c6:	d011      	beq.n	80010ec <memchr+0x30>
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	d022      	beq.n	8001112 <memchr+0x56>
 80010cc:	7803      	ldrb	r3, [r0, #0]
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d01d      	beq.n	800110e <memchr+0x52>
 80010d2:	3a01      	subs	r2, #1
 80010d4:	3001      	adds	r0, #1
 80010d6:	e005      	b.n	80010e4 <memchr+0x28>
 80010d8:	b1da      	cbz	r2, 8001112 <memchr+0x56>
 80010da:	f810 4b01 	ldrb.w	r4, [r0], #1
 80010de:	3a01      	subs	r2, #1
 80010e0:	428c      	cmp	r4, r1
 80010e2:	d018      	beq.n	8001116 <memchr+0x5a>
 80010e4:	f010 0f03 	tst.w	r0, #3
 80010e8:	4603      	mov	r3, r0
 80010ea:	d1f5      	bne.n	80010d8 <memchr+0x1c>
 80010ec:	2a03      	cmp	r2, #3
 80010ee:	d814      	bhi.n	800111a <memchr+0x5e>
 80010f0:	b17a      	cbz	r2, 8001112 <memchr+0x56>
 80010f2:	7818      	ldrb	r0, [r3, #0]
 80010f4:	4288      	cmp	r0, r1
 80010f6:	d00e      	beq.n	8001116 <memchr+0x5a>
 80010f8:	1e54      	subs	r4, r2, #1
 80010fa:	1c5d      	adds	r5, r3, #1
 80010fc:	e003      	b.n	8001106 <memchr+0x4a>
 80010fe:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001102:	428e      	cmp	r6, r1
 8001104:	d003      	beq.n	800110e <memchr+0x52>
 8001106:	3c01      	subs	r4, #1
 8001108:	4628      	mov	r0, r5
 800110a:	d2f8      	bcs.n	80010fe <memchr+0x42>
 800110c:	2000      	movs	r0, #0
 800110e:	bc70      	pop	{r4, r5, r6}
 8001110:	4770      	bx	lr
 8001112:	4610      	mov	r0, r2
 8001114:	e7fb      	b.n	800110e <memchr+0x52>
 8001116:	4618      	mov	r0, r3
 8001118:	e7f9      	b.n	800110e <memchr+0x52>
 800111a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800111e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8001122:	4618      	mov	r0, r3
 8001124:	f853 4b04 	ldr.w	r4, [r3], #4
 8001128:	ea86 0404 	eor.w	r4, r6, r4
 800112c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8001130:	ea25 0404 	bic.w	r4, r5, r4
 8001134:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8001138:	d103      	bne.n	8001142 <memchr+0x86>
 800113a:	3a04      	subs	r2, #4
 800113c:	4618      	mov	r0, r3
 800113e:	2a03      	cmp	r2, #3
 8001140:	d8ef      	bhi.n	8001122 <memchr+0x66>
 8001142:	4603      	mov	r3, r0
 8001144:	e7d4      	b.n	80010f0 <memchr+0x34>
 8001146:	bf00      	nop

08001148 <memcpy>:
 8001148:	2a03      	cmp	r2, #3
 800114a:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800114e:	d809      	bhi.n	8001164 <memcpy+0x1c>
 8001150:	b12a      	cbz	r2, 800115e <memcpy+0x16>
 8001152:	2300      	movs	r3, #0
 8001154:	5ccc      	ldrb	r4, [r1, r3]
 8001156:	54c4      	strb	r4, [r0, r3]
 8001158:	3301      	adds	r3, #1
 800115a:	4293      	cmp	r3, r2
 800115c:	d1fa      	bne.n	8001154 <memcpy+0xc>
 800115e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001162:	4770      	bx	lr
 8001164:	460b      	mov	r3, r1
 8001166:	1882      	adds	r2, r0, r2
 8001168:	4601      	mov	r1, r0
 800116a:	e003      	b.n	8001174 <memcpy+0x2c>
 800116c:	7824      	ldrb	r4, [r4, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	f801 4b01 	strb.w	r4, [r1], #1
 8001174:	f011 0f03 	tst.w	r1, #3
 8001178:	461c      	mov	r4, r3
 800117a:	d1f7      	bne.n	800116c <memcpy+0x24>
 800117c:	f013 0503 	ands.w	r5, r3, #3
 8001180:	d05d      	beq.n	800123e <memcpy+0xf6>
 8001182:	426e      	negs	r6, r5
 8001184:	f1c5 0c04 	rsb	ip, r5, #4
 8001188:	00ed      	lsls	r5, r5, #3
 800118a:	599b      	ldr	r3, [r3, r6]
 800118c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8001190:	e008      	b.n	80011a4 <memcpy+0x5c>
 8001192:	3404      	adds	r4, #4
 8001194:	59a7      	ldr	r7, [r4, r6]
 8001196:	463b      	mov	r3, r7
 8001198:	fa07 f70c 	lsl.w	r7, r7, ip
 800119c:	ea48 0707 	orr.w	r7, r8, r7
 80011a0:	f841 7b04 	str.w	r7, [r1], #4
 80011a4:	1a57      	subs	r7, r2, r1
 80011a6:	fa23 f805 	lsr.w	r8, r3, r5
 80011aa:	2f03      	cmp	r7, #3
 80011ac:	dcf1      	bgt.n	8001192 <memcpy+0x4a>
 80011ae:	e003      	b.n	80011b8 <memcpy+0x70>
 80011b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80011b4:	f801 3b01 	strb.w	r3, [r1], #1
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d8f9      	bhi.n	80011b0 <memcpy+0x68>
 80011bc:	e7cf      	b.n	800115e <memcpy+0x16>
 80011be:	f853 4c40 	ldr.w	r4, [r3, #-64]
 80011c2:	f841 4c40 	str.w	r4, [r1, #-64]
 80011c6:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 80011ca:	f841 4c3c 	str.w	r4, [r1, #-60]
 80011ce:	f853 4c38 	ldr.w	r4, [r3, #-56]
 80011d2:	f841 4c38 	str.w	r4, [r1, #-56]
 80011d6:	f853 4c34 	ldr.w	r4, [r3, #-52]
 80011da:	f841 4c34 	str.w	r4, [r1, #-52]
 80011de:	f853 4c30 	ldr.w	r4, [r3, #-48]
 80011e2:	f841 4c30 	str.w	r4, [r1, #-48]
 80011e6:	f853 4c2c 	ldr.w	r4, [r3, #-44]
 80011ea:	f841 4c2c 	str.w	r4, [r1, #-44]
 80011ee:	f853 4c28 	ldr.w	r4, [r3, #-40]
 80011f2:	f841 4c28 	str.w	r4, [r1, #-40]
 80011f6:	f853 4c24 	ldr.w	r4, [r3, #-36]
 80011fa:	f841 4c24 	str.w	r4, [r1, #-36]
 80011fe:	f853 4c20 	ldr.w	r4, [r3, #-32]
 8001202:	f841 4c20 	str.w	r4, [r1, #-32]
 8001206:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 800120a:	f841 4c1c 	str.w	r4, [r1, #-28]
 800120e:	f853 4c18 	ldr.w	r4, [r3, #-24]
 8001212:	f841 4c18 	str.w	r4, [r1, #-24]
 8001216:	f853 4c14 	ldr.w	r4, [r3, #-20]
 800121a:	f841 4c14 	str.w	r4, [r1, #-20]
 800121e:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8001222:	f841 4c10 	str.w	r4, [r1, #-16]
 8001226:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 800122a:	f841 4c0c 	str.w	r4, [r1, #-12]
 800122e:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8001232:	f841 4c08 	str.w	r4, [r1, #-8]
 8001236:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800123a:	f841 4c04 	str.w	r4, [r1, #-4]
 800123e:	1a56      	subs	r6, r2, r1
 8001240:	461d      	mov	r5, r3
 8001242:	460c      	mov	r4, r1
 8001244:	3340      	adds	r3, #64	; 0x40
 8001246:	3140      	adds	r1, #64	; 0x40
 8001248:	2e3f      	cmp	r6, #63	; 0x3f
 800124a:	dcb8      	bgt.n	80011be <memcpy+0x76>
 800124c:	462b      	mov	r3, r5
 800124e:	e00f      	b.n	8001270 <memcpy+0x128>
 8001250:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001254:	f844 1c10 	str.w	r1, [r4, #-16]
 8001258:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800125c:	f844 1c0c 	str.w	r1, [r4, #-12]
 8001260:	f853 1c08 	ldr.w	r1, [r3, #-8]
 8001264:	f844 1c08 	str.w	r1, [r4, #-8]
 8001268:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800126c:	f844 1c04 	str.w	r1, [r4, #-4]
 8001270:	1b16      	subs	r6, r2, r4
 8001272:	4621      	mov	r1, r4
 8001274:	461d      	mov	r5, r3
 8001276:	3410      	adds	r4, #16
 8001278:	3310      	adds	r3, #16
 800127a:	2e0f      	cmp	r6, #15
 800127c:	dce8      	bgt.n	8001250 <memcpy+0x108>
 800127e:	462b      	mov	r3, r5
 8001280:	e002      	b.n	8001288 <memcpy+0x140>
 8001282:	6824      	ldr	r4, [r4, #0]
 8001284:	f841 4b04 	str.w	r4, [r1], #4
 8001288:	1a55      	subs	r5, r2, r1
 800128a:	461c      	mov	r4, r3
 800128c:	2d03      	cmp	r5, #3
 800128e:	f103 0304 	add.w	r3, r3, #4
 8001292:	dcf6      	bgt.n	8001282 <memcpy+0x13a>
 8001294:	e790      	b.n	80011b8 <memcpy+0x70>
 8001296:	bf00      	nop

08001298 <memmove>:
 8001298:	4288      	cmp	r0, r1
 800129a:	4603      	mov	r3, r0
 800129c:	b4f0      	push	{r4, r5, r6, r7}
 800129e:	460c      	mov	r4, r1
 80012a0:	d90e      	bls.n	80012c0 <memmove+0x28>
 80012a2:	188d      	adds	r5, r1, r2
 80012a4:	42a8      	cmp	r0, r5
 80012a6:	d20b      	bcs.n	80012c0 <memmove+0x28>
 80012a8:	b142      	cbz	r2, 80012bc <memmove+0x24>
 80012aa:	1883      	adds	r3, r0, r2
 80012ac:	4629      	mov	r1, r5
 80012ae:	1a9a      	subs	r2, r3, r2
 80012b0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 80012b4:	f803 4d01 	strb.w	r4, [r3, #-1]!
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d1f9      	bne.n	80012b0 <memmove+0x18>
 80012bc:	bcf0      	pop	{r4, r5, r6, r7}
 80012be:	4770      	bx	lr
 80012c0:	2a0f      	cmp	r2, #15
 80012c2:	d938      	bls.n	8001336 <memmove+0x9e>
 80012c4:	ea41 0500 	orr.w	r5, r1, r0
 80012c8:	f015 0f03 	tst.w	r5, #3
 80012cc:	d135      	bne.n	800133a <memmove+0xa2>
 80012ce:	f1a2 0610 	sub.w	r6, r2, #16
 80012d2:	f101 0510 	add.w	r5, r1, #16
 80012d6:	460b      	mov	r3, r1
 80012d8:	4602      	mov	r2, r0
 80012da:	0937      	lsrs	r7, r6, #4
 80012dc:	eb05 1507 	add.w	r5, r5, r7, lsl #4
 80012e0:	681c      	ldr	r4, [r3, #0]
 80012e2:	6014      	str	r4, [r2, #0]
 80012e4:	685c      	ldr	r4, [r3, #4]
 80012e6:	6054      	str	r4, [r2, #4]
 80012e8:	689c      	ldr	r4, [r3, #8]
 80012ea:	6094      	str	r4, [r2, #8]
 80012ec:	68dc      	ldr	r4, [r3, #12]
 80012ee:	3310      	adds	r3, #16
 80012f0:	60d4      	str	r4, [r2, #12]
 80012f2:	3210      	adds	r2, #16
 80012f4:	429d      	cmp	r5, r3
 80012f6:	d1f3      	bne.n	80012e0 <memmove+0x48>
 80012f8:	1c7c      	adds	r4, r7, #1
 80012fa:	f006 020f 	and.w	r2, r6, #15
 80012fe:	0124      	lsls	r4, r4, #4
 8001300:	2a03      	cmp	r2, #3
 8001302:	eb00 0304 	add.w	r3, r0, r4
 8001306:	4421      	add	r1, r4
 8001308:	d914      	bls.n	8001334 <memmove+0x9c>
 800130a:	3a04      	subs	r2, #4
 800130c:	460c      	mov	r4, r1
 800130e:	461d      	mov	r5, r3
 8001310:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8001314:	eb01 078c 	add.w	r7, r1, ip, lsl #2
 8001318:	3704      	adds	r7, #4
 800131a:	f854 6b04 	ldr.w	r6, [r4], #4
 800131e:	42bc      	cmp	r4, r7
 8001320:	f845 6b04 	str.w	r6, [r5], #4
 8001324:	d1f9      	bne.n	800131a <memmove+0x82>
 8001326:	f10c 0401 	add.w	r4, ip, #1
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	00a4      	lsls	r4, r4, #2
 8001330:	191b      	adds	r3, r3, r4
 8001332:	1909      	adds	r1, r1, r4
 8001334:	460c      	mov	r4, r1
 8001336:	2a00      	cmp	r2, #0
 8001338:	d0c0      	beq.n	80012bc <memmove+0x24>
 800133a:	4621      	mov	r1, r4
 800133c:	18a2      	adds	r2, r4, r2
 800133e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001342:	4291      	cmp	r1, r2
 8001344:	f803 4b01 	strb.w	r4, [r3], #1
 8001348:	d1f9      	bne.n	800133e <memmove+0xa6>
 800134a:	e7b7      	b.n	80012bc <memmove+0x24>

0800134c <memset>:
 800134c:	2a03      	cmp	r2, #3
 800134e:	b2c9      	uxtb	r1, r1
 8001350:	b470      	push	{r4, r5, r6}
 8001352:	d808      	bhi.n	8001366 <memset+0x1a>
 8001354:	b12a      	cbz	r2, 8001362 <memset+0x16>
 8001356:	4603      	mov	r3, r0
 8001358:	1812      	adds	r2, r2, r0
 800135a:	f803 1b01 	strb.w	r1, [r3], #1
 800135e:	4293      	cmp	r3, r2
 8001360:	d1fb      	bne.n	800135a <memset+0xe>
 8001362:	bc70      	pop	{r4, r5, r6}
 8001364:	4770      	bx	lr
 8001366:	1882      	adds	r2, r0, r2
 8001368:	4604      	mov	r4, r0
 800136a:	e001      	b.n	8001370 <memset+0x24>
 800136c:	f804 1b01 	strb.w	r1, [r4], #1
 8001370:	f014 0f03 	tst.w	r4, #3
 8001374:	d1fa      	bne.n	800136c <memset+0x20>
 8001376:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800137a:	fb03 f301 	mul.w	r3, r3, r1
 800137e:	e01f      	b.n	80013c0 <memset+0x74>
 8001380:	f844 3c40 	str.w	r3, [r4, #-64]
 8001384:	f844 3c3c 	str.w	r3, [r4, #-60]
 8001388:	f844 3c38 	str.w	r3, [r4, #-56]
 800138c:	f844 3c34 	str.w	r3, [r4, #-52]
 8001390:	f844 3c30 	str.w	r3, [r4, #-48]
 8001394:	f844 3c2c 	str.w	r3, [r4, #-44]
 8001398:	f844 3c28 	str.w	r3, [r4, #-40]
 800139c:	f844 3c24 	str.w	r3, [r4, #-36]
 80013a0:	f844 3c20 	str.w	r3, [r4, #-32]
 80013a4:	f844 3c1c 	str.w	r3, [r4, #-28]
 80013a8:	f844 3c18 	str.w	r3, [r4, #-24]
 80013ac:	f844 3c14 	str.w	r3, [r4, #-20]
 80013b0:	f844 3c10 	str.w	r3, [r4, #-16]
 80013b4:	f844 3c0c 	str.w	r3, [r4, #-12]
 80013b8:	f844 3c08 	str.w	r3, [r4, #-8]
 80013bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80013c0:	1b16      	subs	r6, r2, r4
 80013c2:	4625      	mov	r5, r4
 80013c4:	3440      	adds	r4, #64	; 0x40
 80013c6:	2e3f      	cmp	r6, #63	; 0x3f
 80013c8:	dcda      	bgt.n	8001380 <memset+0x34>
 80013ca:	462c      	mov	r4, r5
 80013cc:	e007      	b.n	80013de <memset+0x92>
 80013ce:	f844 3c10 	str.w	r3, [r4, #-16]
 80013d2:	f844 3c0c 	str.w	r3, [r4, #-12]
 80013d6:	f844 3c08 	str.w	r3, [r4, #-8]
 80013da:	f844 3c04 	str.w	r3, [r4, #-4]
 80013de:	1b16      	subs	r6, r2, r4
 80013e0:	4625      	mov	r5, r4
 80013e2:	3410      	adds	r4, #16
 80013e4:	2e0f      	cmp	r6, #15
 80013e6:	dcf2      	bgt.n	80013ce <memset+0x82>
 80013e8:	e001      	b.n	80013ee <memset+0xa2>
 80013ea:	f845 3b04 	str.w	r3, [r5], #4
 80013ee:	1b54      	subs	r4, r2, r5
 80013f0:	2c03      	cmp	r4, #3
 80013f2:	dcfa      	bgt.n	80013ea <memset+0x9e>
 80013f4:	e001      	b.n	80013fa <memset+0xae>
 80013f6:	f805 1b01 	strb.w	r1, [r5], #1
 80013fa:	4295      	cmp	r5, r2
 80013fc:	d3fb      	bcc.n	80013f6 <memset+0xaa>
 80013fe:	e7b0      	b.n	8001362 <memset+0x16>

08001400 <__malloc_lock>:
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <__malloc_unlock>:
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <_realloc_r>:
 8001408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800140c:	460d      	mov	r5, r1
 800140e:	b083      	sub	sp, #12
 8001410:	4607      	mov	r7, r0
 8001412:	4690      	mov	r8, r2
 8001414:	2900      	cmp	r1, #0
 8001416:	f000 8155 	beq.w	80016c4 <_realloc_r+0x2bc>
 800141a:	f108 040b 	add.w	r4, r8, #11
 800141e:	f1a1 0a08 	sub.w	sl, r1, #8
 8001422:	f7ff ffed 	bl	8001400 <__malloc_lock>
 8001426:	2c16      	cmp	r4, #22
 8001428:	f8da 3004 	ldr.w	r3, [sl, #4]
 800142c:	f200 8097 	bhi.w	800155e <_realloc_r+0x156>
 8001430:	2210      	movs	r2, #16
 8001432:	2000      	movs	r0, #0
 8001434:	4614      	mov	r4, r2
 8001436:	4544      	cmp	r4, r8
 8001438:	bf38      	it	cc
 800143a:	f040 0001 	orrcc.w	r0, r0, #1
 800143e:	2800      	cmp	r0, #0
 8001440:	f040 8146 	bne.w	80016d0 <_realloc_r+0x2c8>
 8001444:	f023 0b03 	bic.w	fp, r3, #3
 8001448:	4593      	cmp	fp, r2
 800144a:	bfa4      	itt	ge
 800144c:	f10a 0808 	addge.w	r8, sl, #8
 8001450:	465e      	movge	r6, fp
 8001452:	da6e      	bge.n	8001532 <_realloc_r+0x12a>
 8001454:	f240 19d8 	movw	r9, #472	; 0x1d8
 8001458:	eb0a 010b 	add.w	r1, sl, fp
 800145c:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8001460:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8001464:	458e      	cmp	lr, r1
 8001466:	f000 8138 	beq.w	80016da <_realloc_r+0x2d2>
 800146a:	684e      	ldr	r6, [r1, #4]
 800146c:	f026 0c01 	bic.w	ip, r6, #1
 8001470:	448c      	add	ip, r1
 8001472:	f8dc c004 	ldr.w	ip, [ip, #4]
 8001476:	f01c 0f01 	tst.w	ip, #1
 800147a:	bf18      	it	ne
 800147c:	4601      	movne	r1, r0
 800147e:	d073      	beq.n	8001568 <_realloc_r+0x160>
 8001480:	f013 0f01 	tst.w	r3, #1
 8001484:	f040 8092 	bne.w	80015ac <_realloc_r+0x1a4>
 8001488:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800148c:	ebc3 0c0a 	rsb	ip, r3, sl
 8001490:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001494:	f023 0303 	bic.w	r3, r3, #3
 8001498:	2900      	cmp	r1, #0
 800149a:	f000 80d1 	beq.w	8001640 <_realloc_r+0x238>
 800149e:	4571      	cmp	r1, lr
 80014a0:	f000 814f 	beq.w	8001742 <_realloc_r+0x33a>
 80014a4:	445b      	add	r3, fp
 80014a6:	18c6      	adds	r6, r0, r3
 80014a8:	42b2      	cmp	r2, r6
 80014aa:	f300 80ca 	bgt.w	8001642 <_realloc_r+0x23a>
 80014ae:	68cb      	ldr	r3, [r1, #12]
 80014b0:	46e0      	mov	r8, ip
 80014b2:	6889      	ldr	r1, [r1, #8]
 80014b4:	f1ab 0204 	sub.w	r2, fp, #4
 80014b8:	2a24      	cmp	r2, #36	; 0x24
 80014ba:	60cb      	str	r3, [r1, #12]
 80014bc:	6099      	str	r1, [r3, #8]
 80014be:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80014c2:	f858 1f08 	ldr.w	r1, [r8, #8]!
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	6099      	str	r1, [r3, #8]
 80014ca:	f200 8196 	bhi.w	80017fa <_realloc_r+0x3f2>
 80014ce:	2a13      	cmp	r2, #19
 80014d0:	4641      	mov	r1, r8
 80014d2:	d921      	bls.n	8001518 <_realloc_r+0x110>
 80014d4:	462b      	mov	r3, r5
 80014d6:	f10c 0110 	add.w	r1, ip, #16
 80014da:	f853 0b04 	ldr.w	r0, [r3], #4
 80014de:	f8cc 0008 	str.w	r0, [ip, #8]
 80014e2:	6868      	ldr	r0, [r5, #4]
 80014e4:	1d1d      	adds	r5, r3, #4
 80014e6:	2a1b      	cmp	r2, #27
 80014e8:	f8cc 000c 	str.w	r0, [ip, #12]
 80014ec:	d914      	bls.n	8001518 <_realloc_r+0x110>
 80014ee:	6858      	ldr	r0, [r3, #4]
 80014f0:	1d2b      	adds	r3, r5, #4
 80014f2:	f10c 0118 	add.w	r1, ip, #24
 80014f6:	f8cc 0010 	str.w	r0, [ip, #16]
 80014fa:	6868      	ldr	r0, [r5, #4]
 80014fc:	3508      	adds	r5, #8
 80014fe:	2a24      	cmp	r2, #36	; 0x24
 8001500:	f8cc 0014 	str.w	r0, [ip, #20]
 8001504:	d108      	bne.n	8001518 <_realloc_r+0x110>
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f10c 0120 	add.w	r1, ip, #32
 800150c:	f8cc 3018 	str.w	r3, [ip, #24]
 8001510:	686b      	ldr	r3, [r5, #4]
 8001512:	3508      	adds	r5, #8
 8001514:	f8cc 301c 	str.w	r3, [ip, #28]
 8001518:	462a      	mov	r2, r5
 800151a:	460b      	mov	r3, r1
 800151c:	46e2      	mov	sl, ip
 800151e:	f852 0b04 	ldr.w	r0, [r2], #4
 8001522:	f843 0b04 	str.w	r0, [r3], #4
 8001526:	6868      	ldr	r0, [r5, #4]
 8001528:	6048      	str	r0, [r1, #4]
 800152a:	6852      	ldr	r2, [r2, #4]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001532:	1b30      	subs	r0, r6, r4
 8001534:	280f      	cmp	r0, #15
 8001536:	d824      	bhi.n	8001582 <_realloc_r+0x17a>
 8001538:	eb0a 0206 	add.w	r2, sl, r6
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	ea43 0606 	orr.w	r6, r3, r6
 8001544:	f8ca 6004 	str.w	r6, [sl, #4]
 8001548:	6853      	ldr	r3, [r2, #4]
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6053      	str	r3, [r2, #4]
 8001550:	4638      	mov	r0, r7
 8001552:	f7ff ff57 	bl	8001404 <__malloc_unlock>
 8001556:	4640      	mov	r0, r8
 8001558:	b003      	add	sp, #12
 800155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800155e:	f024 0407 	bic.w	r4, r4, #7
 8001562:	4622      	mov	r2, r4
 8001564:	0fe0      	lsrs	r0, r4, #31
 8001566:	e766      	b.n	8001436 <_realloc_r+0x2e>
 8001568:	f026 0003 	bic.w	r0, r6, #3
 800156c:	eb00 060b 	add.w	r6, r0, fp
 8001570:	42b2      	cmp	r2, r6
 8001572:	dc85      	bgt.n	8001480 <_realloc_r+0x78>
 8001574:	68ca      	ldr	r2, [r1, #12]
 8001576:	f10a 0808 	add.w	r8, sl, #8
 800157a:	6889      	ldr	r1, [r1, #8]
 800157c:	60ca      	str	r2, [r1, #12]
 800157e:	6091      	str	r1, [r2, #8]
 8001580:	e7d7      	b.n	8001532 <_realloc_r+0x12a>
 8001582:	eb0a 0104 	add.w	r1, sl, r4
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	180a      	adds	r2, r1, r0
 800158c:	ea43 0404 	orr.w	r4, r3, r4
 8001590:	f040 0001 	orr.w	r0, r0, #1
 8001594:	f8ca 4004 	str.w	r4, [sl, #4]
 8001598:	6048      	str	r0, [r1, #4]
 800159a:	4638      	mov	r0, r7
 800159c:	6853      	ldr	r3, [r2, #4]
 800159e:	3108      	adds	r1, #8
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
 80015a6:	f7ff f80d 	bl	80005c4 <_free_r>
 80015aa:	e7d1      	b.n	8001550 <_realloc_r+0x148>
 80015ac:	4641      	mov	r1, r8
 80015ae:	4638      	mov	r0, r7
 80015b0:	f7ff fac6 	bl	8000b40 <_malloc_r>
 80015b4:	4680      	mov	r8, r0
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d0ca      	beq.n	8001550 <_realloc_r+0x148>
 80015ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 80015be:	f1a0 0208 	sub.w	r2, r0, #8
 80015c2:	f023 0101 	bic.w	r1, r3, #1
 80015c6:	4451      	add	r1, sl
 80015c8:	428a      	cmp	r2, r1
 80015ca:	f000 810e 	beq.w	80017ea <_realloc_r+0x3e2>
 80015ce:	f1ab 0204 	sub.w	r2, fp, #4
 80015d2:	2a24      	cmp	r2, #36	; 0x24
 80015d4:	f200 80b1 	bhi.w	800173a <_realloc_r+0x332>
 80015d8:	2a13      	cmp	r2, #19
 80015da:	4629      	mov	r1, r5
 80015dc:	4603      	mov	r3, r0
 80015de:	d91d      	bls.n	800161c <_realloc_r+0x214>
 80015e0:	462c      	mov	r4, r5
 80015e2:	f854 3b04 	ldr.w	r3, [r4], #4
 80015e6:	1d21      	adds	r1, r4, #4
 80015e8:	f840 3b04 	str.w	r3, [r0], #4
 80015ec:	1d03      	adds	r3, r0, #4
 80015ee:	686e      	ldr	r6, [r5, #4]
 80015f0:	2a1b      	cmp	r2, #27
 80015f2:	f8c8 6004 	str.w	r6, [r8, #4]
 80015f6:	d911      	bls.n	800161c <_realloc_r+0x214>
 80015f8:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80015fc:	1d0e      	adds	r6, r1, #4
 80015fe:	1d1c      	adds	r4, r3, #4
 8001600:	f8c0 e004 	str.w	lr, [r0, #4]
 8001604:	6848      	ldr	r0, [r1, #4]
 8001606:	3108      	adds	r1, #8
 8001608:	6058      	str	r0, [r3, #4]
 800160a:	3308      	adds	r3, #8
 800160c:	2a24      	cmp	r2, #36	; 0x24
 800160e:	d105      	bne.n	800161c <_realloc_r+0x214>
 8001610:	6872      	ldr	r2, [r6, #4]
 8001612:	6062      	str	r2, [r4, #4]
 8001614:	684a      	ldr	r2, [r1, #4]
 8001616:	3108      	adds	r1, #8
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	3308      	adds	r3, #8
 800161c:	4608      	mov	r0, r1
 800161e:	461a      	mov	r2, r3
 8001620:	f850 4b04 	ldr.w	r4, [r0], #4
 8001624:	f842 4b04 	str.w	r4, [r2], #4
 8001628:	6849      	ldr	r1, [r1, #4]
 800162a:	6059      	str	r1, [r3, #4]
 800162c:	6843      	ldr	r3, [r0, #4]
 800162e:	6053      	str	r3, [r2, #4]
 8001630:	4638      	mov	r0, r7
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe ffc6 	bl	80005c4 <_free_r>
 8001638:	4638      	mov	r0, r7
 800163a:	f7ff fee3 	bl	8001404 <__malloc_unlock>
 800163e:	e78a      	b.n	8001556 <_realloc_r+0x14e>
 8001640:	445b      	add	r3, fp
 8001642:	429a      	cmp	r2, r3
 8001644:	dcb2      	bgt.n	80015ac <_realloc_r+0x1a4>
 8001646:	46e0      	mov	r8, ip
 8001648:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800164c:	f1ab 0204 	sub.w	r2, fp, #4
 8001650:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8001654:	2a24      	cmp	r2, #36	; 0x24
 8001656:	60c1      	str	r1, [r0, #12]
 8001658:	6088      	str	r0, [r1, #8]
 800165a:	d85f      	bhi.n	800171c <_realloc_r+0x314>
 800165c:	2a13      	cmp	r2, #19
 800165e:	4640      	mov	r0, r8
 8001660:	d921      	bls.n	80016a6 <_realloc_r+0x29e>
 8001662:	4629      	mov	r1, r5
 8001664:	f10c 0010 	add.w	r0, ip, #16
 8001668:	f851 6b04 	ldr.w	r6, [r1], #4
 800166c:	f8cc 6008 	str.w	r6, [ip, #8]
 8001670:	686e      	ldr	r6, [r5, #4]
 8001672:	1d0d      	adds	r5, r1, #4
 8001674:	2a1b      	cmp	r2, #27
 8001676:	f8cc 600c 	str.w	r6, [ip, #12]
 800167a:	d914      	bls.n	80016a6 <_realloc_r+0x29e>
 800167c:	684e      	ldr	r6, [r1, #4]
 800167e:	1d29      	adds	r1, r5, #4
 8001680:	f10c 0018 	add.w	r0, ip, #24
 8001684:	f8cc 6010 	str.w	r6, [ip, #16]
 8001688:	686e      	ldr	r6, [r5, #4]
 800168a:	3508      	adds	r5, #8
 800168c:	2a24      	cmp	r2, #36	; 0x24
 800168e:	f8cc 6014 	str.w	r6, [ip, #20]
 8001692:	d108      	bne.n	80016a6 <_realloc_r+0x29e>
 8001694:	684a      	ldr	r2, [r1, #4]
 8001696:	f10c 0020 	add.w	r0, ip, #32
 800169a:	f8cc 2018 	str.w	r2, [ip, #24]
 800169e:	686a      	ldr	r2, [r5, #4]
 80016a0:	3508      	adds	r5, #8
 80016a2:	f8cc 201c 	str.w	r2, [ip, #28]
 80016a6:	4629      	mov	r1, r5
 80016a8:	461e      	mov	r6, r3
 80016aa:	4602      	mov	r2, r0
 80016ac:	46e2      	mov	sl, ip
 80016ae:	f851 3b04 	ldr.w	r3, [r1], #4
 80016b2:	f842 3b04 	str.w	r3, [r2], #4
 80016b6:	686b      	ldr	r3, [r5, #4]
 80016b8:	6043      	str	r3, [r0, #4]
 80016ba:	684b      	ldr	r3, [r1, #4]
 80016bc:	6053      	str	r3, [r2, #4]
 80016be:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80016c2:	e736      	b.n	8001532 <_realloc_r+0x12a>
 80016c4:	4611      	mov	r1, r2
 80016c6:	b003      	add	sp, #12
 80016c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016cc:	f7ff ba38 	b.w	8000b40 <_malloc_r>
 80016d0:	230c      	movs	r3, #12
 80016d2:	f04f 0800 	mov.w	r8, #0
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	e73d      	b.n	8001556 <_realloc_r+0x14e>
 80016da:	f8de 0004 	ldr.w	r0, [lr, #4]
 80016de:	f104 0c10 	add.w	ip, r4, #16
 80016e2:	f020 0003 	bic.w	r0, r0, #3
 80016e6:	eb00 010b 	add.w	r1, r0, fp
 80016ea:	4561      	cmp	r1, ip
 80016ec:	bfb8      	it	lt
 80016ee:	4671      	movlt	r1, lr
 80016f0:	f6ff aec6 	blt.w	8001480 <_realloc_r+0x78>
 80016f4:	eb0a 0304 	add.w	r3, sl, r4
 80016f8:	1b0a      	subs	r2, r1, r4
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	f8c9 3008 	str.w	r3, [r9, #8]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	4638      	mov	r0, r7
 8001706:	f8da 2004 	ldr.w	r2, [sl, #4]
 800170a:	46a8      	mov	r8, r5
 800170c:	f002 0301 	and.w	r3, r2, #1
 8001710:	431c      	orrs	r4, r3
 8001712:	f8ca 4004 	str.w	r4, [sl, #4]
 8001716:	f7ff fe75 	bl	8001404 <__malloc_unlock>
 800171a:	e71c      	b.n	8001556 <_realloc_r+0x14e>
 800171c:	4640      	mov	r0, r8
 800171e:	4629      	mov	r1, r5
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	f8cd c000 	str.w	ip, [sp]
 8001726:	f7ff fdb7 	bl	8001298 <memmove>
 800172a:	f8dd c000 	ldr.w	ip, [sp]
 800172e:	9b01      	ldr	r3, [sp, #4]
 8001730:	46e2      	mov	sl, ip
 8001732:	461e      	mov	r6, r3
 8001734:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001738:	e6fb      	b.n	8001532 <_realloc_r+0x12a>
 800173a:	4629      	mov	r1, r5
 800173c:	f7ff fdac 	bl	8001298 <memmove>
 8001740:	e776      	b.n	8001630 <_realloc_r+0x228>
 8001742:	445b      	add	r3, fp
 8001744:	f104 0110 	add.w	r1, r4, #16
 8001748:	18c6      	adds	r6, r0, r3
 800174a:	428e      	cmp	r6, r1
 800174c:	f6ff af79 	blt.w	8001642 <_realloc_r+0x23a>
 8001750:	46e0      	mov	r8, ip
 8001752:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001756:	f1ab 0204 	sub.w	r2, fp, #4
 800175a:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800175e:	2a24      	cmp	r2, #36	; 0x24
 8001760:	60cb      	str	r3, [r1, #12]
 8001762:	6099      	str	r1, [r3, #8]
 8001764:	d855      	bhi.n	8001812 <_realloc_r+0x40a>
 8001766:	2a13      	cmp	r2, #19
 8001768:	4641      	mov	r1, r8
 800176a:	d921      	bls.n	80017b0 <_realloc_r+0x3a8>
 800176c:	462b      	mov	r3, r5
 800176e:	f10c 0110 	add.w	r1, ip, #16
 8001772:	f853 0b04 	ldr.w	r0, [r3], #4
 8001776:	f8cc 0008 	str.w	r0, [ip, #8]
 800177a:	6868      	ldr	r0, [r5, #4]
 800177c:	1d1d      	adds	r5, r3, #4
 800177e:	2a1b      	cmp	r2, #27
 8001780:	f8cc 000c 	str.w	r0, [ip, #12]
 8001784:	d914      	bls.n	80017b0 <_realloc_r+0x3a8>
 8001786:	6858      	ldr	r0, [r3, #4]
 8001788:	1d2b      	adds	r3, r5, #4
 800178a:	f10c 0118 	add.w	r1, ip, #24
 800178e:	f8cc 0010 	str.w	r0, [ip, #16]
 8001792:	6868      	ldr	r0, [r5, #4]
 8001794:	3508      	adds	r5, #8
 8001796:	2a24      	cmp	r2, #36	; 0x24
 8001798:	f8cc 0014 	str.w	r0, [ip, #20]
 800179c:	d108      	bne.n	80017b0 <_realloc_r+0x3a8>
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f10c 0120 	add.w	r1, ip, #32
 80017a4:	f8cc 3018 	str.w	r3, [ip, #24]
 80017a8:	686b      	ldr	r3, [r5, #4]
 80017aa:	3508      	adds	r5, #8
 80017ac:	f8cc 301c 	str.w	r3, [ip, #28]
 80017b0:	462a      	mov	r2, r5
 80017b2:	460b      	mov	r3, r1
 80017b4:	f852 0b04 	ldr.w	r0, [r2], #4
 80017b8:	f843 0b04 	str.w	r0, [r3], #4
 80017bc:	6868      	ldr	r0, [r5, #4]
 80017be:	6048      	str	r0, [r1, #4]
 80017c0:	6852      	ldr	r2, [r2, #4]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	eb0c 0304 	add.w	r3, ip, r4
 80017c8:	1b32      	subs	r2, r6, r4
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	f8c9 3008 	str.w	r3, [r9, #8]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	4638      	mov	r0, r7
 80017d6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80017da:	f002 0301 	and.w	r3, r2, #1
 80017de:	431c      	orrs	r4, r3
 80017e0:	f8cc 4004 	str.w	r4, [ip, #4]
 80017e4:	f7ff fe0e 	bl	8001404 <__malloc_unlock>
 80017e8:	e6b5      	b.n	8001556 <_realloc_r+0x14e>
 80017ea:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80017ee:	f10a 0808 	add.w	r8, sl, #8
 80017f2:	f026 0603 	bic.w	r6, r6, #3
 80017f6:	445e      	add	r6, fp
 80017f8:	e69b      	b.n	8001532 <_realloc_r+0x12a>
 80017fa:	4640      	mov	r0, r8
 80017fc:	4629      	mov	r1, r5
 80017fe:	f8cd c000 	str.w	ip, [sp]
 8001802:	f7ff fd49 	bl	8001298 <memmove>
 8001806:	f8dd c000 	ldr.w	ip, [sp]
 800180a:	46e2      	mov	sl, ip
 800180c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001810:	e68f      	b.n	8001532 <_realloc_r+0x12a>
 8001812:	4640      	mov	r0, r8
 8001814:	4629      	mov	r1, r5
 8001816:	f8cd c000 	str.w	ip, [sp]
 800181a:	f7ff fd3d 	bl	8001298 <memmove>
 800181e:	f8dd c000 	ldr.w	ip, [sp]
 8001822:	e7cf      	b.n	80017c4 <_realloc_r+0x3bc>

08001824 <_sbrk_r>:
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	f640 64dc 	movw	r4, #3804	; 0xedc
 800182a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800182e:	4605      	mov	r5, r0
 8001830:	4608      	mov	r0, r1
 8001832:	2300      	movs	r3, #0
 8001834:	6023      	str	r3, [r4, #0]
 8001836:	f000 fdd7 	bl	80023e8 <_sbrk>
 800183a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800183e:	d000      	beq.n	8001842 <_sbrk_r+0x1e>
 8001840:	bd38      	pop	{r3, r4, r5, pc}
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0fb      	beq.n	8001840 <_sbrk_r+0x1c>
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	bd38      	pop	{r3, r4, r5, pc}

0800184c <__sread>:
 800184c:	b510      	push	{r4, lr}
 800184e:	460c      	mov	r4, r1
 8001850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001854:	f000 fad4 	bl	8001e00 <_read_r>
 8001858:	2800      	cmp	r0, #0
 800185a:	bfab      	itete	ge
 800185c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800185e:	89a3      	ldrhlt	r3, [r4, #12]
 8001860:	181b      	addge	r3, r3, r0
 8001862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001866:	bfac      	ite	ge
 8001868:	6563      	strge	r3, [r4, #84]	; 0x54
 800186a:	81a3      	strhlt	r3, [r4, #12]
 800186c:	bd10      	pop	{r4, pc}
 800186e:	bf00      	nop

08001870 <__seofread>:
 8001870:	2000      	movs	r0, #0
 8001872:	4770      	bx	lr

08001874 <__swrite>:
 8001874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001878:	461d      	mov	r5, r3
 800187a:	898b      	ldrh	r3, [r1, #12]
 800187c:	460c      	mov	r4, r1
 800187e:	4607      	mov	r7, r0
 8001880:	4616      	mov	r6, r2
 8001882:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001886:	d006      	beq.n	8001896 <__swrite+0x22>
 8001888:	2302      	movs	r3, #2
 800188a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800188e:	2200      	movs	r2, #0
 8001890:	f000 fa2a 	bl	8001ce8 <_lseek_r>
 8001894:	89a3      	ldrh	r3, [r4, #12]
 8001896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800189a:	4638      	mov	r0, r7
 800189c:	81a3      	strh	r3, [r4, #12]
 800189e:	4632      	mov	r2, r6
 80018a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018a4:	462b      	mov	r3, r5
 80018a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018aa:	f000 b819 	b.w	80018e0 <_write_r>
 80018ae:	bf00      	nop

080018b0 <__sseek>:
 80018b0:	b510      	push	{r4, lr}
 80018b2:	460c      	mov	r4, r1
 80018b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b8:	f000 fa16 	bl	8001ce8 <_lseek_r>
 80018bc:	89a3      	ldrh	r3, [r4, #12]
 80018be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018c2:	bf15      	itete	ne
 80018c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80018c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80018ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80018ce:	81a3      	strheq	r3, [r4, #12]
 80018d0:	bf18      	it	ne
 80018d2:	81a3      	strhne	r3, [r4, #12]
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	bf00      	nop

080018d8 <__sclose>:
 80018d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018dc:	f000 b898 	b.w	8001a10 <_close_r>

080018e0 <_write_r>:
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	f640 64dc 	movw	r4, #3804	; 0xedc
 80018e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80018ea:	4605      	mov	r5, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	2300      	movs	r3, #0
 80018f4:	6023      	str	r3, [r4, #0]
 80018f6:	f000 fdf5 	bl	80024e4 <_write>
 80018fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018fe:	d000      	beq.n	8001902 <_write_r+0x22>
 8001900:	bd38      	pop	{r3, r4, r5, pc}
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0fb      	beq.n	8001900 <_write_r+0x20>
 8001908:	602b      	str	r3, [r5, #0]
 800190a:	bd38      	pop	{r3, r4, r5, pc}

0800190c <__swsetup_r>:
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	f240 05e4 	movw	r5, #228	; 0xe4
 8001912:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001916:	4606      	mov	r6, r0
 8001918:	460c      	mov	r4, r1
 800191a:	6828      	ldr	r0, [r5, #0]
 800191c:	b110      	cbz	r0, 8001924 <__swsetup_r+0x18>
 800191e:	6983      	ldr	r3, [r0, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d036      	beq.n	8001992 <__swsetup_r+0x86>
 8001924:	f644 439c 	movw	r3, #19612	; 0x4c9c
 8001928:	f6c0 0300 	movt	r3, #2048	; 0x800
 800192c:	429c      	cmp	r4, r3
 800192e:	d038      	beq.n	80019a2 <__swsetup_r+0x96>
 8001930:	f644 43bc 	movw	r3, #19644	; 0x4cbc
 8001934:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001938:	429c      	cmp	r4, r3
 800193a:	d041      	beq.n	80019c0 <__swsetup_r+0xb4>
 800193c:	f644 43dc 	movw	r3, #19676	; 0x4cdc
 8001940:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001944:	429c      	cmp	r4, r3
 8001946:	bf04      	itt	eq
 8001948:	682b      	ldreq	r3, [r5, #0]
 800194a:	68dc      	ldreq	r4, [r3, #12]
 800194c:	89a2      	ldrh	r2, [r4, #12]
 800194e:	4610      	mov	r0, r2
 8001950:	b293      	uxth	r3, r2
 8001952:	f013 0f08 	tst.w	r3, #8
 8001956:	bf18      	it	ne
 8001958:	6921      	ldrne	r1, [r4, #16]
 800195a:	d034      	beq.n	80019c6 <__swsetup_r+0xba>
 800195c:	b321      	cbz	r1, 80019a8 <__swsetup_r+0x9c>
 800195e:	f013 0201 	ands.w	r2, r3, #1
 8001962:	d007      	beq.n	8001974 <__swsetup_r+0x68>
 8001964:	6963      	ldr	r3, [r4, #20]
 8001966:	2200      	movs	r2, #0
 8001968:	60a2      	str	r2, [r4, #8]
 800196a:	425b      	negs	r3, r3
 800196c:	61a3      	str	r3, [r4, #24]
 800196e:	b141      	cbz	r1, 8001982 <__swsetup_r+0x76>
 8001970:	2000      	movs	r0, #0
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	f013 0f02 	tst.w	r3, #2
 8001978:	bf08      	it	eq
 800197a:	6962      	ldreq	r2, [r4, #20]
 800197c:	60a2      	str	r2, [r4, #8]
 800197e:	2900      	cmp	r1, #0
 8001980:	d1f6      	bne.n	8001970 <__swsetup_r+0x64>
 8001982:	89a3      	ldrh	r3, [r4, #12]
 8001984:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001988:	bf14      	ite	ne
 800198a:	f04f 30ff 	movne.w	r0, #4294967295
 800198e:	2000      	moveq	r0, #0
 8001990:	bd70      	pop	{r4, r5, r6, pc}
 8001992:	f7fe fcdb 	bl	800034c <__sinit>
 8001996:	f644 439c 	movw	r3, #19612	; 0x4c9c
 800199a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800199e:	429c      	cmp	r4, r3
 80019a0:	d1c6      	bne.n	8001930 <__swsetup_r+0x24>
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	685c      	ldr	r4, [r3, #4]
 80019a6:	e7d1      	b.n	800194c <__swsetup_r+0x40>
 80019a8:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80019ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80019b0:	d0d5      	beq.n	800195e <__swsetup_r+0x52>
 80019b2:	4621      	mov	r1, r4
 80019b4:	4630      	mov	r0, r6
 80019b6:	f000 f9ad 	bl	8001d14 <__smakebuf_r>
 80019ba:	89a3      	ldrh	r3, [r4, #12]
 80019bc:	6921      	ldr	r1, [r4, #16]
 80019be:	e7ce      	b.n	800195e <__swsetup_r+0x52>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	689c      	ldr	r4, [r3, #8]
 80019c4:	e7c2      	b.n	800194c <__swsetup_r+0x40>
 80019c6:	f013 0f10 	tst.w	r3, #16
 80019ca:	d01d      	beq.n	8001a08 <__swsetup_r+0xfc>
 80019cc:	f013 0f04 	tst.w	r3, #4
 80019d0:	bf08      	it	eq
 80019d2:	6921      	ldreq	r1, [r4, #16]
 80019d4:	d013      	beq.n	80019fe <__swsetup_r+0xf2>
 80019d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019d8:	b149      	cbz	r1, 80019ee <__swsetup_r+0xe2>
 80019da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019de:	4299      	cmp	r1, r3
 80019e0:	d003      	beq.n	80019ea <__swsetup_r+0xde>
 80019e2:	4630      	mov	r0, r6
 80019e4:	f7fe fdee 	bl	80005c4 <_free_r>
 80019e8:	89a0      	ldrh	r0, [r4, #12]
 80019ea:	2300      	movs	r3, #0
 80019ec:	6363      	str	r3, [r4, #52]	; 0x34
 80019ee:	f64f 72db 	movw	r2, #65499	; 0xffdb
 80019f2:	6921      	ldr	r1, [r4, #16]
 80019f4:	ea00 0202 	and.w	r2, r0, r2
 80019f8:	2300      	movs	r3, #0
 80019fa:	6063      	str	r3, [r4, #4]
 80019fc:	6021      	str	r1, [r4, #0]
 80019fe:	f042 0308 	orr.w	r3, r2, #8
 8001a02:	81a3      	strh	r3, [r4, #12]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	e7a9      	b.n	800195c <__swsetup_r+0x50>
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
 8001a0e:	bf00      	nop

08001a10 <_close_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	f640 64dc 	movw	r4, #3804	; 0xedc
 8001a16:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001a1a:	4605      	mov	r5, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	f000 fc9b 	bl	800235c <_close>
 8001a26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a2a:	d000      	beq.n	8001a2e <_close_r+0x1e>
 8001a2c:	bd38      	pop	{r3, r4, r5, pc}
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0fb      	beq.n	8001a2c <_close_r+0x1c>
 8001a34:	602b      	str	r3, [r5, #0]
 8001a36:	bd38      	pop	{r3, r4, r5, pc}

08001a38 <_fclose_r>:
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	4605      	mov	r5, r0
 8001a3e:	460e      	mov	r6, r1
 8001a40:	2900      	cmp	r1, #0
 8001a42:	d048      	beq.n	8001ad6 <_fclose_r+0x9e>
 8001a44:	f7fe fd4a 	bl	80004dc <__sfp_lock_acquire>
 8001a48:	b115      	cbz	r5, 8001a50 <_fclose_r+0x18>
 8001a4a:	69ab      	ldr	r3, [r5, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d044      	beq.n	8001ada <_fclose_r+0xa2>
 8001a50:	f644 439c 	movw	r3, #19612	; 0x4c9c
 8001a54:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a58:	429c      	cmp	r4, r3
 8001a5a:	bf08      	it	eq
 8001a5c:	686c      	ldreq	r4, [r5, #4]
 8001a5e:	d00e      	beq.n	8001a7e <_fclose_r+0x46>
 8001a60:	f644 43bc 	movw	r3, #19644	; 0x4cbc
 8001a64:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a68:	429c      	cmp	r4, r3
 8001a6a:	bf08      	it	eq
 8001a6c:	68ac      	ldreq	r4, [r5, #8]
 8001a6e:	d006      	beq.n	8001a7e <_fclose_r+0x46>
 8001a70:	f644 43dc 	movw	r3, #19676	; 0x4cdc
 8001a74:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001a78:	429c      	cmp	r4, r3
 8001a7a:	bf08      	it	eq
 8001a7c:	68ec      	ldreq	r4, [r5, #12]
 8001a7e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8001a82:	b336      	cbz	r6, 8001ad2 <_fclose_r+0x9a>
 8001a84:	4628      	mov	r0, r5
 8001a86:	4621      	mov	r1, r4
 8001a88:	f000 f838 	bl	8001afc <_fflush_r>
 8001a8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a8e:	4606      	mov	r6, r0
 8001a90:	b13b      	cbz	r3, 8001aa2 <_fclose_r+0x6a>
 8001a92:	4628      	mov	r0, r5
 8001a94:	6a21      	ldr	r1, [r4, #32]
 8001a96:	4798      	blx	r3
 8001a98:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 8001a9c:	bf28      	it	cs
 8001a9e:	f04f 36ff 	movcs.w	r6, #4294967295
 8001aa2:	89a3      	ldrh	r3, [r4, #12]
 8001aa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001aa8:	d11b      	bne.n	8001ae2 <_fclose_r+0xaa>
 8001aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001aac:	b141      	cbz	r1, 8001ac0 <_fclose_r+0x88>
 8001aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ab2:	4299      	cmp	r1, r3
 8001ab4:	d002      	beq.n	8001abc <_fclose_r+0x84>
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f7fe fd84 	bl	80005c4 <_free_r>
 8001abc:	2300      	movs	r3, #0
 8001abe:	6363      	str	r3, [r4, #52]	; 0x34
 8001ac0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001ac2:	b121      	cbz	r1, 8001ace <_fclose_r+0x96>
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	f7fe fd7d 	bl	80005c4 <_free_r>
 8001aca:	2300      	movs	r3, #0
 8001acc:	64a3      	str	r3, [r4, #72]	; 0x48
 8001ace:	2300      	movs	r3, #0
 8001ad0:	81a3      	strh	r3, [r4, #12]
 8001ad2:	f7fe fd05 	bl	80004e0 <__sfp_lock_release>
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	4628      	mov	r0, r5
 8001adc:	f7fe fc36 	bl	800034c <__sinit>
 8001ae0:	e7b6      	b.n	8001a50 <_fclose_r+0x18>
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	6921      	ldr	r1, [r4, #16]
 8001ae6:	f7fe fd6d 	bl	80005c4 <_free_r>
 8001aea:	e7de      	b.n	8001aaa <_fclose_r+0x72>

08001aec <fclose>:
 8001aec:	f240 03e4 	movw	r3, #228	; 0xe4
 8001af0:	4601      	mov	r1, r0
 8001af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	e79e      	b.n	8001a38 <_fclose_r>
 8001afa:	bf00      	nop

08001afc <_fflush_r>:
 8001afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b00:	460c      	mov	r4, r1
 8001b02:	690e      	ldr	r6, [r1, #16]
 8001b04:	4680      	mov	r8, r0
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	d04a      	beq.n	8001ba0 <_fflush_r+0xa4>
 8001b0a:	b118      	cbz	r0, 8001b14 <_fflush_r+0x18>
 8001b0c:	6983      	ldr	r3, [r0, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 808e 	beq.w	8001c30 <_fflush_r+0x134>
 8001b14:	f644 439c 	movw	r3, #19612	; 0x4c9c
 8001b18:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf08      	it	eq
 8001b20:	f8d8 4004 	ldreq.w	r4, [r8, #4]
 8001b24:	d010      	beq.n	8001b48 <_fflush_r+0x4c>
 8001b26:	f644 43bc 	movw	r3, #19644	; 0x4cbc
 8001b2a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	bf08      	it	eq
 8001b32:	f8d8 4008 	ldreq.w	r4, [r8, #8]
 8001b36:	d007      	beq.n	8001b48 <_fflush_r+0x4c>
 8001b38:	f644 43dc 	movw	r3, #19676	; 0x4cdc
 8001b3c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001b40:	429c      	cmp	r4, r3
 8001b42:	bf08      	it	eq
 8001b44:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 8001b48:	89a6      	ldrh	r6, [r4, #12]
 8001b4a:	2e00      	cmp	r6, #0
 8001b4c:	d028      	beq.n	8001ba0 <_fflush_r+0xa4>
 8001b4e:	b233      	sxth	r3, r6
 8001b50:	f013 0008 	ands.w	r0, r3, #8
 8001b54:	d027      	beq.n	8001ba6 <_fflush_r+0xaa>
 8001b56:	6926      	ldr	r6, [r4, #16]
 8001b58:	b316      	cbz	r6, 8001ba0 <_fflush_r+0xa4>
 8001b5a:	f013 0f03 	tst.w	r3, #3
 8001b5e:	6825      	ldr	r5, [r4, #0]
 8001b60:	6026      	str	r6, [r4, #0]
 8001b62:	bf08      	it	eq
 8001b64:	6963      	ldreq	r3, [r4, #20]
 8001b66:	ebc6 0505 	rsb	r5, r6, r5
 8001b6a:	bf18      	it	ne
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	60a3      	str	r3, [r4, #8]
 8001b72:	dc02      	bgt.n	8001b7a <_fflush_r+0x7e>
 8001b74:	e09a      	b.n	8001cac <_fflush_r+0x1b0>
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	dd74      	ble.n	8001c64 <_fflush_r+0x168>
 8001b7a:	4632      	mov	r2, r6
 8001b7c:	462b      	mov	r3, r5
 8001b7e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001b80:	4640      	mov	r0, r8
 8001b82:	6a21      	ldr	r1, [r4, #32]
 8001b84:	47b8      	blx	r7
 8001b86:	2800      	cmp	r0, #0
 8001b88:	ebc0 0505 	rsb	r5, r0, r5
 8001b8c:	4406      	add	r6, r0
 8001b8e:	dcf2      	bgt.n	8001b76 <_fflush_r+0x7a>
 8001b90:	89a3      	ldrh	r3, [r4, #12]
 8001b92:	f04f 30ff 	mov.w	r0, #4294967295
 8001b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9a:	81a3      	strh	r3, [r4, #12]
 8001b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ba6:	6862      	ldr	r2, [r4, #4]
 8001ba8:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
 8001bac:	81a3      	strh	r3, [r4, #12]
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	dd5b      	ble.n	8001c6a <_fflush_r+0x16e>
 8001bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bb4:	2e00      	cmp	r6, #0
 8001bb6:	d0f3      	beq.n	8001ba0 <_fflush_r+0xa4>
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
 8001bc0:	f8d8 5000 	ldr.w	r5, [r8]
 8001bc4:	f8c8 2000 	str.w	r2, [r8]
 8001bc8:	bf18      	it	ne
 8001bca:	6d62      	ldrne	r2, [r4, #84]	; 0x54
 8001bcc:	d033      	beq.n	8001c36 <_fflush_r+0x13a>
 8001bce:	f013 0f04 	tst.w	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <_fflush_r+0xe4>
 8001bd4:	6861      	ldr	r1, [r4, #4]
 8001bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bd8:	1a52      	subs	r2, r2, r1
 8001bda:	b10b      	cbz	r3, 8001be0 <_fflush_r+0xe4>
 8001bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bde:	1ad2      	subs	r2, r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	4640      	mov	r0, r8
 8001be4:	6a21      	ldr	r1, [r4, #32]
 8001be6:	47b0      	blx	r6
 8001be8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001bec:	d02f      	beq.n	8001c4e <_fflush_r+0x152>
 8001bee:	89a3      	ldrh	r3, [r4, #12]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6922      	ldr	r2, [r4, #16]
 8001bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bf8:	6061      	str	r1, [r4, #4]
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	6022      	str	r2, [r4, #0]
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	81a3      	strh	r3, [r4, #12]
 8001c02:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001c06:	d003      	beq.n	8001c10 <_fflush_r+0x114>
 8001c08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001c0c:	d031      	beq.n	8001c72 <_fflush_r+0x176>
 8001c0e:	6560      	str	r0, [r4, #84]	; 0x54
 8001c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c12:	f8c8 5000 	str.w	r5, [r8]
 8001c16:	2900      	cmp	r1, #0
 8001c18:	d031      	beq.n	8001c7e <_fflush_r+0x182>
 8001c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c1e:	4299      	cmp	r1, r3
 8001c20:	d002      	beq.n	8001c28 <_fflush_r+0x12c>
 8001c22:	4640      	mov	r0, r8
 8001c24:	f7fe fcce 	bl	80005c4 <_free_r>
 8001c28:	2000      	movs	r0, #0
 8001c2a:	6360      	str	r0, [r4, #52]	; 0x34
 8001c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c30:	f7fe fb8c 	bl	800034c <__sinit>
 8001c34:	e76e      	b.n	8001b14 <_fflush_r+0x18>
 8001c36:	463a      	mov	r2, r7
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	6a21      	ldr	r1, [r4, #32]
 8001c3e:	47b0      	blx	r6
 8001c40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001c44:	4602      	mov	r2, r0
 8001c46:	d01d      	beq.n	8001c84 <_fflush_r+0x188>
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c4c:	e7bf      	b.n	8001bce <_fflush_r+0xd2>
 8001c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8001c52:	2b1d      	cmp	r3, #29
 8001c54:	d89c      	bhi.n	8001b90 <_fflush_r+0x94>
 8001c56:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001c5a:	f2c8 0200 	movt	r2, #32768	; 0x8000
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	d4c5      	bmi.n	8001bee <_fflush_r+0xf2>
 8001c62:	e795      	b.n	8001b90 <_fflush_r+0x94>
 8001c64:	2000      	movs	r0, #0
 8001c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	dca0      	bgt.n	8001bb2 <_fflush_r+0xb6>
 8001c70:	e7f9      	b.n	8001c66 <_fflush_r+0x16a>
 8001c72:	f8d8 3000 	ldr.w	r3, [r8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ca      	bne.n	8001c10 <_fflush_r+0x114>
 8001c7a:	6560      	str	r0, [r4, #84]	; 0x54
 8001c7c:	e7c8      	b.n	8001c10 <_fflush_r+0x114>
 8001c7e:	4608      	mov	r0, r1
 8001c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c84:	f8d8 3000 	ldr.w	r3, [r8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0dd      	beq.n	8001c48 <_fflush_r+0x14c>
 8001c8c:	f1a3 021d 	sub.w	r2, r3, #29
 8001c90:	4251      	negs	r1, r2
 8001c92:	eb41 0102 	adc.w	r1, r1, r2
 8001c96:	2b16      	cmp	r3, #22
 8001c98:	bf14      	ite	ne
 8001c9a:	460b      	movne	r3, r1
 8001c9c:	f041 0301 	orreq.w	r3, r1, #1
 8001ca0:	b13b      	cbz	r3, 8001cb2 <_fflush_r+0x1b6>
 8001ca2:	f8c8 5000 	str.w	r5, [r8]
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cac:	2000      	movs	r0, #0
 8001cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	81a3      	strh	r3, [r4, #12]
 8001cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cbe:	bf00      	nop

08001cc0 <fflush>:
 8001cc0:	b130      	cbz	r0, 8001cd0 <fflush+0x10>
 8001cc2:	f240 03e4 	movw	r3, #228	; 0xe4
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	e715      	b.n	8001afc <_fflush_r>
 8001cd0:	f644 43fc 	movw	r3, #19708	; 0x4cfc
 8001cd4:	f641 21fd 	movw	r1, #6909	; 0x1afd
 8001cd8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001cdc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	f7fe bf01 	b.w	8000ae8 <_fwalk_reent>
 8001ce6:	bf00      	nop

08001ce8 <_lseek_r>:
 8001ce8:	b538      	push	{r3, r4, r5, lr}
 8001cea:	f640 64dc 	movw	r4, #3804	; 0xedc
 8001cee:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001cf2:	4605      	mov	r5, r0
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6023      	str	r3, [r4, #0]
 8001cfe:	f000 fb65 	bl	80023cc <_lseek>
 8001d02:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d06:	d000      	beq.n	8001d0a <_lseek_r+0x22>
 8001d08:	bd38      	pop	{r3, r4, r5, pc}
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0fb      	beq.n	8001d08 <_lseek_r+0x20>
 8001d10:	602b      	str	r3, [r5, #0]
 8001d12:	bd38      	pop	{r3, r4, r5, pc}

08001d14 <__smakebuf_r>:
 8001d14:	898b      	ldrh	r3, [r1, #12]
 8001d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d18:	460c      	mov	r4, r1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	b091      	sub	sp, #68	; 0x44
 8001d1e:	f012 0f02 	tst.w	r2, #2
 8001d22:	4605      	mov	r5, r0
 8001d24:	d13b      	bne.n	8001d9e <__smakebuf_r+0x8a>
 8001d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	db18      	blt.n	8001d60 <__smakebuf_r+0x4c>
 8001d2e:	aa01      	add	r2, sp, #4
 8001d30:	f000 f87c 	bl	8001e2c <_fstat_r>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	db11      	blt.n	8001d5c <__smakebuf_r+0x48>
 8001d38:	9b02      	ldr	r3, [sp, #8]
 8001d3a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001d3e:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 8001d42:	4257      	negs	r7, r2
 8001d44:	eb47 0702 	adc.w	r7, r7, r2
 8001d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4c:	d03a      	beq.n	8001dc4 <__smakebuf_r+0xb0>
 8001d4e:	89a3      	ldrh	r3, [r4, #12]
 8001d50:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8001d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d58:	81a3      	strh	r3, [r4, #12]
 8001d5a:	e00b      	b.n	8001d74 <__smakebuf_r+0x60>
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d68:	bf14      	ite	ne
 8001d6a:	2640      	movne	r6, #64	; 0x40
 8001d6c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8001d70:	2700      	movs	r7, #0
 8001d72:	81a3      	strh	r3, [r4, #12]
 8001d74:	4628      	mov	r0, r5
 8001d76:	4631      	mov	r1, r6
 8001d78:	f7fe fee2 	bl	8000b40 <_malloc_r>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d031      	beq.n	8001de4 <__smakebuf_r+0xd0>
 8001d80:	89a2      	ldrh	r2, [r4, #12]
 8001d82:	f240 3305 	movw	r3, #773	; 0x305
 8001d86:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d8a:	62ab      	str	r3, [r5, #40]	; 0x28
 8001d8c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
 8001d90:	6020      	str	r0, [r4, #0]
 8001d92:	81a3      	strh	r3, [r4, #12]
 8001d94:	6120      	str	r0, [r4, #16]
 8001d96:	6166      	str	r6, [r4, #20]
 8001d98:	b947      	cbnz	r7, 8001dac <__smakebuf_r+0x98>
 8001d9a:	b011      	add	sp, #68	; 0x44
 8001d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9e:	f101 0347 	add.w	r3, r1, #71	; 0x47
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	610b      	str	r3, [r1, #16]
 8001da6:	2301      	movs	r3, #1
 8001da8:	614b      	str	r3, [r1, #20]
 8001daa:	e7f6      	b.n	8001d9a <__smakebuf_r+0x86>
 8001dac:	4628      	mov	r0, r5
 8001dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001db2:	f000 f851 	bl	8001e58 <_isatty_r>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d0ef      	beq.n	8001d9a <__smakebuf_r+0x86>
 8001dba:	89a3      	ldrh	r3, [r4, #12]
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	81a3      	strh	r3, [r4, #12]
 8001dc2:	e7ea      	b.n	8001d9a <__smakebuf_r+0x86>
 8001dc4:	f641 03b1 	movw	r3, #6321	; 0x18b1
 8001dc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dca:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d1bd      	bne.n	8001d4e <__smakebuf_r+0x3a>
 8001dd2:	89a2      	ldrh	r2, [r4, #12]
 8001dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd8:	461e      	mov	r6, r3
 8001dda:	6523      	str	r3, [r4, #80]	; 0x50
 8001ddc:	ea42 0303 	orr.w	r3, r2, r3
 8001de0:	81a3      	strh	r3, [r4, #12]
 8001de2:	e7c7      	b.n	8001d74 <__smakebuf_r+0x60>
 8001de4:	89a3      	ldrh	r3, [r4, #12]
 8001de6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001dea:	d1d6      	bne.n	8001d9a <__smakebuf_r+0x86>
 8001dec:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6022      	str	r2, [r4, #0]
 8001df6:	81a3      	strh	r3, [r4, #12]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6122      	str	r2, [r4, #16]
 8001dfc:	6163      	str	r3, [r4, #20]
 8001dfe:	e7cc      	b.n	8001d9a <__smakebuf_r+0x86>

08001e00 <_read_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	f640 64dc 	movw	r4, #3804	; 0xedc
 8001e06:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	2300      	movs	r3, #0
 8001e14:	6023      	str	r3, [r4, #0]
 8001e16:	f000 fb23 	bl	8002460 <_read>
 8001e1a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e1e:	d000      	beq.n	8001e22 <_read_r+0x22>
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0fb      	beq.n	8001e20 <_read_r+0x20>
 8001e28:	602b      	str	r3, [r5, #0]
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}

08001e2c <_fstat_r>:
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	f640 64dc 	movw	r4, #3804	; 0xedc
 8001e32:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001e36:	4605      	mov	r5, r0
 8001e38:	4608      	mov	r0, r1
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6023      	str	r3, [r4, #0]
 8001e40:	f000 fa98 	bl	8002374 <_fstat>
 8001e44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e48:	d000      	beq.n	8001e4c <_fstat_r+0x20>
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0fb      	beq.n	8001e4a <_fstat_r+0x1e>
 8001e52:	602b      	str	r3, [r5, #0]
 8001e54:	bd38      	pop	{r3, r4, r5, pc}
 8001e56:	bf00      	nop

08001e58 <_isatty_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	f640 64dc 	movw	r4, #3804	; 0xedc
 8001e5e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001e62:	4605      	mov	r5, r0
 8001e64:	4608      	mov	r0, r1
 8001e66:	2300      	movs	r3, #0
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	f000 fa95 	bl	8002398 <_isatty>
 8001e6e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e72:	d000      	beq.n	8001e76 <_isatty_r+0x1e>
 8001e74:	bd38      	pop	{r3, r4, r5, pc}
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0fb      	beq.n	8001e74 <_isatty_r+0x1c>
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	bd38      	pop	{r3, r4, r5, pc}

08001e80 <Set_System>:
* Description    : Configures Main system clocks & power
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_System(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
       system_stm32f10x.c file
     */   
  
  
  /* Enable USB_DISCONNECT GPIO clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIO_DISCONNECT, ENABLE);
 8001e86:	f04f 0080 	mov.w	r0, #128	; 0x80
 8001e8a:	f04f 0101 	mov.w	r1, #1
 8001e8e:	f002 fd33 	bl	80048f8 <RCC_APB2PeriphClockCmd>

  /* Configure USB pull-up pin */
  GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
 8001e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e96:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e98:	f04f 0303 	mov.w	r3, #3
 8001e9c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8001e9e:	f04f 0314 	mov.w	r3, #20
 8001ea2:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(USB_DISCONNECT, &GPIO_InitStructure);
 8001ea4:	f107 0304 	add.w	r3, r7, #4
 8001ea8:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <Set_System+0x64>)
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f002 fc1a 	bl	80046e4 <GPIO_Init>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8001eb0:	f04f 0080 	mov.w	r0, #128	; 0x80
 8001eb4:	f04f 0101 	mov.w	r1, #1
 8001eb8:	f002 fd1e 	bl	80048f8 <RCC_APB2PeriphClockCmd>

  /* Configure LEDS */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 8001ebc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ec0:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ec2:	f04f 0303 	mov.w	r3, #3
 8001ec6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001ec8:	f04f 0310 	mov.w	r3, #16
 8001ecc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001ece:	f107 0304 	add.w	r3, r7, #4
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <Set_System+0x64>)
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f002 fc05 	bl	80046e4 <GPIO_Init>
}
 8001eda:	f107 0708 	add.w	r7, r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40011c00 	.word	0x40011c00

08001ee8 <Set_USBClock>:
* Description    : Configures USB Clock input (48MHz)
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_USBClock(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Select USBCLK source */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8001eec:	f04f 0000 	mov.w	r0, #0
 8001ef0:	f002 fcf4 	bl	80048dc <RCC_USBCLKConfig>
  
  /* Enable the USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8001ef4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001ef8:	f04f 0101 	mov.w	r1, #1
 8001efc:	f002 fd1e 	bl	800493c <RCC_APB1PeriphClockCmd>
}
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop

08001f04 <USB_Interrupts_Config>:
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8001f0a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001f0e:	f002 fb6b 	bl	80045e8 <NVIC_PriorityGroupConfig>

  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8001f12:	f04f 0314 	mov.w	r3, #20
 8001f16:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8001f18:	f04f 0301 	mov.w	r3, #1
 8001f1c:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001f24:	f04f 0301 	mov.w	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001f2a:	f107 0304 	add.w	r3, r7, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fb6c 	bl	800460c <NVIC_Init>

}
 8001f34:	f107 0708 	add.w	r7, r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <USB_Cable_Config>:
* Description    : Software Connection/Disconnection of USB Cable
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (FunctionalState NewState)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  if (NewState != DISABLE)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <USB_Cable_Config+0x1c>
  {
    GPIO_ResetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <USB_Cable_Config+0x30>)
 8001f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f52:	f002 fcb5 	bl	80048c0 <GPIO_ResetBits>
 8001f56:	e004      	b.n	8001f62 <USB_Cable_Config+0x26>
  }
  else
  {
    GPIO_SetBits(USB_DISCONNECT, USB_DISCONNECT_PIN);
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <USB_Cable_Config+0x30>)
 8001f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f5e:	f002 fca1 	bl	80048a4 <GPIO_SetBits>
  }
}
 8001f62:	f107 0708 	add.w	r7, r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40011c00 	.word	0x40011c00

08001f70 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;


    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f7e:	d103      	bne.n	8001f88 <Handle_USBAsynchXfer+0x18>
    {
      USART_Rx_ptr_out = 0;
 8001f80:	4b33      	ldr	r3, [pc, #204]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    }

    if(USART_Rx_ptr_out == USART_Rx_ptr_in)
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <Handle_USBAsynchXfer+0xe4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d104      	bne.n	8001f9e <Handle_USBAsynchXfer+0x2e>
    {
      USB_Tx_State = 0;
 8001f94:	4b30      	ldr	r3, [pc, #192]	; (8002058 <Handle_USBAsynchXfer+0xe8>)
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
      return;
 8001f9c:	e053      	b.n	8002046 <Handle_USBAsynchXfer+0xd6>
    }

    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <Handle_USBAsynchXfer+0xe4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d906      	bls.n	8001fb8 <Handle_USBAsynchXfer+0x48>
    {
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	e006      	b.n	8001fc6 <Handle_USBAsynchXfer+0x56>
    }
    else
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <Handle_USBAsynchXfer+0xe4>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1ad2      	subs	r2, r2, r3
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8001fc4:	601a      	str	r2, [r3, #0]
    }

    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d912      	bls.n	8001ff4 <Handle_USBAsynchXfer+0x84>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001fd4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001fd8:	80bb      	strh	r3, [r7, #4]

      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001fe4:	601a      	str	r2, [r3, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e010      	b.n	8002016 <Handle_USBAsynchXfer+0xa6>
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = USART_Rx_length;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	80bb      	strh	r3, [r7, #4]

      USART_Rx_ptr_out += USART_Rx_length;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	18d2      	adds	r2, r2, r3
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <Handle_USBAsynchXfer+0xe0>)
 800200c:	601a      	str	r2, [r3, #0]
      USART_Rx_length = 0;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <Handle_USBAsynchXfer+0xec>)
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <Handle_USBAsynchXfer+0xe8>)
 8002018:	f04f 0201 	mov.w	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]


        UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <Handle_USBAsynchXfer+0xf0>)
 8002022:	18d2      	adds	r2, r2, r3
 8002024:	88bb      	ldrh	r3, [r7, #4]
 8002026:	4610      	mov	r0, r2
 8002028:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800202c:	461a      	mov	r2, r3
 800202e:	f001 ff5b 	bl	8003ee8 <UserToPMABufferCopy>
        SetEPTxCount(ENDP1, USB_Tx_length);
 8002032:	88bb      	ldrh	r3, [r7, #4]
 8002034:	f04f 0001 	mov.w	r0, #1
 8002038:	4619      	mov	r1, r3
 800203a:	f002 f9ed 	bl	8004418 <SetEPTxCount>
        SetEPTxValid(ENDP1);
 800203e:	f04f 0001 	mov.w	r0, #1
 8002042:	f002 f87d 	bl	8004140 <SetEPTxValid>

}
 8002046:	f107 0708 	add.w	r7, r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200005f0 	.word	0x200005f0
 8002054:	200005ec 	.word	0x200005ec
 8002058:	200005f8 	.word	0x200005f8
 800205c:	200005f4 	.word	0x200005f4
 8002060:	2000064c 	.word	0x2000064c

08002064 <USB_Send_Data>:
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USB_Send_Data(uint8_t data)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  
  USART_Rx_Buffer[USART_Rx_ptr_in] = data;
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <USB_Send_Data+0x40>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <USB_Send_Data+0x44>)
 8002074:	79f9      	ldrb	r1, [r7, #7]
 8002076:	54d1      	strb	r1, [r2, r3]
  USART_Rx_ptr_in++;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <USB_Send_Data+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f103 0201 	add.w	r2, r3, #1
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <USB_Send_Data+0x40>)
 8002082:	601a      	str	r2, [r3, #0]

  /* To avoid buffer overflow */
  if(USART_Rx_ptr_in >= USART_RX_DATA_SIZE)
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <USB_Send_Data+0x40>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800208c:	429a      	cmp	r2, r3
 800208e:	d903      	bls.n	8002098 <USB_Send_Data+0x34>
  {
    USART_Rx_ptr_in = 0;
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <USB_Send_Data+0x40>)
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  }
}
 8002098:	f107 070c 	add.w	r7, r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200005ec 	.word	0x200005ec
 80020a8:	2000064c 	.word	0x2000064c

080020ac <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <Get_SerialNum+0x48>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
  Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <Get_SerialNum+0x4c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60bb      	str	r3, [r7, #8]
  Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <Get_SerialNum+0x50>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	607b      	str	r3, [r7, #4]

  Device_Serial0 += Device_Serial2;
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	18d3      	adds	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]

  if (Device_Serial0 != 0)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <Get_SerialNum+0x3e>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	490a      	ldr	r1, [pc, #40]	; (8002100 <Get_SerialNum+0x54>)
 80020d6:	f04f 0208 	mov.w	r2, #8
 80020da:	f000 f815 	bl	8002108 <IntToUnicode>
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80020de:	68b8      	ldr	r0, [r7, #8]
 80020e0:	4908      	ldr	r1, [pc, #32]	; (8002104 <Get_SerialNum+0x58>)
 80020e2:	f04f 0204 	mov.w	r2, #4
 80020e6:	f000 f80f 	bl	8002108 <IntToUnicode>
  }
}
 80020ea:	f107 0710 	add.w	r7, r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	1ffff7e8 	.word	0x1ffff7e8
 80020f8:	1ffff7ec 	.word	0x1ffff7ec
 80020fc:	1ffff7f0 	.word	0x1ffff7f0
 8002100:	20000002 	.word	0x20000002
 8002104:	20000012 	.word	0x20000012

08002108 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]
 8002122:	e031      	b.n	8002188 <IntToUnicode+0x80>
  {
    if( ((value >> 28)) < 0xA )
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800212a:	2b09      	cmp	r3, #9
 800212c:	d80d      	bhi.n	800214a <IntToUnicode+0x42>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	18d3      	adds	r3, r2, r3
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	ea4f 7212 	mov.w	r2, r2, lsr #28
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e00c      	b.n	8002164 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	18d3      	adds	r3, r2, r3
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	ea4f 7212 	mov.w	r2, r2, lsr #28
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800216a:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002172:	f103 0301 	add.w	r3, r3, #1
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	18d3      	adds	r3, r2, r3
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	f103 0301 	add.w	r3, r3, #1
 8002186:	75fb      	strb	r3, [r7, #23]
 8002188:	7dfa      	ldrb	r2, [r7, #23]
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	429a      	cmp	r2, r3
 800218e:	d3c9      	bcc.n	8002124 <IntToUnicode+0x1c>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8002190:	f107 071c 	add.w	r7, r7, #28
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <USB_SetLeds>:

void USB_SetLeds(uint8_t LED_Command) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	switch (LED_Command) {
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80021ac:	2b34      	cmp	r3, #52	; 0x34
 80021ae:	f200 80a9 	bhi.w	8002304 <USB_SetLeds+0x168>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <USB_SetLeds+0x1c>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080022f9 	.word	0x080022f9
 80021bc:	080022ed 	.word	0x080022ed
 80021c0:	08002305 	.word	0x08002305
 80021c4:	08002305 	.word	0x08002305
 80021c8:	08002305 	.word	0x08002305
 80021cc:	08002305 	.word	0x08002305
 80021d0:	08002305 	.word	0x08002305
 80021d4:	08002305 	.word	0x08002305
 80021d8:	08002305 	.word	0x08002305
 80021dc:	08002305 	.word	0x08002305
 80021e0:	08002305 	.word	0x08002305
 80021e4:	08002305 	.word	0x08002305
 80021e8:	08002305 	.word	0x08002305
 80021ec:	08002305 	.word	0x08002305
 80021f0:	08002305 	.word	0x08002305
 80021f4:	08002305 	.word	0x08002305
 80021f8:	08002305 	.word	0x08002305
 80021fc:	0800228d 	.word	0x0800228d
 8002200:	08002299 	.word	0x08002299
 8002204:	080022a5 	.word	0x080022a5
 8002208:	080022b1 	.word	0x080022b1
 800220c:	08002305 	.word	0x08002305
 8002210:	08002305 	.word	0x08002305
 8002214:	08002305 	.word	0x08002305
 8002218:	08002305 	.word	0x08002305
 800221c:	08002305 	.word	0x08002305
 8002220:	08002305 	.word	0x08002305
 8002224:	08002305 	.word	0x08002305
 8002228:	08002305 	.word	0x08002305
 800222c:	08002305 	.word	0x08002305
 8002230:	08002305 	.word	0x08002305
 8002234:	08002305 	.word	0x08002305
 8002238:	08002305 	.word	0x08002305
 800223c:	08002305 	.word	0x08002305
 8002240:	08002305 	.word	0x08002305
 8002244:	08002305 	.word	0x08002305
 8002248:	08002305 	.word	0x08002305
 800224c:	08002305 	.word	0x08002305
 8002250:	08002305 	.word	0x08002305
 8002254:	08002305 	.word	0x08002305
 8002258:	08002305 	.word	0x08002305
 800225c:	08002305 	.word	0x08002305
 8002260:	08002305 	.word	0x08002305
 8002264:	08002305 	.word	0x08002305
 8002268:	08002305 	.word	0x08002305
 800226c:	08002305 	.word	0x08002305
 8002270:	08002305 	.word	0x08002305
 8002274:	08002305 	.word	0x08002305
 8002278:	08002305 	.word	0x08002305
 800227c:	080022bd 	.word	0x080022bd
 8002280:	080022c9 	.word	0x080022c9
 8002284:	080022d5 	.word	0x080022d5
 8002288:	080022e1 	.word	0x080022e1
	case 'A': {
	    GPIO_SetBits(GPIOF, GPIO_Pin_6);
 800228c:	481f      	ldr	r0, [pc, #124]	; (800230c <USB_SetLeds+0x170>)
 800228e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002292:	f002 fb07 	bl	80048a4 <GPIO_SetBits>
	    break;
 8002296:	e035      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case 'B': {
	    GPIO_SetBits(GPIOF, GPIO_Pin_7);
 8002298:	481c      	ldr	r0, [pc, #112]	; (800230c <USB_SetLeds+0x170>)
 800229a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800229e:	f002 fb01 	bl	80048a4 <GPIO_SetBits>
	    break;
 80022a2:	e02f      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case 'C': {
	    GPIO_SetBits(GPIOF, GPIO_Pin_8);
 80022a4:	4819      	ldr	r0, [pc, #100]	; (800230c <USB_SetLeds+0x170>)
 80022a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022aa:	f002 fafb 	bl	80048a4 <GPIO_SetBits>
	    break;
 80022ae:	e029      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case 'D': {
	    GPIO_SetBits(GPIOF, GPIO_Pin_9);
 80022b0:	4816      	ldr	r0, [pc, #88]	; (800230c <USB_SetLeds+0x170>)
 80022b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b6:	f002 faf5 	bl	80048a4 <GPIO_SetBits>
	    break;
 80022ba:	e023      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case 'a': {
	    GPIO_ResetBits(GPIOF, GPIO_Pin_6);
 80022bc:	4813      	ldr	r0, [pc, #76]	; (800230c <USB_SetLeds+0x170>)
 80022be:	f04f 0140 	mov.w	r1, #64	; 0x40
 80022c2:	f002 fafd 	bl	80048c0 <GPIO_ResetBits>
	    break;
 80022c6:	e01d      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case 'b': {
	    GPIO_ResetBits(GPIOF, GPIO_Pin_7);
 80022c8:	4810      	ldr	r0, [pc, #64]	; (800230c <USB_SetLeds+0x170>)
 80022ca:	f04f 0180 	mov.w	r1, #128	; 0x80
 80022ce:	f002 faf7 	bl	80048c0 <GPIO_ResetBits>
	    break;
 80022d2:	e017      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case 'c': {
	    GPIO_ResetBits(GPIOF, GPIO_Pin_8);
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <USB_SetLeds+0x170>)
 80022d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022da:	f002 faf1 	bl	80048c0 <GPIO_ResetBits>
	    break;
 80022de:	e011      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case 'd': {
	    GPIO_ResetBits(GPIOF, GPIO_Pin_9);
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <USB_SetLeds+0x170>)
 80022e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e6:	f002 faeb 	bl	80048c0 <GPIO_ResetBits>
	    break;
 80022ea:	e00b      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case '1': {
	    GPIO_SetBits(GPIOF, GPIO_Pin_6 | GPIO_Pin_7 |GPIO_Pin_8 |GPIO_Pin_9);
 80022ec:	4807      	ldr	r0, [pc, #28]	; (800230c <USB_SetLeds+0x170>)
 80022ee:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80022f2:	f002 fad7 	bl	80048a4 <GPIO_SetBits>
	    break;
 80022f6:	e005      	b.n	8002304 <USB_SetLeds+0x168>
	}
	case '0': {
	    GPIO_ResetBits(GPIOF, GPIO_Pin_6 | GPIO_Pin_7 |GPIO_Pin_8 |GPIO_Pin_9);
 80022f8:	4804      	ldr	r0, [pc, #16]	; (800230c <USB_SetLeds+0x170>)
 80022fa:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80022fe:	f002 fadf 	bl	80048c0 <GPIO_ResetBits>
	    break;
 8002302:	bf00      	nop
	}
	}
}
 8002304:	f107 0708 	add.w	r7, r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40011c00 	.word	0x40011c00

08002310 <USB_LP_CAN1_RX0_IRQHandler>:

#include <stdint.h>
#include <stdio.h>

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  USB_Istr();
 8002314:	f000 f978 	bl	8002608 <USB_Istr>
}
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop

0800231c <main>:
//--------------------------------------------------------------
int main(void) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0

	uint32_t i;

	Set_System();
 8002322:	f7ff fdad 	bl	8001e80 <Set_System>
	Set_USBClock();
 8002326:	f7ff fddf 	bl	8001ee8 <Set_USBClock>
	USB_Interrupts_Config();
 800232a:	f7ff fdeb 	bl	8001f04 <USB_Interrupts_Config>
	USB_Init();
 800232e:	f001 fc1d 	bl	8003b6c <USB_Init>

	for (;;) {
		printf("Hello world!\r\n");
 8002332:	4808      	ldr	r0, [pc, #32]	; (8002354 <main+0x38>)
 8002334:	f7fd ffaa 	bl	800028c <puts>
		for (i=0; i<0x000fffff; i++);
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e003      	b.n	8002348 <main+0x2c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0301 	add.w	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4b03      	ldr	r3, [pc, #12]	; (8002358 <main+0x3c>)
 800234c:	429a      	cmp	r2, r3
 800234e:	d9f7      	bls.n	8002340 <main+0x24>
	}
 8002350:	e7ef      	b.n	8002332 <main+0x16>
 8002352:	bf00      	nop
 8002354:	08004bb8 	.word	0x08004bb8
 8002358:	000ffffe 	.word	0x000ffffe

0800235c <_close>:
    while (1);
}

// close - закрытие файла - возвращаем ошибку 
int _close(int file)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    return -1;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002368:	4618      	mov	r0, r3
 800236a:	f107 070c 	add.w	r7, r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <_fstat>:

/*
 fstat - состояние открытого файла
 */
int _fstat(int file, struct stat *st)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002384:	605a      	str	r2, [r3, #4]
    return 0;
 8002386:	f04f 0300 	mov.w	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	f107 070c 	add.w	r7, r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop

08002398 <_isatty>:

/*
 isatty - является ли файл терминалом.
 */
int _isatty(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
    switch (file)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0300 	add.w	r3, r3, #0
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d802      	bhi.n	80023b0 <_isatty+0x18>
    {
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 80023aa:	f04f 0301 	mov.w	r3, #1
 80023ae:	e005      	b.n	80023bc <_isatty+0x24>
    default:
        //errno = ENOTTY;
        errno = EBADF;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <_isatty+0x30>)
 80023b2:	f04f 0209 	mov.w	r2, #9
 80023b6:	601a      	str	r2, [r3, #0]
        return 0;
 80023b8:	f04f 0300 	mov.w	r3, #0
    }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	f107 070c 	add.w	r7, r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20000edc 	.word	0x20000edc

080023cc <_lseek>:

/*
 lseek - установить позицию в файле
 */
int _lseek(int file, int ptr, int dir)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
    return 0;
 80023d8:	f04f 0300 	mov.w	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	f107 0714 	add.w	r7, r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <_sbrk>:

/*
 sbrk - увеличить размер области данных, использутся для malloc
 */
caddr_t _sbrk(int incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    extern char _ebss; 
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <_sbrk+0x68>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x16>
    {
        heap_end = &_ebss;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <_sbrk+0x68>)
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <_sbrk+0x6c>)
 80023fc:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <_sbrk+0x68>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

    char * stack = (char*) __get_MSP();
 8002404:	f002 faee 	bl	80049e4 <__get_MSP>
 8002408:	4603      	mov	r3, r0
 800240a:	60bb      	str	r3, [r7, #8]
    if (heap_end + incr > stack)
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x68>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	18d2      	adds	r2, r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	d90d      	bls.n	8002436 <_sbrk+0x4e>
    {
        _write(STDERR_FILENO, "Heap and stack collision\n", 25);
 800241a:	f04f 0002 	mov.w	r0, #2
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <_sbrk+0x70>)
 8002420:	f04f 0219 	mov.w	r2, #25
 8002424:	f000 f85e 	bl	80024e4 <_write>
        errno = ENOMEM;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <_sbrk+0x74>)
 800242a:	f04f 020c 	mov.w	r2, #12
 800242e:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	e006      	b.n	8002444 <_sbrk+0x5c>
        //abort ();
    }

    heap_end += incr;
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <_sbrk+0x68>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	18d2      	adds	r2, r2, r3
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <_sbrk+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
    return (caddr_t) prev_heap_end;
 8002442:	68fb      	ldr	r3, [r7, #12]

}
 8002444:	4618      	mov	r0, r3
 8002446:	f107 0710 	add.w	r7, r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000600 	.word	0x20000600
 8002454:	20000ee0 	.word	0x20000ee0
 8002458:	08004bc8 	.word	0x08004bc8
 800245c:	20000edc 	.word	0x20000edc

08002460 <_read>:
/*
 read - чтение из файла, у нас пока для чтения есть только stdin
 */

int _read(int file, char *ptr, int len)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
    int n;
    int num = 0;
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
    switch (file)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d126      	bne.n	80024c6 <_read+0x66>
    {
    case STDIN_FILENO:
        for (n = 0; n < len; n++)
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e01c      	b.n	80024ba <_read+0x5a>
        {
            while (USART_GetFlagStatus(STDIN_USART, USART_FLAG_RXNE) == RESET);
 8002480:	bf00      	nop
 8002482:	4816      	ldr	r0, [pc, #88]	; (80024dc <_read+0x7c>)
 8002484:	f04f 0120 	mov.w	r1, #32
 8002488:	f002 fa8c 	bl	80049a4 <USART_GetFlagStatus>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f7      	beq.n	8002482 <_read+0x22>
            char c = (char) (USART_ReceiveData(STDIN_USART) & (uint16_t) 0x01FF);
 8002492:	4812      	ldr	r0, [pc, #72]	; (80024dc <_read+0x7c>)
 8002494:	f002 fa74 	bl	8004980 <USART_ReceiveData>
 8002498:	4603      	mov	r3, r0
 800249a:	75fb      	strb	r3, [r7, #23]
            *ptr++ = c;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	7dfa      	ldrb	r2, [r7, #23]
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f103 0301 	add.w	r3, r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
            num++;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f103 0301 	add.w	r3, r3, #1
 80024b0:	61bb      	str	r3, [r7, #24]
    int n;
    int num = 0;
    switch (file)
    {
    case STDIN_FILENO:
        for (n = 0; n < len; n++)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f103 0301 	add.w	r3, r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	dbde      	blt.n	8002480 <_read+0x20>
        break;
    default:
        errno = EBADF;
        return -1;
    }
    return num;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	e005      	b.n	80024d2 <_read+0x72>
            *ptr++ = c;
            num++;
        }
        break;
    default:
        errno = EBADF;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <_read+0x80>)
 80024c8:	f04f 0209 	mov.w	r2, #9
 80024cc:	601a      	str	r2, [r3, #0]
        return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
    }
    return num;
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	f107 0720 	add.w	r7, r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40013800 	.word	0x40013800
 80024e0:	20000edc 	.word	0x20000edc

080024e4 <_write>:

/*
 write - запись в файл - у нас есть только stderr/stdout
 */
int _write(int file, char *ptr, int len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
    int n;
    switch (file)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d002      	beq.n	80024fc <_write+0x18>
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d016      	beq.n	8002528 <_write+0x44>
 80024fa:	e02b      	b.n	8002554 <_write+0x70>
    {
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++)
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e00c      	b.n	800251e <_write+0x3a>
        {
        	USB_Send_Data((uint8_t) * ptr++);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	f102 0201 	add.w	r2, r2, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fda7 	bl	8002064 <USB_Send_Data>
{
    int n;
    switch (file)
    {
    case STDOUT_FILENO: /*stdout*/
        for (n = 0; n < len; n++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f103 0301 	add.w	r3, r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbee      	blt.n	8002504 <_write+0x20>
        {
        	USB_Send_Data((uint8_t) * ptr++);
        }
        break;
 8002526:	e01c      	b.n	8002562 <_write+0x7e>
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++)
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e00c      	b.n	800254a <_write+0x66>
        {
        	USB_Send_Data((uint8_t) * ptr++);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	f102 0201 	add.w	r2, r2, #1
 800253a:	60ba      	str	r2, [r7, #8]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fd91 	bl	8002064 <USB_Send_Data>
        {
        	USB_Send_Data((uint8_t) * ptr++);
        }
        break;
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f103 0301 	add.w	r3, r3, #1
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	dbee      	blt.n	8002530 <_write+0x4c>
        {
        	USB_Send_Data((uint8_t) * ptr++);
        }
        break;
 8002552:	e006      	b.n	8002562 <_write+0x7e>
    default:
        errno = EBADF;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <_write+0x8c>)
 8002556:	f04f 0209 	mov.w	r2, #9
 800255a:	601a      	str	r2, [r3, #0]
        return -1;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	e000      	b.n	8002564 <_write+0x80>
    }
    return len;
 8002562:	687b      	ldr	r3, [r7, #4]
}
 8002564:	4618      	mov	r0, r3
 8002566:	f107 0718 	add.w	r7, r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000edc 	.word	0x20000edc

08002574 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	Handle_USBAsynchXfer();
 8002578:	f7ff fcfa 	bl	8001f70 <Handle_USBAsynchXfer>
}
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop

08002580 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  uint16_t USB_Rx_Cnt;
  uint16_t i;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8002586:	f04f 0003 	mov.w	r0, #3
 800258a:	490f      	ldr	r1, [pc, #60]	; (80025c8 <EP3_OUT_Callback+0x48>)
 800258c:	f002 f804 	bl	8004598 <USB_SIL_Read>
 8002590:	4603      	mov	r3, r0
 8002592:	80bb      	strh	r3, [r7, #4]

  for (i=0; i<USB_Rx_Cnt; i++) {
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	80fb      	strh	r3, [r7, #6]
 800259a:	e009      	b.n	80025b0 <EP3_OUT_Callback+0x30>
	  USB_SetLeds(USB_Rx_Buffer[i]);
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <EP3_OUT_Callback+0x48>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fdfa 	bl	800219c <USB_SetLeds>
  uint16_t i;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);

  for (i=0; i<USB_Rx_Cnt; i++) {
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	f103 0301 	add.w	r3, r3, #1
 80025ae:	80fb      	strh	r3, [r7, #6]
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	88bb      	ldrh	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d3f1      	bcc.n	800259c <EP3_OUT_Callback+0x1c>
	  USB_SetLeds(USB_Rx_Buffer[i]);
  }
  
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 80025b8:	f04f 0003 	mov.w	r0, #3
 80025bc:	f001 fdec 	bl	8004198 <SetEPRxValid>
}
 80025c0:	f107 0708 	add.w	r7, r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000e5c 	.word	0x20000e5c

080025cc <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <SOF_Callback+0x34>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d112      	bne.n	80025fe <SOF_Callback+0x32>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <SOF_Callback+0x38>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	bf14      	ite	ne
 80025e0:	2200      	movne	r2, #0
 80025e2:	2201      	moveq	r2, #1
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f103 0101 	add.w	r1, r3, #1
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SOF_Callback+0x38>)
 80025ec:	6019      	str	r1, [r3, #0]
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d005      	beq.n	80025fe <SOF_Callback+0x32>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SOF_Callback+0x38>)
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */

      Handle_USBAsynchXfer();
 80025fa:	f7ff fcb9 	bl	8001f70 <Handle_USBAsynchXfer>

    }
  }  
}
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000060c 	.word	0x2000060c
 8002604:	20000604 	.word	0x20000604

08002608 <USB_Istr>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void USB_Istr(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0

  wIstr = _GetISTR();
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <USB_Istr+0x80>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <USB_Istr+0x84>)
 8002614:	801a      	strh	r2, [r3, #0]

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <USB_Istr+0x84>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <USB_Istr+0x88>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	ea02 0303 	and.w	r3, r2, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <USB_Istr+0x40>
  {
    _SetISTR((uint16_t)CLR_SOF);
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <USB_Istr+0x80>)
 800262e:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8002632:	601a      	str	r2, [r3, #0]
    bIntPackSOF++;
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <USB_Istr+0x8c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f103 0301 	add.w	r3, r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <USB_Istr+0x8c>)
 8002642:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8002644:	f7ff ffc2 	bl	80025cc <SOF_Callback>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <USB_Istr+0x84>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <USB_Istr+0x88>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	ea02 0303 	and.w	r3, r2, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <USB_Istr+0x5a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800265e:	f001 faa7 	bl	8003bb0 <CTR_LP>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <USB_Istr+0x84>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <USB_Istr+0x88>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	ea02 0303 	and.w	r3, r2, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <USB_Istr+0x7e>
  {
    _SetISTR((uint16_t)CLR_RESET);
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <USB_Istr+0x80>)
 800267a:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800267e:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <USB_Istr+0x90>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40005c44 	.word	0x40005c44
 800268c:	20000e9c 	.word	0x20000e9c
 8002690:	20000ed4 	.word	0x20000ed4
 8002694:	20000608 	.word	0x20000608
 8002698:	20000060 	.word	0x20000060

0800269c <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80026a0:	f7ff fd04 	bl	80020ac <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <Virtual_Com_Port_init+0x24>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	729a      	strb	r2, [r3, #10]

  /* Connect the device */
  PowerOn();
 80026ae:	f000 f9e5 	bl	8002a7c <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 80026b2:	f001 ff57 	bl	8004564 <USB_SIL_Init>

  bDeviceState = UNCONNECTED;
 80026b6:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <Virtual_Com_Port_init+0x28>)
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000ed0 	.word	0x20000ed0
 80026c4:	2000060c 	.word	0x2000060c

080026c8 <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80026cc:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <Virtual_Com_Port_Reset+0x128>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	729a      	strb	r2, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80026d6:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <Virtual_Com_Port_Reset+0x128>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a46      	ldr	r2, [pc, #280]	; (80027f4 <Virtual_Com_Port_Reset+0x12c>)
 80026dc:	79d2      	ldrb	r2, [r2, #7]
 80026de:	725a      	strb	r2, [r3, #9]

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 80026e0:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <Virtual_Com_Port_Reset+0x128>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	72da      	strb	r2, [r3, #11]


  SetBTABLE(BTABLE_ADDRESS);
 80026ea:	f04f 0000 	mov.w	r0, #0
 80026ee:	f001 fc77 	bl	8003fe0 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026fa:	f001 fc85 	bl	8004008 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 80026fe:	f04f 0000 	mov.w	r0, #0
 8002702:	f04f 0110 	mov.w	r1, #16
 8002706:	f001 fca7 	bl	8004058 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800270a:	f04f 0000 	mov.w	r0, #0
 800270e:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002712:	f001 fe21 	bl	8004358 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002716:	f04f 0000 	mov.w	r0, #0
 800271a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800271e:	f001 fdf7 	bl	8004310 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f001 fd63 	bl	80041f0 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <Virtual_Com_Port_Reset+0x130>)
 800272c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002730:	f04f 0000 	mov.w	r0, #0
 8002734:	4619      	mov	r1, r3
 8002736:	f001 fe8d 	bl	8004454 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f001 fd2b 	bl	8004198 <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8002742:	f04f 0001 	mov.w	r0, #1
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	f001 fc5d 	bl	8004008 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800274e:	f04f 0001 	mov.w	r0, #1
 8002752:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 8002756:	f001 fddb 	bl	8004310 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800275a:	f04f 0001 	mov.w	r0, #1
 800275e:	f04f 0120 	mov.w	r1, #32
 8002762:	f001 fc79 	bl	8004058 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002766:	f04f 0001 	mov.w	r0, #1
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	f001 fcad 	bl	80040cc <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8002772:	f04f 0002 	mov.w	r0, #2
 8002776:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800277a:	f001 fc45 	bl	8004008 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800277e:	f04f 0002 	mov.w	r0, #2
 8002782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002786:	f001 fdc3 	bl	8004310 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800278a:	f04f 0002 	mov.w	r0, #2
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	f001 fc9b 	bl	80040cc <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8002796:	f04f 0002 	mov.w	r0, #2
 800279a:	f04f 0120 	mov.w	r1, #32
 800279e:	f001 fc5b 	bl	8004058 <SetEPTxStatus>

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 80027a2:	f04f 0003 	mov.w	r0, #3
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	f001 fc2d 	bl	8004008 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 80027ae:	f04f 0003 	mov.w	r0, #3
 80027b2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80027b6:	f001 fdcf 	bl	8004358 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80027ba:	f04f 0003 	mov.w	r0, #3
 80027be:	f04f 0140 	mov.w	r1, #64	; 0x40
 80027c2:	f001 fe47 	bl	8004454 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80027c6:	f04f 0003 	mov.w	r0, #3
 80027ca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80027ce:	f001 fc7d 	bl	80040cc <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80027d2:	f04f 0003 	mov.w	r0, #3
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	f001 fc3d 	bl	8004058 <SetEPTxStatus>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f001 f97b 	bl	8003adc <SetDeviceAddress>

  bDeviceState = ATTACHED;
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <Virtual_Com_Port_Reset+0x134>)
 80027e8:	f04f 0201 	mov.w	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000ed0 	.word	0x20000ed0
 80027f4:	08004bf8 	.word	0x08004bf8
 80027f8:	20000060 	.word	0x20000060
 80027fc:	2000060c 	.word	0x2000060c

08002800 <Virtual_Com_Port_SetConfiguration>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
  DEVICE_INFO *pInfo = &Device_Info;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <Virtual_Com_Port_SetConfiguration+0x24>)
 8002808:	607b      	str	r3, [r7, #4]

  if (pInfo->Current_Configuration != 0)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7a9b      	ldrb	r3, [r3, #10]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <Virtual_Com_Port_SetConfiguration+0x1a>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <Virtual_Com_Port_SetConfiguration+0x28>)
 8002814:	f04f 0205 	mov.w	r2, #5
 8002818:	601a      	str	r2, [r3, #0]
  }
}
 800281a:	f107 070c 	add.w	r7, r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000eb0 	.word	0x20000eb0
 8002828:	2000060c 	.word	0x2000060c

0800282c <Virtual_Com_Port_SetDeviceAddress>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  bDeviceState = ADDRESSED;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <Virtual_Com_Port_SetDeviceAddress+0x14>)
 8002832:	f04f 0204 	mov.w	r2, #4
 8002836:	601a      	str	r2, [r3, #0]
}
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	2000060c 	.word	0x2000060c

08002844 <Virtual_Com_Port_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  if (Request == SET_LINE_CODING)
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <Virtual_Com_Port_Status_In+0x1c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b20      	cmp	r3, #32
 800284e:	d103      	bne.n	8002858 <Virtual_Com_Port_Status_In+0x14>
  {
    Request = 0;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <Virtual_Com_Port_Status_In+0x1c>)
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
  }
}
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000609 	.word	0x20000609

08002864 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop

08002870 <Virtual_Com_Port_Data_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]

  if (RequestNo == GET_LINE_CODING)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2b21      	cmp	r3, #33	; 0x21
 8002884:	d109      	bne.n	800289a <Virtual_Com_Port_Data_Setup+0x2a>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <Virtual_Com_Port_Data_Setup+0x80>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002890:	2b21      	cmp	r3, #33	; 0x21
 8002892:	d112      	bne.n	80028ba <Virtual_Com_Port_Data_Setup+0x4a>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <Virtual_Com_Port_Data_Setup+0x84>)
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e00f      	b.n	80028ba <Virtual_Com_Port_Data_Setup+0x4a>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b20      	cmp	r3, #32
 800289e:	d10c      	bne.n	80028ba <Virtual_Com_Port_Data_Setup+0x4a>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <Virtual_Com_Port_Data_Setup+0x80>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	2b21      	cmp	r3, #33	; 0x21
 80028ac:	d101      	bne.n	80028b2 <Virtual_Com_Port_Data_Setup+0x42>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <Virtual_Com_Port_Data_Setup+0x88>)
 80028b0:	60fb      	str	r3, [r7, #12]
    }
    Request = SET_LINE_CODING;
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <Virtual_Com_Port_Data_Setup+0x8c>)
 80028b4:	f04f 0220 	mov.w	r2, #32
 80028b8:	701a      	strb	r2, [r3, #0]
  }

  if (CopyRoutine == NULL)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <Virtual_Com_Port_Data_Setup+0x56>
  {
    return USB_UNSUPPORT;
 80028c0:	f04f 0302 	mov.w	r3, #2
 80028c4:	e00e      	b.n	80028e4 <Virtual_Com_Port_Data_Setup+0x74>
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <Virtual_Com_Port_Data_Setup+0x80>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	619a      	str	r2, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <Virtual_Com_Port_Data_Setup+0x80>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	825a      	strh	r2, [r3, #18]
  (*CopyRoutine)(0);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f04f 0000 	mov.w	r0, #0
 80028de:	4798      	blx	r3
  return USB_SUCCESS;
 80028e0:	f04f 0300 	mov.w	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	f107 0710 	add.w	r7, r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000ed0 	.word	0x20000ed0
 80028f4:	08002a0d 	.word	0x08002a0d
 80028f8:	08002a45 	.word	0x08002a45
 80028fc:	20000609 	.word	0x20000609

08002900 <Virtual_Com_Port_NoData_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <Virtual_Com_Port_NoData_Setup+0x40>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002914:	2b21      	cmp	r3, #33	; 0x21
 8002916:	d10b      	bne.n	8002930 <Virtual_Com_Port_NoData_Setup+0x30>
  {
    if (RequestNo == SET_COMM_FEATURE)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d102      	bne.n	8002924 <Virtual_Com_Port_NoData_Setup+0x24>
    {
      return USB_SUCCESS;
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e007      	b.n	8002934 <Virtual_Com_Port_NoData_Setup+0x34>
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	2b22      	cmp	r3, #34	; 0x22
 8002928:	d102      	bne.n	8002930 <Virtual_Com_Port_NoData_Setup+0x30>
    {
      return USB_SUCCESS;
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e001      	b.n	8002934 <Virtual_Com_Port_NoData_Setup+0x34>
    }
  }

  return USB_UNSUPPORT;
 8002930:	f04f 0302 	mov.w	r3, #2
}
 8002934:	4618      	mov	r0, r3
 8002936:	f107 070c 	add.w	r7, r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000ed0 	.word	0x20000ed0

08002944 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	4618      	mov	r0, r3
 8002952:	4904      	ldr	r1, [pc, #16]	; (8002964 <Virtual_Com_Port_GetDeviceDescriptor+0x20>)
 8002954:	f000 fbc6 	bl	80030e4 <Standard_GetDescriptorData>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	f107 0708 	add.w	r7, r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200000b4 	.word	0x200000b4

08002968 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	4618      	mov	r0, r3
 8002976:	4904      	ldr	r1, [pc, #16]	; (8002988 <Virtual_Com_Port_GetConfigDescriptor+0x20>)
 8002978:	f000 fbb4 	bl	80030e4 <Standard_GetDescriptorData>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	f107 0708 	add.w	r7, r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200000bc 	.word	0x200000bc

0800298c <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	80fb      	strh	r3, [r7, #6]
  uint8_t wValue0 = pInformation->USBwValue0;
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <Virtual_Com_Port_GetStringDescriptor+0x40>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78db      	ldrb	r3, [r3, #3]
 800299c:	73fb      	strb	r3, [r7, #15]
  if (wValue0 > 4)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d902      	bls.n	80029aa <Virtual_Com_Port_GetStringDescriptor+0x1e>
  {
    return NULL;
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e00a      	b.n	80029c0 <Virtual_Com_Port_GetStringDescriptor+0x34>
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <Virtual_Com_Port_GetStringDescriptor+0x44>)
 80029b2:	18d3      	adds	r3, r2, r3
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f000 fb93 	bl	80030e4 <Standard_GetDescriptorData>
 80029be:	4603      	mov	r3, r0
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	f107 0710 	add.w	r7, r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000ed0 	.word	0x20000ed0
 80029d0:	200000c4 	.word	0x200000c4

080029d4 <Virtual_Com_Port_Get_Interface_Setting>:
* Input2         : uint8_t: AlternateSetting : Alternate Setting number.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	71fa      	strb	r2, [r7, #7]
 80029e0:	71bb      	strb	r3, [r7, #6]
  if (AlternateSetting > 0)
 80029e2:	79bb      	ldrb	r3, [r7, #6]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <Virtual_Com_Port_Get_Interface_Setting+0x1a>
  {
    return USB_UNSUPPORT;
 80029e8:	f04f 0302 	mov.w	r3, #2
 80029ec:	e007      	b.n	80029fe <Virtual_Com_Port_Get_Interface_Setting+0x2a>
  }
  else if (Interface > 1)
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d902      	bls.n	80029fa <Virtual_Com_Port_Get_Interface_Setting+0x26>
  {
    return USB_UNSUPPORT;
 80029f4:	f04f 0302 	mov.w	r3, #2
 80029f8:	e001      	b.n	80029fe <Virtual_Com_Port_Get_Interface_Setting+0x2a>
  }
  return USB_SUCCESS;
 80029fa:	f04f 0300 	mov.w	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	f107 070c 	add.w	r7, r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop

08002a0c <Virtual_Com_Port_GetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <Virtual_Com_Port_GetLineCoding+0x20>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <Virtual_Com_Port_GetLineCoding+0x30>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f04f 0208 	mov.w	r2, #8
 8002a24:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e000      	b.n	8002a2e <Virtual_Com_Port_GetLineCoding+0x22>
  }
  return(uint8_t *)&linecoding;
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <Virtual_Com_Port_GetLineCoding+0x34>)
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f107 070c 	add.w	r7, r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000ed0 	.word	0x20000ed0
 8002a40:	20000054 	.word	0x20000054

08002a44 <Virtual_Com_Port_SetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <Virtual_Com_Port_SetLineCoding+0x20>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <Virtual_Com_Port_SetLineCoding+0x30>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f04f 0208 	mov.w	r2, #8
 8002a5c:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e000      	b.n	8002a66 <Virtual_Com_Port_SetLineCoding+0x22>
  }
  return(uint8_t *)&linecoding;
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <Virtual_Com_Port_SetLineCoding+0x34>)
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	f107 070c 	add.w	r7, r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000ed0 	.word	0x20000ed0
 8002a78:	20000054 	.word	0x20000054

08002a7c <PowerOn>:
 * Description    :
 * Input          : None.
 * Output         : None.
 * Return         : USB_SUCCESS.
 *******************************************************************************/
RESULT PowerOn(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	uint16_t wRegVal;

	/*** cable plugged-in ? ***/
	USB_Cable_Config(ENABLE);
 8002a82:	f04f 0001 	mov.w	r0, #1
 8002a86:	f7ff fa59 	bl	8001f3c <USB_Cable_Config>

	/*** CNTR_PWDN = 0 ***/
	wRegVal = CNTR_FRES;
 8002a8a:	f04f 0301 	mov.w	r3, #1
 8002a8e:	80fb      	strh	r3, [r7, #6]
	_SetCNTR(wRegVal);
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <PowerOn+0x50>)
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	601a      	str	r2, [r3, #0]

	/*** CNTR_FRES = 0 ***/
	wInterrupt_Mask = 0;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <PowerOn+0x54>)
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
	_SetCNTR(wInterrupt_Mask);
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <PowerOn+0x50>)
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <PowerOn+0x54>)
 8002aa2:	8812      	ldrh	r2, [r2, #0]
 8002aa4:	601a      	str	r2, [r3, #0]
	/*** Clear pending interrupts ***/
	_SetISTR(0);
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <PowerOn+0x58>)
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
	/*** Set interrupt mask ***/
	wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <PowerOn+0x54>)
 8002ab0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002ab4:	801a      	strh	r2, [r3, #0]
	_SetCNTR(wInterrupt_Mask);
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <PowerOn+0x50>)
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <PowerOn+0x54>)
 8002aba:	8812      	ldrh	r2, [r2, #0]
 8002abc:	601a      	str	r2, [r3, #0]

	return USB_SUCCESS;
 8002abe:	f04f 0300 	mov.w	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f107 0708 	add.w	r7, r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40005c40 	.word	0x40005c40
 8002ad0:	20000ed4 	.word	0x20000ed4
 8002ad4:	40005c44 	.word	0x40005c44

08002ad8 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <Standard_GetConfiguration+0x20>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <Standard_GetConfiguration+0x3c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f04f 0201 	mov.w	r2, #1
 8002af0:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e007      	b.n	8002b08 <Standard_GetConfiguration+0x30>
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <Standard_GetConfiguration+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <Standard_GetConfiguration+0x3c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f103 030a 	add.w	r3, r3, #10
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f107 0708 	add.w	r7, r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000ed0 	.word	0x20000ed0
 8002b18:	20000ecc 	.word	0x20000ecc

08002b1c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0

  if ((pInformation->USBwValue0 <=
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <Standard_SetConfiguration+0x48>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	78da      	ldrb	r2, [r3, #3]
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <Standard_SetConfiguration+0x4c>)
 8002b28:	785b      	ldrb	r3, [r3, #1]
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d816      	bhi.n	8002b5c <Standard_SetConfiguration+0x40>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <Standard_SetConfiguration+0x48>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	789b      	ldrb	r3, [r3, #2]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d111      	bne.n	8002b5c <Standard_SetConfiguration+0x40>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <Standard_SetConfiguration+0x48>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	889b      	ldrh	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <Standard_SetConfiguration+0x40>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <Standard_SetConfiguration+0x48>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <Standard_SetConfiguration+0x48>)
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	78d2      	ldrb	r2, [r2, #3]
 8002b4c:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <Standard_SetConfiguration+0x50>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4798      	blx	r3
    return USB_SUCCESS;
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e001      	b.n	8002b60 <Standard_SetConfiguration+0x44>
  }
  else
  {
    return USB_UNSUPPORT;
 8002b5c:	f04f 0302 	mov.w	r3, #2
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000ed0 	.word	0x20000ed0
 8002b68:	2000005c 	.word	0x2000005c
 8002b6c:	20000ecc 	.word	0x20000ecc

08002b70 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <Standard_GetInterface+0x20>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <Standard_GetInterface+0x3c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f04f 0201 	mov.w	r2, #1
 8002b88:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e007      	b.n	8002ba0 <Standard_GetInterface+0x30>
  }
  pUser_Standard_Requests->User_GetInterface();
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <Standard_GetInterface+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <Standard_GetInterface+0x3c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f103 030c 	add.w	r3, r3, #12
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f107 0708 	add.w	r7, r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000ed0 	.word	0x20000ed0
 8002bb0:	20000ecc 	.word	0x20000ecc

08002bb4 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <Standard_SetInterface+0x88>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	7951      	ldrb	r1, [r2, #5]
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	78d2      	ldrb	r2, [r2, #3]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4798      	blx	r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]

  if (pInformation->Current_Configuration != 0)
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	7a9b      	ldrb	r3, [r3, #10]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d025      	beq.n	8002c2c <Standard_SetInterface+0x78>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <Standard_SetInterface+0x46>
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	791b      	ldrb	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <Standard_SetInterface+0x46>
        || (pInformation->USBwValue1 != 0))
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	789b      	ldrb	r3, [r3, #2]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <Standard_SetInterface+0x4c>
    {
      return  USB_UNSUPPORT;
 8002bfa:	f04f 0302 	mov.w	r3, #2
 8002bfe:	e017      	b.n	8002c30 <Standard_SetInterface+0x7c>
    }
    else if (Re == USB_SUCCESS)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d112      	bne.n	8002c2c <Standard_SetInterface+0x78>
    {
      pUser_Standard_Requests->User_SetInterface();
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <Standard_SetInterface+0x90>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	7952      	ldrb	r2, [r2, #5]
 8002c18:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <Standard_SetInterface+0x8c>)
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	78d2      	ldrb	r2, [r2, #3]
 8002c24:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e001      	b.n	8002c30 <Standard_SetInterface+0x7c>
    }

  }

  return USB_UNSUPPORT;
 8002c2c:	f04f 0302 	mov.w	r3, #2
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	f107 0708 	add.w	r7, r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000ea8 	.word	0x20000ea8
 8002c40:	20000ed0 	.word	0x20000ed0
 8002c44:	20000ecc 	.word	0x20000ecc

08002c48 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d107      	bne.n	8002c68 <Standard_GetStatus+0x20>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <Standard_GetStatus+0x138>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f04f 0202 	mov.w	r2, #2
 8002c60:	821a      	strh	r2, [r3, #16]
    return 0;
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e086      	b.n	8002d76 <Standard_GetStatus+0x12e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8002c68:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <Standard_GetStatus+0x138>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d12c      	bne.n	8002cd8 <Standard_GetStatus+0x90>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8002c7e:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <Standard_GetStatus+0x138>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	7a5b      	ldrb	r3, [r3, #9]
 8002c84:	73fb      	strb	r3, [r7, #15]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <Standard_GetStatus+0x58>
    {
      SetBit(StatusInfo0, 1);
 8002c90:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e006      	b.n	8002cae <Standard_GetStatus+0x66>
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 8002ca0:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f023 0302 	bic.w	r3, r3, #2
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002cac:	701a      	strb	r2, [r3, #0]
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <Standard_GetStatus+0x80>
    {
      SetBit(StatusInfo0, 0);
 8002cb8:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e051      	b.n	8002d6c <Standard_GetStatus+0x124>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	e049      	b.n	8002d6c <Standard_GetStatus+0x124>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <Standard_GetStatus+0x138>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <Standard_GetStatus+0xa2>
  {
    return (uint8_t *)&StatusInfo;
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002ce8:	e045      	b.n	8002d76 <Standard_GetStatus+0x12e>
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002cea:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <Standard_GetStatus+0x138>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d136      	bne.n	8002d66 <Standard_GetStatus+0x11e>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <Standard_GetStatus+0x138>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	795b      	ldrb	r3, [r3, #5]
 8002cfe:	73bb      	strb	r3, [r7, #14]

    Related_Endpoint = (wIndex0 & 0x0f);
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	737b      	strb	r3, [r7, #13]
    if (ValBit(wIndex0, 7))
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da14      	bge.n	8002d3a <Standard_GetStatus+0xf2>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8002d10:	7b7b      	ldrb	r3, [r7, #13]
 8002d12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d1a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d120      	bne.n	8002d6c <Standard_GetStatus+0x124>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e018      	b.n	8002d6c <Standard_GetStatus+0x124>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8002d3a:	7b7b      	ldrb	r3, [r7, #13]
 8002d3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d44:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d10a      	bne.n	8002d6c <Standard_GetStatus+0x124>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <Standard_GetStatus+0x13c>)
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e002      	b.n	8002d6c <Standard_GetStatus+0x124>
    }

  }
  else
  {
    return NULL;
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e004      	b.n	8002d76 <Standard_GetStatus+0x12e>
  }
  pUser_Standard_Requests->User_GetStatus();
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <Standard_GetStatus+0x140>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <Standard_GetStatus+0x13c>)
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	f107 0710 	add.w	r7, r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000ed0 	.word	0x20000ed0
 8002d84:	20000ea0 	.word	0x20000ea0
 8002d88:	20000ecc 	.word	0x20000ecc

08002d8c <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
  uint32_t     Type_Rec = Type_Recipient;
 8002d92:	4b78      	ldr	r3, [pc, #480]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d9c:	613b      	str	r3, [r7, #16]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <Standard_ClearFeature+0x30>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	7a52      	ldrb	r2, [r2, #9]
 8002dae:	f022 0220 	bic.w	r2, r2, #32
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e0d5      	b.n	8002f68 <Standard_ClearFeature+0x1dc>
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	f040 80d0 	bne.w	8002f64 <Standard_ClearFeature+0x1d8>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8002dc4:	4b6b      	ldr	r3, [pc, #428]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	885b      	ldrh	r3, [r3, #2]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <Standard_ClearFeature+0x4c>
        || (pInformation->USBwIndex1 != 0))
 8002dce:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <Standard_ClearFeature+0x52>
    {
      return USB_UNSUPPORT;
 8002dd8:	f04f 0302 	mov.w	r3, #2
 8002ddc:	e0c4      	b.n	8002f68 <Standard_ClearFeature+0x1dc>
    }

    pDev = &Device_Table;
 8002dde:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <Standard_ClearFeature+0x1ec>)
 8002de0:	60fb      	str	r3, [r7, #12]
    wIndex0 = pInformation->USBwIndex0;
 8002de2:	4b64      	ldr	r3, [pc, #400]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	795b      	ldrb	r3, [r3, #5]
 8002de8:	60bb      	str	r3, [r7, #8]
    rEP = wIndex0 & ~0x80;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002df0:	607b      	str	r3, [r7, #4]
    Related_Endpoint = ENDP0 + rEP;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
 8002df6:	4b5f      	ldr	r3, [pc, #380]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	795b      	ldrb	r3, [r3, #5]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da0c      	bge.n	8002e1e <Standard_ClearFeature+0x92>
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e0e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e00b      	b.n	8002e36 <Standard_ClearFeature+0xaa>
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e28:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e34:	617b      	str	r3, [r7, #20]
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d907      	bls.n	8002e52 <Standard_ClearFeature+0xc6>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <Standard_ClearFeature+0xc6>
        || (pInformation->Current_Configuration == 0))
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <Standard_ClearFeature+0x1e8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	7a9b      	ldrb	r3, [r3, #10]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <Standard_ClearFeature+0xcc>
    {
      return USB_UNSUPPORT;
 8002e52:	f04f 0302 	mov.w	r3, #2
 8002e56:	e087      	b.n	8002f68 <Standard_ClearFeature+0x1dc>
    }


    if (wIndex0 & 0x80)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d019      	beq.n	8002e96 <Standard_ClearFeature+0x10a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e6c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d16c      	bne.n	8002f56 <Standard_ClearFeature+0x1ca>
      {
      #ifndef STM32F10X_CL
        ClearDTOG_TX(Related_Endpoint);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f001 fa13 	bl	80042ac <ClearDTOG_TX>
      #endif /* STM32F10X_CL */
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f04f 0130 	mov.w	r1, #48	; 0x30
 8002e90:	f001 f8e2 	bl	8004058 <SetEPTxStatus>
 8002e94:	e05f      	b.n	8002f56 <Standard_ClearFeature+0x1ca>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb0:	d151      	bne.n	8002f56 <Standard_ClearFeature+0x1ca>
      {
        if (Related_Endpoint == ENDP0)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d129      	bne.n	8002f0c <Standard_ClearFeature+0x180>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <Standard_ClearFeature+0x1f0>)
 8002ebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f001 fac5 	bl	8004454 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ed4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	b29c      	uxth	r4, r3
 8002ee6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002eea:	b29c      	uxth	r4, r3
 8002eec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ef0:	b29c      	uxth	r4, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002efc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002f00:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <Standard_ClearFeature+0x1f4>)
 8002f02:	ea44 0202 	orr.w	r2, r4, r2
 8002f06:	b292      	uxth	r2, r2
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e024      	b.n	8002f56 <Standard_ClearFeature+0x1ca>
        }
        else
        {
        #ifndef STM32F10X_CL
          ClearDTOG_RX(Related_Endpoint);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 f999 	bl	8004248 <ClearDTOG_RX>
        #endif /* STM32F10X_CL */
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f20:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	b29c      	uxth	r4, r3
 8002f32:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002f36:	b29c      	uxth	r4, r3
 8002f38:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002f3c:	b29c      	uxth	r4, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f48:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002f4c:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <Standard_ClearFeature+0x1f4>)
 8002f4e:	ea44 0202 	orr.w	r2, r4, r2
 8002f52:	b292      	uxth	r2, r2
 8002f54:	601a      	str	r2, [r3, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <Standard_ClearFeature+0x1f8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	4798      	blx	r3
    return USB_SUCCESS;
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e001      	b.n	8002f68 <Standard_ClearFeature+0x1dc>
  }

  return USB_UNSUPPORT;
 8002f64:	f04f 0302 	mov.w	r3, #2
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f107 071c 	add.w	r7, r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000ed0 	.word	0x20000ed0
 8002f78:	2000005c 	.word	0x2000005c
 8002f7c:	20000060 	.word	0x20000060
 8002f80:	ffff8080 	.word	0xffff8080
 8002f84:	20000ecc 	.word	0x20000ecc

08002f88 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8002f8e:	4b45      	ldr	r3, [pc, #276]	; (80030a4 <Standard_SetEndPointFeature+0x11c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	795b      	ldrb	r3, [r3, #5]
 8002f94:	60bb      	str	r3, [r7, #8]
  rEP = wIndex0 & ~0x80;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9c:	607b      	str	r3, [r7, #4]
  Related_Endpoint = ENDP0 + rEP;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
 8002fa2:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <Standard_SetEndPointFeature+0x11c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	795b      	ldrb	r3, [r3, #5]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da0c      	bge.n	8002fca <Standard_SetEndPointFeature+0x42>
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fba:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e00b      	b.n	8002fe2 <Standard_SetEndPointFeature+0x5a>
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <Standard_SetEndPointFeature+0x120>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d90c      	bls.n	8003008 <Standard_SetEndPointFeature+0x80>
      || pInformation->USBwValue != 0 || Status == 0
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <Standard_SetEndPointFeature+0x11c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	885b      	ldrh	r3, [r3, #2]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <Standard_SetEndPointFeature+0x80>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <Standard_SetEndPointFeature+0x80>
      || pInformation->Current_Configuration == 0)
 8002ffe:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <Standard_SetEndPointFeature+0x11c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	7a9b      	ldrb	r3, [r3, #10]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <Standard_SetEndPointFeature+0x86>
  {
    return USB_UNSUPPORT;
 8003008:	f04f 0302 	mov.w	r3, #2
 800300c:	e045      	b.n	800309a <Standard_SetEndPointFeature+0x112>
  }
  else
  {
    if (wIndex0 & 0x80)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01d      	beq.n	8003054 <Standard_SetEndPointFeature+0xcc>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800301e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003022:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003032:	b29c      	uxth	r4, r3
 8003034:	f084 0310 	eor.w	r3, r4, #16
 8003038:	b29c      	uxth	r4, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003040:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003044:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <Standard_SetEndPointFeature+0x124>)
 800304a:	ea44 0202 	orr.w	r2, r4, r2
 800304e:	b292      	uxth	r2, r2
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e01c      	b.n	800308e <Standard_SetEndPointFeature+0x106>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800305a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800305e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	b29c      	uxth	r4, r3
 8003070:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003074:	b29c      	uxth	r4, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800307c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003080:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <Standard_SetEndPointFeature+0x124>)
 8003086:	ea44 0202 	orr.w	r2, r4, r2
 800308a:	b292      	uxth	r2, r2
 800308c:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <Standard_SetEndPointFeature+0x128>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4798      	blx	r3
  return USB_SUCCESS;
 8003096:	f04f 0300 	mov.w	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	f107 0714 	add.w	r7, r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	20000ed0 	.word	0x20000ed0
 80030a8:	2000005c 	.word	0x2000005c
 80030ac:	ffff8080 	.word	0xffff8080
 80030b0:	20000ecc 	.word	0x20000ecc

080030b4 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  SetBit(pInformation->Current_Feature, 5);
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <Standard_SetDeviceFeature+0x28>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a07      	ldr	r2, [pc, #28]	; (80030dc <Standard_SetDeviceFeature+0x28>)
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	7a52      	ldrb	r2, [r2, #9]
 80030c2:	f042 0220 	orr.w	r2, r2, #32
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <Standard_SetDeviceFeature+0x2c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	4798      	blx	r3
  return USB_SUCCESS;
 80030d2:	f04f 0300 	mov.w	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000ed0 	.word	0x20000ed0
 80030e0:	20000ecc 	.word	0x20000ecc

080030e4 <Standard_GetDescriptorData>:
* Return         : Address of a part of the descriptor pointed by the Usb_
*                  wOffset The buffer pointed by this address contains at least
*                  Length bytes.
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	80fb      	strh	r3, [r7, #6]
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <Standard_GetDescriptorData+0x48>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	8a5b      	ldrh	r3, [r3, #18]
 80030f6:	60fb      	str	r3, [r7, #12]
  if (Length == 0)
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <Standard_GetDescriptorData+0x32>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <Standard_GetDescriptorData+0x48>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	8891      	ldrh	r1, [r2, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	b292      	uxth	r2, r2
 800310a:	1a8a      	subs	r2, r1, r2
 800310c:	b292      	uxth	r2, r2
 800310e:	821a      	strh	r2, [r3, #16]
    return 0;
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e003      	b.n	800311e <Standard_GetDescriptorData+0x3a>
  }

  return pDesc->Descriptor + wOffset;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	18d3      	adds	r3, r2, r3
}
 800311e:	4618      	mov	r0, r3
 8003120:	f107 0714 	add.w	r7, r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000ed0 	.word	0x20000ed0

08003130 <DataStageOut>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageOut(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003136:	4b40      	ldr	r3, [pc, #256]	; (8003238 <DataStageOut+0x108>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f103 0310 	add.w	r3, r3, #16
 800313e:	60bb      	str	r3, [r7, #8]
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	607b      	str	r3, [r7, #4]

  if (pEPinfo->CopyData && save_rLength)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d02f      	beq.n	80031ae <DataStageOut+0x7e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d02c      	beq.n	80031ae <DataStageOut+0x7e>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	60fb      	str	r3, [r7, #12]
    if (Length > save_rLength)
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d901      	bls.n	8003166 <DataStageOut+0x36>
    {
      Length = save_rLength;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60fb      	str	r3, [r7, #12]
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	b292      	uxth	r2, r2
 800316e:	4610      	mov	r0, r2
 8003170:	4798      	blx	r3
 8003172:	6038      	str	r0, [r7, #0]
    pEPinfo->Usb_rLength -= Length;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	b29b      	uxth	r3, r3
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	b29a      	uxth	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	801a      	strh	r2, [r3, #0]
    pEPinfo->Usb_rOffset += Length;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	885a      	ldrh	r2, [r3, #2]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	b29b      	uxth	r3, r3
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	b29a      	uxth	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	805a      	strh	r2, [r3, #2]

  #ifdef STM32F10X_CL  
    PCD_EP_Read(ENDP0, Buffer, Length); 
  #else  
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f001 f920 	bl	80043dc <GetEPRxAddr>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 fee3 	bl	8003f74 <PMAToUserBufferCopy>
  #endif  /* STM32F10X_CL */
  }

  if (pEPinfo->Usb_rLength != 0)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <DataStageOut+0xa2>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 80031b6:	4b21      	ldr	r3, [pc, #132]	; (800323c <DataStageOut+0x10c>)
 80031b8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80031bc:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	f001 f927 	bl	8004418 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 80031ca:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <DataStageOut+0x110>)
 80031cc:	f04f 0230 	mov.w	r2, #48	; 0x30
 80031d0:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	881a      	ldrh	r2, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	889b      	ldrh	r3, [r3, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d305      	bcc.n	80031ea <DataStageOut+0xba>
  {
    pInformation->ControlState = OUT_DATA;
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <DataStageOut+0x108>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f04f 0203 	mov.w	r2, #3
 80031e6:	721a      	strb	r2, [r3, #8]
 80031e8:	e021      	b.n	800322e <DataStageOut+0xfe>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <DataStageOut+0xce>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <DataStageOut+0x108>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f04f 0205 	mov.w	r2, #5
 80031fa:	721a      	strb	r2, [r3, #8]
 80031fc:	e017      	b.n	800322e <DataStageOut+0xfe>
    }
    else if (pEPinfo->Usb_rLength == 0)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d113      	bne.n	800322e <DataStageOut+0xfe>
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <DataStageOut+0x108>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f04f 0206 	mov.w	r2, #6
 800320e:	721a      	strb	r2, [r3, #8]
      USB_StatusIn();
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <DataStageOut+0x114>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <DataStageOut+0x118>)
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <DataStageOut+0x110>)
 8003228:	f04f 0230 	mov.w	r2, #48	; 0x30
 800322c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800322e:	f107 0710 	add.w	r7, r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000ed0 	.word	0x20000ed0
 800323c:	20000ed6 	.word	0x20000ed6
 8003240:	20000ed8 	.word	0x20000ed8
 8003244:	40005c50 	.word	0x40005c50
 8003248:	20003002 	.word	0x20003002

0800324c <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8003252:	4b42      	ldr	r3, [pc, #264]	; (800335c <DataStageIn+0x110>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f103 0310 	add.w	r3, r3, #16
 800325a:	60fb      	str	r3, [r7, #12]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	60bb      	str	r3, [r7, #8]
  uint32_t ControlState = pInformation->ControlState;
 8003262:	4b3e      	ldr	r3, [pc, #248]	; (800335c <DataStageIn+0x110>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	7a1b      	ldrb	r3, [r3, #8]
 8003268:	617b      	str	r3, [r7, #20]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d125      	bne.n	80032bc <DataStageIn+0x70>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b04      	cmp	r3, #4
 8003274:	d122      	bne.n	80032bc <DataStageIn+0x70>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8003276:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <DataStageIn+0x114>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d116      	bne.n	80032ac <DataStageIn+0x60>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <DataStageIn+0x118>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4b38      	ldr	r3, [pc, #224]	; (8003368 <DataStageIn+0x11c>)
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <DataStageIn+0x120>)
 8003296:	f04f 0230 	mov.w	r2, #48	; 0x30
 800329a:	801a      	strh	r2, [r3, #0]
      ControlState = LAST_IN_DATA;
 800329c:	f04f 0304 	mov.w	r3, #4
 80032a0:	617b      	str	r3, [r7, #20]
      Data_Mul_MaxPacketSize = FALSE;
 80032a2:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <DataStageIn+0x114>)
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
    #ifndef STM32F10X_CL 
      vSetEPTxStatus(EP_TX_STALL);
    #endif  /* STM32F10X_CL */ 
    }
    
    goto Expect_Status_Out;
 80032aa:	e04d      	b.n	8003348 <DataStageIn+0xfc>
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80032ac:	f04f 0307 	mov.w	r3, #7
 80032b0:	617b      	str	r3, [r7, #20]
    #ifdef STM32F10X_CL      
      PCD_EP_Read (ENDP0, 0, 0);
    #endif  /* STM32F10X_CL */ 
    
    #ifndef STM32F10X_CL 
      vSetEPTxStatus(EP_TX_STALL);
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <DataStageIn+0x120>)
 80032b4:	f04f 0210 	mov.w	r2, #16
 80032b8:	801a      	strh	r2, [r3, #0]
    #endif  /* STM32F10X_CL */ 
    }
    
    goto Expect_Status_Out;
 80032ba:	e045      	b.n	8003348 <DataStageIn+0xfc>
  }

  Length = pEPinfo->PacketSize;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	889b      	ldrh	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d802      	bhi.n	80032d0 <DataStageIn+0x84>
 80032ca:	f04f 0304 	mov.w	r3, #4
 80032ce:	e001      	b.n	80032d4 <DataStageIn+0x88>
 80032d0:	f04f 0302 	mov.w	r3, #2
 80032d4:	617b      	str	r3, [r7, #20]

  if (Length > save_wLength)
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d901      	bls.n	80032e2 <DataStageIn+0x96>
  {
    Length = save_wLength;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	613b      	str	r3, [r7, #16]
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	b292      	uxth	r2, r2
 80032ea:	4610      	mov	r0, r2
 80032ec:	4798      	blx	r3
 80032ee:	6078      	str	r0, [r7, #4]

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f001 f854 	bl	80043a0 <GetEPTxAddr>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	f000 fdef 	bl	8003ee8 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f04f 0000 	mov.w	r0, #0
 8003312:	4619      	mov	r1, r3
 8003314:	f001 f880 	bl	8004418 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	b29b      	uxth	r3, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	801a      	strh	r2, [r3, #0]
  pEPinfo->Usb_wOffset += Length;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	885a      	ldrh	r2, [r3, #2]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	b29b      	uxth	r3, r3
 8003330:	18d3      	adds	r3, r2, r3
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	805a      	strh	r2, [r3, #2]
  vSetEPTxStatus(EP_TX_VALID);
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <DataStageIn+0x120>)
 800333a:	f04f 0230 	mov.w	r2, #48	; 0x30
 800333e:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <DataStageIn+0x124>)
 8003342:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003346:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <DataStageIn+0x110>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	721a      	strb	r2, [r3, #8]
}
 8003352:	f107 0718 	add.w	r7, r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000ed0 	.word	0x20000ed0
 8003360:	20000610 	.word	0x20000610
 8003364:	40005c50 	.word	0x40005c50
 8003368:	20003002 	.word	0x20003002
 800336c:	20000ed8 	.word	0x20000ed8
 8003370:	20000ed6 	.word	0x20000ed6

08003374 <NoData_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
  RESULT Result = USB_UNSUPPORT;
 800337a:	f04f 0302 	mov.w	r3, #2
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t RequestNo = pInformation->USBbRequest;
 8003380:	4b63      	ldr	r3, [pc, #396]	; (8003510 <NoData_Setup0+0x19c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	607b      	str	r3, [r7, #4]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003388:	4b61      	ldr	r3, [pc, #388]	; (8003510 <NoData_Setup0+0x19c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003392:	2b00      	cmp	r3, #0
 8003394:	d15b      	bne.n	800344e <NoData_Setup0+0xda>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b09      	cmp	r3, #9
 800339a:	d104      	bne.n	80033a6 <NoData_Setup0+0x32>
    {
      Result = Standard_SetConfiguration();
 800339c:	f7ff fbbe 	bl	8002b1c <Standard_SetConfiguration>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 80033a4:	e07e      	b.n	80034a4 <NoData_Setup0+0x130>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d11d      	bne.n	80033e8 <NoData_Setup0+0x74>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80033ac:	4b58      	ldr	r3, [pc, #352]	; (8003510 <NoData_Setup0+0x19c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	78db      	ldrb	r3, [r3, #3]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0e      	blt.n	80033d8 <NoData_Setup0+0x64>
 80033ba:	4b55      	ldr	r3, [pc, #340]	; (8003510 <NoData_Setup0+0x19c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	789b      	ldrb	r3, [r3, #2]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <NoData_Setup0+0x64>
          || (pInformation->USBwIndex != 0)
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <NoData_Setup0+0x19c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	889b      	ldrh	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <NoData_Setup0+0x64>
          || (pInformation->Current_Configuration != 0))
 80033ce:	4b50      	ldr	r3, [pc, #320]	; (8003510 <NoData_Setup0+0x19c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	7a9b      	ldrb	r3, [r3, #10]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <NoData_Setup0+0x6c>
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 80033d8:	f04f 0308 	mov.w	r3, #8
 80033dc:	60bb      	str	r3, [r7, #8]
        goto exit_NoData_Setup0;
 80033de:	e08d      	b.n	80034fc <NoData_Setup0+0x188>
      }
      else
      {
        Result = USB_SUCCESS;
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 80033e6:	e05d      	b.n	80034a4 <NoData_Setup0+0x130>
         SetDeviceAddress(pInformation->USBwValue0);
      #endif  /* STM32F10X_CL */
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d112      	bne.n	8003414 <NoData_Setup0+0xa0>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 80033ee:	4b48      	ldr	r3, [pc, #288]	; (8003510 <NoData_Setup0+0x19c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	78db      	ldrb	r3, [r3, #3]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d109      	bne.n	800340c <NoData_Setup0+0x98>
          && (pInformation->USBwIndex == 0))
 80033f8:	4b45      	ldr	r3, [pc, #276]	; (8003510 <NoData_Setup0+0x19c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	889b      	ldrh	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <NoData_Setup0+0x98>
      {
        Result = Standard_SetDeviceFeature();
 8003402:	f7ff fe57 	bl	80030b4 <Standard_SetDeviceFeature>
 8003406:	4603      	mov	r3, r0
 8003408:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800340a:	e04b      	b.n	80034a4 <NoData_Setup0+0x130>
      {
        Result = Standard_SetDeviceFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800340c:	f04f 0302 	mov.w	r3, #2
 8003410:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 8003412:	e047      	b.n	80034a4 <NoData_Setup0+0x130>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d143      	bne.n	80034a2 <NoData_Setup0+0x12e>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <NoData_Setup0+0x19c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	78db      	ldrb	r3, [r3, #3]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d110      	bne.n	8003446 <NoData_Setup0+0xd2>
          && pInformation->USBwIndex == 0
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <NoData_Setup0+0x19c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	889b      	ldrh	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <NoData_Setup0+0xd2>
          && ValBit(pInformation->Current_Feature, 5))
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <NoData_Setup0+0x19c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	7a5b      	ldrb	r3, [r3, #9]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <NoData_Setup0+0xd2>
      {
        Result = Standard_ClearFeature();
 800343c:	f7ff fca6 	bl	8002d8c <Standard_ClearFeature>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e02e      	b.n	80034a4 <NoData_Setup0+0x130>
      }
      else
      {
        Result = USB_UNSUPPORT;
 8003446:	f04f 0302 	mov.w	r3, #2
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e02a      	b.n	80034a4 <NoData_Setup0+0x130>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800344e:	4b30      	ldr	r3, [pc, #192]	; (8003510 <NoData_Setup0+0x19c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <NoData_Setup0+0xf8>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b0b      	cmp	r3, #11
 8003460:	d120      	bne.n	80034a4 <NoData_Setup0+0x130>
    {
      Result = Standard_SetInterface();
 8003462:	f7ff fba7 	bl	8002bb4 <Standard_SetInterface>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e01b      	b.n	80034a4 <NoData_Setup0+0x130>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <NoData_Setup0+0x19c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003476:	2b02      	cmp	r3, #2
 8003478:	d10f      	bne.n	800349a <NoData_Setup0+0x126>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d104      	bne.n	800348a <NoData_Setup0+0x116>
    {
      Result = Standard_ClearFeature();
 8003480:	f7ff fc84 	bl	8002d8c <Standard_ClearFeature>
 8003484:	4603      	mov	r3, r0
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	e00c      	b.n	80034a4 <NoData_Setup0+0x130>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d109      	bne.n	80034a4 <NoData_Setup0+0x130>
    {
      Result = Standard_SetEndPointFeature();
 8003490:	f7ff fd7a 	bl	8002f88 <Standard_SetEndPointFeature>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	e004      	b.n	80034a4 <NoData_Setup0+0x130>
    }
  }
  else
  {
    Result = USB_UNSUPPORT;
 800349a:	f04f 0302 	mov.w	r3, #2
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e000      	b.n	80034a4 <NoData_Setup0+0x130>
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 80034a2:	bf00      	nop
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00f      	beq.n	80034ca <NoData_Setup0+0x156>
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <NoData_Setup0+0x1a0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	4610      	mov	r0, r2
 80034b6:	4798      	blx	r3
 80034b8:	4603      	mov	r3, r0
 80034ba:	73fb      	strb	r3, [r7, #15]
    if (Result == USB_NOT_READY)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d103      	bne.n	80034ca <NoData_Setup0+0x156>
    {
      ControlState = PAUSE;
 80034c2:	f04f 0309 	mov.w	r3, #9
 80034c6:	60bb      	str	r3, [r7, #8]
      goto exit_NoData_Setup0;
 80034c8:	e018      	b.n	80034fc <NoData_Setup0+0x188>
    }
  }

  if (Result != USB_SUCCESS)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <NoData_Setup0+0x164>
  {
    ControlState = STALLED;
 80034d0:	f04f 0308 	mov.w	r3, #8
 80034d4:	60bb      	str	r3, [r7, #8]
    goto exit_NoData_Setup0;
 80034d6:	e011      	b.n	80034fc <NoData_Setup0+0x188>
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 80034d8:	f04f 0306 	mov.w	r3, #6
 80034dc:	60bb      	str	r3, [r7, #8]

  USB_StatusIn();
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <NoData_Setup0+0x1a4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <NoData_Setup0+0x1a8>)
 80034e8:	18d3      	adds	r3, r2, r3
 80034ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <NoData_Setup0+0x1ac>)
 80034f6:	f04f 0230 	mov.w	r2, #48	; 0x30
 80034fa:	801a      	strh	r2, [r3, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <NoData_Setup0+0x19c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	721a      	strb	r2, [r3, #8]
  return;
}
 8003506:	f107 0710 	add.w	r7, r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000ed0 	.word	0x20000ed0
 8003514:	20000ea8 	.word	0x20000ea8
 8003518:	40005c50 	.word	0x40005c50
 800351c:	20003002 	.word	0x20003002
 8003520:	20000ed8 	.word	0x20000ed8

08003524 <Data_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Data_Setup0(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800352a:	4b87      	ldr	r3, [pc, #540]	; (8003748 <Data_Setup0+0x224>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	785b      	ldrb	r3, [r3, #1]
 8003530:	61bb      	str	r3, [r7, #24]
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  wOffset = 0;
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	617b      	str	r3, [r7, #20]

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b06      	cmp	r3, #6
 8003542:	d124      	bne.n	800358e <Data_Setup0+0x6a>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003544:	4b80      	ldr	r3, [pc, #512]	; (8003748 <Data_Setup0+0x224>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 80e4 	bne.w	800371c <Data_Setup0+0x1f8>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8003554:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <Data_Setup0+0x224>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	789b      	ldrb	r3, [r3, #2]
 800355a:	74fb      	strb	r3, [r7, #19]
      if (wValue1 == DEVICE_DESCRIPTOR)
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d104      	bne.n	800356c <Data_Setup0+0x48>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8003562:	4b7a      	ldr	r3, [pc, #488]	; (800374c <Data_Setup0+0x228>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e0d7      	b.n	800371c <Data_Setup0+0x1f8>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d104      	bne.n	800357c <Data_Setup0+0x58>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8003572:	4b76      	ldr	r3, [pc, #472]	; (800374c <Data_Setup0+0x228>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e0cf      	b.n	800371c <Data_Setup0+0x1f8>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	2b03      	cmp	r3, #3
 8003580:	f040 80cc 	bne.w	800371c <Data_Setup0+0x1f8>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8003584:	4b71      	ldr	r3, [pc, #452]	; (800374c <Data_Setup0+0x228>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	e0c6      	b.n	800371c <Data_Setup0+0x1f8>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d17d      	bne.n	8003690 <Data_Setup0+0x16c>
 8003594:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <Data_Setup0+0x224>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	885b      	ldrh	r3, [r3, #2]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d178      	bne.n	8003690 <Data_Setup0+0x16c>
           && (pInformation->USBwLength == 0x0002)
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <Data_Setup0+0x224>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	88db      	ldrh	r3, [r3, #6]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d173      	bne.n	8003690 <Data_Setup0+0x16c>
           && (pInformation->USBwIndex1 == 0))
 80035a8:	4b67      	ldr	r3, [pc, #412]	; (8003748 <Data_Setup0+0x224>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	791b      	ldrb	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d16e      	bne.n	8003690 <Data_Setup0+0x16c>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <Data_Setup0+0x224>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <Data_Setup0+0xac>
        && (pInformation->USBwIndex == 0))
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <Data_Setup0+0x224>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	889b      	ldrh	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <Data_Setup0+0xac>
    {
      CopyRoutine = Standard_GetStatus;
 80035ca:	4b61      	ldr	r3, [pc, #388]	; (8003750 <Data_Setup0+0x22c>)
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80035ce:	e0a5      	b.n	800371c <Data_Setup0+0x1f8>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80035d0:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <Data_Setup0+0x224>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d116      	bne.n	800360c <Data_Setup0+0xe8>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <Data_Setup0+0x228>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <Data_Setup0+0x224>)
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	7952      	ldrb	r2, [r2, #5]
 80035ea:	4610      	mov	r0, r2
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	4798      	blx	r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 8086 	bne.w	8003706 <Data_Setup0+0x1e2>
          && (pInformation->Current_Configuration != 0))
 80035fa:	4b53      	ldr	r3, [pc, #332]	; (8003748 <Data_Setup0+0x224>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	7a9b      	ldrb	r3, [r3, #10]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8082 	beq.w	800370a <Data_Setup0+0x1e6>
      {
        CopyRoutine = Standard_GetStatus;
 8003606:	4b52      	ldr	r3, [pc, #328]	; (8003750 <Data_Setup0+0x22c>)
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800360a:	e087      	b.n	800371c <Data_Setup0+0x1f8>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800360c:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <Data_Setup0+0x224>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003616:	2b02      	cmp	r3, #2
 8003618:	d179      	bne.n	800370e <Data_Setup0+0x1ea>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800361a:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <Data_Setup0+0x224>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	795b      	ldrb	r3, [r3, #5]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	60fb      	str	r3, [r7, #12]
      Reserved = pInformation->USBwIndex0 & 0x70;
 8003626:	4b48      	ldr	r3, [pc, #288]	; (8003748 <Data_Setup0+0x224>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	795b      	ldrb	r3, [r3, #5]
 800362c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003630:	60bb      	str	r3, [r7, #8]

      if (ValBit(pInformation->USBwIndex0, 7))
 8003632:	4b45      	ldr	r3, [pc, #276]	; (8003748 <Data_Setup0+0x224>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	795b      	ldrb	r3, [r3, #5]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	b25b      	sxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	da0c      	bge.n	800365a <Data_Setup0+0x136>
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003646:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800364a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e00b      	b.n	8003672 <Data_Setup0+0x14e>
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003660:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003664:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	b29b      	uxth	r3, r3
 800366c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003670:	61fb      	str	r3, [r7, #28]
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <Data_Setup0+0x230>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	429a      	cmp	r2, r3
 800367c:	d949      	bls.n	8003712 <Data_Setup0+0x1ee>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d148      	bne.n	8003716 <Data_Setup0+0x1f2>
          && (Status != 0))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d047      	beq.n	800371a <Data_Setup0+0x1f6>
      {
        CopyRoutine = Standard_GetStatus;
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <Data_Setup0+0x22c>)
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800368e:	e045      	b.n	800371c <Data_Setup0+0x1f8>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d109      	bne.n	80036aa <Data_Setup0+0x186>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <Data_Setup0+0x224>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d13b      	bne.n	800371c <Data_Setup0+0x1f8>
    {
      CopyRoutine = Standard_GetConfiguration;
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <Data_Setup0+0x234>)
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
 80036a8:	e038      	b.n	800371c <Data_Setup0+0x1f8>
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b0a      	cmp	r3, #10
 80036ae:	d135      	bne.n	800371c <Data_Setup0+0x1f8>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <Data_Setup0+0x224>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d12e      	bne.n	800371c <Data_Setup0+0x1f8>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <Data_Setup0+0x224>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	7a9b      	ldrb	r3, [r3, #10]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d029      	beq.n	800371c <Data_Setup0+0x1f8>
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <Data_Setup0+0x224>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	885b      	ldrh	r3, [r3, #2]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d124      	bne.n	800371c <Data_Setup0+0x1f8>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <Data_Setup0+0x224>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	791b      	ldrb	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11f      	bne.n	800371c <Data_Setup0+0x1f8>
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <Data_Setup0+0x224>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	88db      	ldrh	r3, [r3, #6]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d11a      	bne.n	800371c <Data_Setup0+0x1f8>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <Data_Setup0+0x228>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <Data_Setup0+0x224>)
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	7952      	ldrb	r2, [r2, #5]
 80036f2:	4610      	mov	r0, r2
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	4798      	blx	r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <Data_Setup0+0x1f8>
    {
      CopyRoutine = Standard_GetInterface;
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <Data_Setup0+0x238>)
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	e00a      	b.n	800371c <Data_Setup0+0x1f8>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8003706:	bf00      	nop
 8003708:	e008      	b.n	800371c <Data_Setup0+0x1f8>
 800370a:	bf00      	nop
 800370c:	e006      	b.n	800371c <Data_Setup0+0x1f8>
 800370e:	bf00      	nop
 8003710:	e004      	b.n	800371c <Data_Setup0+0x1f8>
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <Data_Setup0+0x1f8>
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <Data_Setup0+0x1f8>
 800371a:	bf00      	nop
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01e      	beq.n	8003760 <Data_Setup0+0x23c>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <Data_Setup0+0x224>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	b292      	uxth	r2, r2
 800372a:	825a      	strh	r2, [r3, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <Data_Setup0+0x224>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	619a      	str	r2, [r3, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f04f 0000 	mov.w	r0, #0
 800373a:	4798      	blx	r3
    Result = USB_SUCCESS;
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003744:	e021      	b.n	800378a <Data_Setup0+0x266>
 8003746:	bf00      	nop
 8003748:	20000ed0 	.word	0x20000ed0
 800374c:	20000ea8 	.word	0x20000ea8
 8003750:	08002c49 	.word	0x08002c49
 8003754:	2000005c 	.word	0x2000005c
 8003758:	08002ad9 	.word	0x08002ad9
 800375c:	08002b71 	.word	0x08002b71
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8003760:	4b44      	ldr	r3, [pc, #272]	; (8003874 <Data_Setup0+0x350>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	4a44      	ldr	r2, [pc, #272]	; (8003878 <Data_Setup0+0x354>)
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	7852      	ldrb	r2, [r2, #1]
 800376c:	4610      	mov	r0, r2
 800376e:	4798      	blx	r3
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (Result == USB_NOT_READY)
 8003776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800377a:	2b03      	cmp	r3, #3
 800377c:	d105      	bne.n	800378a <Data_Setup0+0x266>
    {
      pInformation->ControlState = PAUSE;
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <Data_Setup0+0x354>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f04f 0209 	mov.w	r2, #9
 8003786:	721a      	strb	r2, [r3, #8]
      return;
 8003788:	e06f      	b.n	800386a <Data_Setup0+0x346>
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <Data_Setup0+0x354>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	8a1a      	ldrh	r2, [r3, #16]
 8003790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003794:	429a      	cmp	r2, r3
 8003796:	d105      	bne.n	80037a4 <Data_Setup0+0x280>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8003798:	4b37      	ldr	r3, [pc, #220]	; (8003878 <Data_Setup0+0x354>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f04f 0209 	mov.w	r2, #9
 80037a0:	721a      	strb	r2, [r3, #8]
    return;
 80037a2:	e062      	b.n	800386a <Data_Setup0+0x346>
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 80037a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d004      	beq.n	80037b6 <Data_Setup0+0x292>
 80037ac:	4b32      	ldr	r3, [pc, #200]	; (8003878 <Data_Setup0+0x354>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	8a1b      	ldrh	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <Data_Setup0+0x29e>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <Data_Setup0+0x354>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f04f 0208 	mov.w	r2, #8
 80037be:	721a      	strb	r2, [r3, #8]
    return;
 80037c0:	e053      	b.n	800386a <Data_Setup0+0x346>
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80037c2:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <Data_Setup0+0x354>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da42      	bge.n	8003856 <Data_Setup0+0x332>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 80037d0:	4b29      	ldr	r3, [pc, #164]	; (8003878 <Data_Setup0+0x354>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	88db      	ldrh	r3, [r3, #6]
 80037d6:	607b      	str	r3, [r7, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <Data_Setup0+0x354>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	8a1b      	ldrh	r3, [r3, #16]
 80037de:	461a      	mov	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d905      	bls.n	80037f2 <Data_Setup0+0x2ce>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <Data_Setup0+0x354>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	b292      	uxth	r2, r2
 80037ee:	821a      	strh	r2, [r3, #16]
 80037f0:	e027      	b.n	8003842 <Data_Setup0+0x31e>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <Data_Setup0+0x354>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	8a1a      	ldrh	r2, [r3, #16]
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <Data_Setup0+0x354>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	88db      	ldrh	r3, [r3, #6]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d21f      	bcs.n	8003842 <Data_Setup0+0x31e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <Data_Setup0+0x354>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	8a1a      	ldrh	r2, [r3, #16]
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <Data_Setup0+0x350>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d204      	bcs.n	800381e <Data_Setup0+0x2fa>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <Data_Setup0+0x358>)
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e011      	b.n	8003842 <Data_Setup0+0x31e>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <Data_Setup0+0x354>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	8a1b      	ldrh	r3, [r3, #16]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <Data_Setup0+0x350>)
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800382c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003830:	fb02 f201 	mul.w	r2, r2, r1
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <Data_Setup0+0x31e>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <Data_Setup0+0x358>)
 800383c:	f04f 0201 	mov.w	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <Data_Setup0+0x354>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a0b      	ldr	r2, [pc, #44]	; (8003874 <Data_Setup0+0x350>)
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800384e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8003850:	f7ff fcfc 	bl	800324c <DataStageIn>
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
  }

  return;
 8003854:	e009      	b.n	800386a <Data_Setup0+0x346>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <Data_Setup0+0x354>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f04f 0203 	mov.w	r2, #3
 800385e:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <Data_Setup0+0x35c>)
 8003862:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003866:	801a      	strh	r2, [r3, #0]
  }

  return;
 8003868:	bf00      	nop
}
 800386a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000ea8 	.word	0x20000ea8
 8003878:	20000ed0 	.word	0x20000ed0
 800387c:	20000610 	.word	0x20000610
 8003880:	20000ed6 	.word	0x20000ed6

08003884 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
  uint16_t offset = 0;
 
  ep = PCD_GetOutEP(ENDP0);
  pBuf.b = ep->xfer_buff;
#else  
  uint16_t offset = 1;
 800388a:	f04f 0301 	mov.w	r3, #1
 800388e:	80fb      	strh	r3, [r7, #6]
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8003890:	4b35      	ldr	r3, [pc, #212]	; (8003968 <Setup0_Process+0xe4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	4b34      	ldr	r3, [pc, #208]	; (800396c <Setup0_Process+0xe8>)
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80038a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80038ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80038b0:	603b      	str	r3, [r7, #0]
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <Setup0_Process+0xec>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	7a1b      	ldrb	r3, [r3, #8]
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	d03e      	beq.n	800393a <Setup0_Process+0xb6>
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <Setup0_Process+0xec>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	7819      	ldrb	r1, [r3, #0]
 80038c4:	7011      	strb	r1, [r2, #0]
 80038c6:	f103 0301 	add.w	r3, r3, #1
 80038ca:	603b      	str	r3, [r7, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <Setup0_Process+0xec>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	7819      	ldrb	r1, [r3, #0]
 80038d4:	7051      	strb	r1, [r2, #1]
 80038d6:	f103 0301 	add.w	r3, r3, #1
 80038da:	603b      	str	r3, [r7, #0]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	603b      	str	r3, [r7, #0]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <Setup0_Process+0xec>)
 80038ea:	681c      	ldr	r4, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	f103 0302 	add.w	r3, r3, #2
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4610      	mov	r0, r2
 80038f8:	f000 fe18 	bl	800452c <ByteSwap>
 80038fc:	4603      	mov	r3, r0
 80038fe:	8063      	strh	r3, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	603b      	str	r3, [r7, #0]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <Setup0_Process+0xec>)
 800390e:	681c      	ldr	r4, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	881a      	ldrh	r2, [r3, #0]
 8003914:	f103 0302 	add.w	r3, r3, #2
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4610      	mov	r0, r2
 800391c:	f000 fe06 	bl	800452c <ByteSwap>
 8003920:	4603      	mov	r3, r0
 8003922:	80a3      	strh	r3, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800392c:	18d3      	adds	r3, r2, r3
 800392e:	603b      	str	r3, [r7, #0]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <Setup0_Process+0xec>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	8812      	ldrh	r2, [r2, #0]
 8003938:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <Setup0_Process+0xec>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f04f 0201 	mov.w	r2, #1
 8003942:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <Setup0_Process+0xec>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	88db      	ldrh	r3, [r3, #6]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <Setup0_Process+0xd0>
  {
    /* Setup with no data stage */
    NoData_Setup0();
 800394e:	f7ff fd11 	bl	8003374 <NoData_Setup0>
 8003952:	e001      	b.n	8003958 <Setup0_Process+0xd4>
  }
  else
  {
    /* Setup with data stage */
    Data_Setup0();
 8003954:	f7ff fde6 	bl	8003524 <Data_Setup0>
  }
  return Post0_Process();
 8003958:	f000 f896 	bl	8003a88 <Post0_Process>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	f107 070c 	add.w	r7, r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	40005c50 	.word	0x40005c50
 800396c:	20003004 	.word	0x20003004
 8003970:	20000ed0 	.word	0x20000ed0

08003974 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <In0_Process+0x8c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	7a1b      	ldrb	r3, [r3, #8]
 8003980:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d002      	beq.n	800398e <In0_Process+0x1a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b04      	cmp	r3, #4
 800398c:	d106      	bne.n	800399c <In0_Process+0x28>
  {
    DataStageIn();
 800398e:	f7ff fc5d 	bl	800324c <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <In0_Process+0x8c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	7a1b      	ldrb	r3, [r3, #8]
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	e023      	b.n	80039e4 <In0_Process+0x70>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d11d      	bne.n	80039de <In0_Process+0x6a>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <In0_Process+0x8c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d110      	bne.n	80039ce <In0_Process+0x5a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <In0_Process+0x8c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <In0_Process+0x5a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <In0_Process+0x8c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	78db      	ldrb	r3, [r3, #3]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f88b 	bl	8003adc <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <In0_Process+0x90>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <In0_Process+0x94>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4798      	blx	r3
    ControlState = STALLED;
 80039d6:	f04f 0308 	mov.w	r3, #8
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	e002      	b.n	80039e4 <In0_Process+0x70>
  }

  else
  {
    ControlState = STALLED;
 80039de:	f04f 0308 	mov.w	r3, #8
 80039e2:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <In0_Process+0x8c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 80039ee:	f000 f84b 	bl	8003a88 <Post0_Process>
 80039f2:	4603      	mov	r3, r0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	f107 0708 	add.w	r7, r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000ed0 	.word	0x20000ed0
 8003a04:	20000ecc 	.word	0x20000ecc
 8003a08:	20000ea8 	.word	0x20000ea8

08003a0c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <Out0_Process+0x74>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	7a1b      	ldrb	r3, [r3, #8]
 8003a18:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d002      	beq.n	8003a26 <Out0_Process+0x1a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d103      	bne.n	8003a2e <Out0_Process+0x22>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8003a26:	f04f 0308 	mov.w	r3, #8
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e01a      	b.n	8003a64 <Out0_Process+0x58>
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d002      	beq.n	8003a3a <Out0_Process+0x2e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	d106      	bne.n	8003a48 <Out0_Process+0x3c>
  {
    DataStageOut();
 8003a3a:	f7ff fb79 	bl	8003130 <DataStageOut>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <Out0_Process+0x74>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	7a1b      	ldrb	r3, [r3, #8]
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	e00d      	b.n	8003a64 <Out0_Process+0x58>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b07      	cmp	r3, #7
 8003a4c:	d107      	bne.n	8003a5e <Out0_Process+0x52>
  {
    (*pProperty->Process_Status_OUT)();
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <Out0_Process+0x78>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4798      	blx	r3
  #ifndef STM32F10X_CL
    ControlState = STALLED;
 8003a56:	f04f 0308 	mov.w	r3, #8
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e002      	b.n	8003a64 <Out0_Process+0x58>


  /* Unexpect state, STALL the endpoint */
  else
  {
    ControlState = STALLED;
 8003a5e:	f04f 0308 	mov.w	r3, #8
 8003a62:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <Out0_Process+0x74>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8003a6e:	f000 f80b 	bl	8003a88 <Post0_Process>
 8003a72:	4603      	mov	r3, r0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	f107 0708 	add.w	r7, r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000ed0 	.word	0x20000ed0
 8003a84:	20000ea8 	.word	0x20000ea8

08003a88 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <Post0_Process+0x44>)
 8003a8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	4619      	mov	r1, r3
 8003a98:	f000 fcdc 	bl	8004454 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <Post0_Process+0x48>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	7a1b      	ldrb	r3, [r3, #8]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d107      	bne.n	8003ab6 <Post0_Process+0x2e>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <Post0_Process+0x4c>)
 8003aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aac:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <Post0_Process+0x50>)
 8003ab0:	f04f 0210 	mov.w	r2, #16
 8003ab4:	801a      	strh	r2, [r3, #0]
    ep->is_in = 1;
    OTGD_FS_EP0StartXfer(ep);    
  }  
#endif /* STM32F10X_CL */

  return (pInformation->ControlState == PAUSE);
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <Post0_Process+0x48>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	7a1b      	ldrb	r3, [r3, #8]
 8003abc:	2b09      	cmp	r3, #9
 8003abe:	bf14      	ite	ne
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000060 	.word	0x20000060
 8003ad0:	20000ed0 	.word	0x20000ed0
 8003ad4:	20000ed6 	.word	0x20000ed6
 8003ad8:	20000ed8 	.word	0x20000ed8

08003adc <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <SetDeviceAddress+0x7c>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	60bb      	str	r3, [r7, #8]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e022      	b.n	8003b3a <SetDeviceAddress+0x5e>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b00:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8003b0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003b10:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	b292      	uxth	r2, r2
 8003b18:	4611      	mov	r1, r2
 8003b1a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003b1e:	ea01 0202 	and.w	r2, r1, r2
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	b2c9      	uxtb	r1, r1
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f103 0301 	add.w	r3, r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3d8      	bcc.n	8003af4 <SetDeviceAddress+0x18>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <SetDeviceAddress+0x80>)
 8003b44:	79fa      	ldrb	r2, [r7, #7]
 8003b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	601a      	str	r2, [r3, #0]
#endif  /* STM32F10X_CL */  
}
 8003b4e:	f107 0714 	add.w	r7, r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	2000005c 	.word	0x2000005c
 8003b5c:	40005c4c 	.word	0x40005c4c

08003b60 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
}
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop

08003b6c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  pInformation = &Device_Info;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <USB_Init+0x2c>)
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <USB_Init+0x30>)
 8003b74:	601a      	str	r2, [r3, #0]
  pInformation->ControlState = 2;
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <USB_Init+0x2c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f04f 0202 	mov.w	r2, #2
 8003b7e:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <USB_Init+0x34>)
 8003b82:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <USB_Init+0x38>)
 8003b84:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <USB_Init+0x3c>)
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <USB_Init+0x40>)
 8003b8a:	601a      	str	r2, [r3, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <USB_Init+0x34>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4798      	blx	r3
}
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000ed0 	.word	0x20000ed0
 8003b9c:	20000eb0 	.word	0x20000eb0
 8003ba0:	20000ea8 	.word	0x20000ea8
 8003ba4:	20000060 	.word	0x20000060
 8003ba8:	20000ecc 	.word	0x20000ecc
 8003bac:	20000090 	.word	0x20000090

08003bb0 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
  __IO uint16_t wEPVal = 0;
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	80fb      	strh	r3, [r7, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8003bbc:	e179      	b.n	8003eb2 <CTR_LP+0x302>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003bbe:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <CTR_LP+0x23c>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	4b88      	ldr	r3, [pc, #544]	; (8003df0 <CTR_LP+0x240>)
 8003bce:	701a      	strb	r2, [r3, #0]
    if (EPindex == 0)
 8003bd0:	4b87      	ldr	r3, [pc, #540]	; (8003df0 <CTR_LP+0x240>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 8115 	bne.w	8003e04 <CTR_LP+0x254>

      /* save RX & TX status */
      /* and set both to NAK */


	    SaveRState = _GetENDPOINT(ENDP0);
 8003bda:	4b86      	ldr	r3, [pc, #536]	; (8003df4 <CTR_LP+0x244>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	4b85      	ldr	r3, [pc, #532]	; (8003df8 <CTR_LP+0x248>)
 8003be2:	801a      	strh	r2, [r3, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <CTR_LP+0x248>)
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	4b82      	ldr	r3, [pc, #520]	; (8003dfc <CTR_LP+0x24c>)
 8003bf2:	801a      	strh	r2, [r3, #0]
	    SaveRState &=  EPRX_STAT;	
 8003bf4:	4b80      	ldr	r3, [pc, #512]	; (8003df8 <CTR_LP+0x248>)
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <CTR_LP+0x248>)
 8003c02:	801a      	strh	r2, [r3, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8003c04:	4b7b      	ldr	r3, [pc, #492]	; (8003df4 <CTR_LP+0x244>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003c0e:	ea03 0404 	and.w	r4, r3, r4
 8003c12:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8003c16:	f084 0420 	eor.w	r4, r4, #32
 8003c1a:	4a76      	ldr	r2, [pc, #472]	; (8003df4 <CTR_LP+0x244>)
 8003c1c:	b2a1      	uxth	r1, r4
 8003c1e:	4b78      	ldr	r3, [pc, #480]	; (8003e00 <CTR_LP+0x250>)
 8003c20:	ea41 0303 	orr.w	r3, r1, r3
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	6013      	str	r3, [r2, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8003c28:	4b70      	ldr	r3, [pc, #448]	; (8003dec <CTR_LP+0x23c>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d142      	bne.n	8003cbc <CTR_LP+0x10c>

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */


        _ClearEP_CTR_TX(ENDP0);
 8003c36:	4a6f      	ldr	r2, [pc, #444]	; (8003df4 <CTR_LP+0x244>)
 8003c38:	4b6e      	ldr	r3, [pc, #440]	; (8003df4 <CTR_LP+0x244>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8003c44:	ea01 0303 	and.w	r3, r1, r3
 8003c48:	6013      	str	r3, [r2, #0]
        In0_Process();
 8003c4a:	f7ff fe93 	bl	8003974 <In0_Process>

           /* before terminate set Tx & Rx status */

            _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8003c4e:	4b69      	ldr	r3, [pc, #420]	; (8003df4 <CTR_LP+0x244>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003c58:	ea03 0404 	and.w	r4, r3, r4
 8003c5c:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <CTR_LP+0x248>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <CTR_LP+0xc0>
 8003c6c:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003c70:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <CTR_LP+0x248>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <CTR_LP+0xd4>
 8003c80:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8003c84:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <CTR_LP+0x24c>)
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <CTR_LP+0xe8>
 8003c94:	f084 0410 	eor.w	r4, r4, #16
 8003c98:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <CTR_LP+0x24c>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <CTR_LP+0xfc>
 8003ca8:	f084 0420 	eor.w	r4, r4, #32
 8003cac:	4a51      	ldr	r2, [pc, #324]	; (8003df4 <CTR_LP+0x244>)
 8003cae:	b2a1      	uxth	r1, r4
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <CTR_LP+0x250>)
 8003cb2:	ea41 0303 	orr.w	r3, r1, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	6013      	str	r3, [r2, #0]
		  return;
 8003cba:	e107      	b.n	8003ecc <CTR_LP+0x31c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8003cbc:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <CTR_LP+0x244>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	80fb      	strh	r3, [r7, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d042      	beq.n	8003d56 <CTR_LP+0x1a6>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8003cd0:	4a48      	ldr	r2, [pc, #288]	; (8003df4 <CTR_LP+0x244>)
 8003cd2:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <CTR_LP+0x244>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cde:	ea01 0303 	and.w	r3, r1, r3
 8003ce2:	6013      	str	r3, [r2, #0]
          Setup0_Process();
 8003ce4:	f7ff fdce 	bl	8003884 <Setup0_Process>
          /* before terminate set Tx & Rx status */

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8003ce8:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <CTR_LP+0x244>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003cf2:	ea03 0404 	and.w	r4, r3, r4
 8003cf6:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <CTR_LP+0x248>)
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <CTR_LP+0x15a>
 8003d06:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <CTR_LP+0x248>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <CTR_LP+0x16e>
 8003d1a:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <CTR_LP+0x24c>)
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <CTR_LP+0x182>
 8003d2e:	f084 0410 	eor.w	r4, r4, #16
 8003d32:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <CTR_LP+0x24c>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <CTR_LP+0x196>
 8003d42:	f084 0420 	eor.w	r4, r4, #32
 8003d46:	4a2b      	ldr	r2, [pc, #172]	; (8003df4 <CTR_LP+0x244>)
 8003d48:	b2a1      	uxth	r1, r4
 8003d4a:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <CTR_LP+0x250>)
 8003d4c:	ea41 0303 	orr.w	r3, r1, r3
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	6013      	str	r3, [r2, #0]
          return;
 8003d54:	e0ba      	b.n	8003ecc <CTR_LP+0x31c>
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b21b      	sxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f280 80a7 	bge.w	8003eb2 <CTR_LP+0x302>
        {
          _ClearEP_CTR_RX(ENDP0);
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <CTR_LP+0x244>)
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <CTR_LP+0x244>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d72:	ea01 0303 	and.w	r3, r1, r3
 8003d76:	6013      	str	r3, [r2, #0]
          Out0_Process();
 8003d78:	f7ff fe48 	bl	8003a0c <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <CTR_LP+0x244>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003d86:	ea03 0404 	and.w	r4, r3, r4
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <CTR_LP+0x248>)
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <CTR_LP+0x1ee>
 8003d9a:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <CTR_LP+0x248>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <CTR_LP+0x202>
 8003dae:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <CTR_LP+0x24c>)
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <CTR_LP+0x216>
 8003dc2:	f084 0410 	eor.w	r4, r4, #16
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <CTR_LP+0x24c>)
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <CTR_LP+0x22a>
 8003dd6:	f084 0420 	eor.w	r4, r4, #32
 8003dda:	4a06      	ldr	r2, [pc, #24]	; (8003df4 <CTR_LP+0x244>)
 8003ddc:	b2a1      	uxth	r1, r4
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <CTR_LP+0x250>)
 8003de0:	ea41 0303 	orr.w	r3, r1, r3
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	6013      	str	r3, [r2, #0]
          return;
 8003de8:	e070      	b.n	8003ecc <CTR_LP+0x31c>
 8003dea:	bf00      	nop
 8003dec:	20000e9c 	.word	0x20000e9c
 8003df0:	20000eac 	.word	0x20000eac
 8003df4:	40005c00 	.word	0x40005c00
 8003df8:	20000ed6 	.word	0x20000ed6
 8003dfc:	20000ed8 	.word	0x20000ed8
 8003e00:	ffff8080 	.word	0xffff8080
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8003e04:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <CTR_LP+0x324>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e10:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	80fb      	strh	r3, [r7, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da1f      	bge.n	8003e66 <CTR_LP+0x2b6>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8003e26:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <CTR_LP+0x324>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e32:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <CTR_LP+0x324>)
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8003e3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003e42:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	b292      	uxth	r2, r2
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	f640 728f 	movw	r2, #3983	; 0xf8f
 8003e50:	ea01 0202 	and.w	r2, r1, r2
 8003e54:	601a      	str	r2, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8003e56:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <CTR_LP+0x324>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <CTR_LP+0x328>)
 8003e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e64:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01f      	beq.n	8003eb2 <CTR_LP+0x302>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <CTR_LP+0x324>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003e7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e7e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003e82:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <CTR_LP+0x324>)
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8003e8a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003e8e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	b292      	uxth	r2, r2
 8003e96:	4611      	mov	r1, r2
 8003e98:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8003e9c:	ea01 0202 	and.w	r2, r1, r2
 8003ea0:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <CTR_LP+0x324>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	f103 32ff 	add.w	r2, r3, #4294967295
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <CTR_LP+0x32c>)
 8003eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb0:	4798      	blx	r3
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <CTR_LP+0x330>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <CTR_LP+0x334>)
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <CTR_LP+0x334>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f6ff ae79 	blt.w	8003bbe <CTR_LP+0xe>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 8003ecc:	f107 070c 	add.w	r7, r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd90      	pop	{r4, r7, pc}
 8003ed4:	20000eac 	.word	0x20000eac
 8003ed8:	20000038 	.word	0x20000038
 8003edc:	2000001c 	.word	0x2000001c
 8003ee0:	40005c44 	.word	0x40005c44
 8003ee4:	20000e9c 	.word	0x20000e9c

08003ee8 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	807a      	strh	r2, [r7, #2]
 8003ef6:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8003ef8:	883b      	ldrh	r3, [r7, #0]
 8003efa:	f103 0301 	add.w	r3, r3, #1
 8003efe:	ea4f 0363 	mov.w	r3, r3, asr #1
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8003f04:	887b      	ldrh	r3, [r7, #2]
 8003f06:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003f0a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003f0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f12:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	e023      	b.n	8003f62 <UserToPMABufferCopy+0x7a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f103 0301 	add.w	r3, r3, #1
 8003f26:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003f30:	461a      	mov	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	ea42 0303 	orr.w	r3, r2, r3
 8003f38:	60fb      	str	r3, [r7, #12]
    *pdwVal++ = temp2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f103 0302 	add.w	r3, r3, #2
 8003f48:	61bb      	str	r3, [r7, #24]
    pdwVal++;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f103 0302 	add.w	r3, r3, #2
 8003f50:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f103 0301 	add.w	r3, r3, #1
 8003f58:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1d8      	bne.n	8003f1a <UserToPMABufferCopy+0x32>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8003f68:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop

08003f74 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	460a      	mov	r2, r1
 8003f80:	807a      	strh	r2, [r7, #2]
 8003f82:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8003f84:	883b      	ldrh	r3, [r7, #0]
 8003f86:	f103 0301 	add.w	r3, r3, #1
 8003f8a:	ea4f 0363 	mov.w	r3, r3, asr #1
 8003f8e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003f96:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f9e:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e014      	b.n	8003fd0 <PMAToUserBufferCopy+0x5c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f103 0301 	add.w	r3, r3, #1
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f103 0304 	add.w	r3, r3, #4
 8003fbe:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f103 0301 	add.w	r3, r3, #1
 8003fc6:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e7      	bne.n	8003fa6 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003fd6:	f107 071c 	add.w	r7, r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <SetBTABLE>:
* Input          : wRegValue: New register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	80fb      	strh	r3, [r7, #6]
  _SetBTABLE(wRegValue);
 8003fea:	4a06      	ldr	r2, [pc, #24]	; (8004004 <SetBTABLE+0x24>)
 8003fec:	88f9      	ldrh	r1, [r7, #6]
 8003fee:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003ff2:	ea01 0303 	and.w	r3, r1, r3
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	f107 070c 	add.w	r7, r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40005c50 	.word	0x40005c50

08004008 <SetEPType>:
*                  wType: type definition.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	71fa      	strb	r2, [r7, #7]
 8004014:	80bb      	strh	r3, [r7, #4]
  _SetEPType(bEpNum, wType);
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800401c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004020:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004024:	79fa      	ldrb	r2, [r7, #7]
 8004026:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800402a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800402e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	b292      	uxth	r2, r2
 8004036:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800403a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800403e:	b291      	uxth	r1, r2
 8004040:	88ba      	ldrh	r2, [r7, #4]
 8004042:	ea41 0202 	orr.w	r2, r1, r2
 8004046:	b292      	uxth	r2, r2
 8004048:	b292      	uxth	r2, r2
 800404a:	601a      	str	r2, [r3, #0]
}
 800404c:	f107 070c 	add.w	r7, r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8004058:	b490      	push	{r4, r7}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	71fa      	strb	r2, [r7, #7]
 8004064:	80bb      	strh	r3, [r7, #4]
  _SetEPTxStatus(bEpNum, wState);
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800406c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004070:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004080:	b29c      	uxth	r4, r3
 8004082:	88bb      	ldrh	r3, [r7, #4]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <SetEPTxStatus+0x3c>
 800408e:	f084 0310 	eor.w	r3, r4, #16
 8004092:	b29c      	uxth	r4, r3
 8004094:	88bb      	ldrh	r3, [r7, #4]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <SetEPTxStatus+0x4e>
 80040a0:	f084 0320 	eor.w	r3, r4, #32
 80040a4:	b29c      	uxth	r4, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80040ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040b0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <SetEPTxStatus+0x70>)
 80040b6:	ea44 0202 	orr.w	r2, r4, r2
 80040ba:	b292      	uxth	r2, r2
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	f107 0708 	add.w	r7, r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc90      	pop	{r4, r7}
 80040c6:	4770      	bx	lr
 80040c8:	ffff8080 	.word	0xffff8080

080040cc <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 80040cc:	b490      	push	{r4, r7}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	71fa      	strb	r2, [r7, #7]
 80040d8:	80bb      	strh	r3, [r7, #4]
  _SetEPRxStatus(bEpNum, wState);
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80040e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040e4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	b29c      	uxth	r4, r3
 80040f6:	88bb      	ldrh	r3, [r7, #4]
 80040f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <SetEPRxStatus+0x3c>
 8004102:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004106:	b29c      	uxth	r4, r3
 8004108:	88bb      	ldrh	r3, [r7, #4]
 800410a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <SetEPRxStatus+0x4e>
 8004114:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004118:	b29c      	uxth	r4, r3
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004124:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <SetEPRxStatus+0x70>)
 800412a:	ea44 0202 	orr.w	r2, r4, r2
 800412e:	b292      	uxth	r2, r2
 8004130:	601a      	str	r2, [r3, #0]
}
 8004132:	f107 0708 	add.w	r7, r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bc90      	pop	{r4, r7}
 800413a:	4770      	bx	lr
 800413c:	ffff8080 	.word	0xffff8080

08004140 <SetEPTxValid>:
* Input          : bEpNum: Endpoint Number.  
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
 8004140:	b490      	push	{r4, r7}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004154:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004164:	b29c      	uxth	r4, r3
 8004166:	f084 0310 	eor.w	r3, r4, #16
 800416a:	b29c      	uxth	r4, r3
 800416c:	f084 0320 	eor.w	r3, r4, #32
 8004170:	b29c      	uxth	r4, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800417c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <SetEPTxValid+0x54>)
 8004182:	ea44 0202 	orr.w	r2, r4, r2
 8004186:	b292      	uxth	r2, r2
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	f107 0708 	add.w	r7, r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bc90      	pop	{r4, r7}
 8004192:	4770      	bx	lr
 8004194:	ffff8080 	.word	0xffff8080

08004198 <SetEPRxValid>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
 8004198:	b490      	push	{r4, r7}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80041a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041ac:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	b29c      	uxth	r4, r3
 80041be:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80041c2:	b29c      	uxth	r4, r3
 80041c4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80041c8:	b29c      	uxth	r4, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80041d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041d4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <SetEPRxValid+0x54>)
 80041da:	ea44 0202 	orr.w	r2, r4, r2
 80041de:	b292      	uxth	r2, r2
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	f107 0708 	add.w	r7, r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc90      	pop	{r4, r7}
 80041ea:	4770      	bx	lr
 80041ec:	ffff8080 	.word	0xffff8080

080041f0 <Clear_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  _ClearEP_KIND(bEpNum);
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004200:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004204:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800420e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004212:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800421e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004222:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8004226:	b29b      	uxth	r3, r3
 8004228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004238:	b29b      	uxth	r3, r3
 800423a:	b29b      	uxth	r3, r3
 800423c:	6013      	str	r3, [r2, #0]
}
 800423e:	f107 070c 	add.w	r7, r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <ClearDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_RX(bEpNum);
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800425c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d019      	beq.n	80042a0 <ClearDTOG_RX+0x58>
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004272:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004276:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800427a:	79fa      	ldrb	r2, [r7, #7]
 800427c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8004280:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004284:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	b292      	uxth	r2, r2
 800428c:	4611      	mov	r1, r2
 800428e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004292:	ea01 0202 	and.w	r2, r1, r2
 8004296:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800429a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	f107 070c 	add.w	r7, r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop

080042ac <ClearDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_TX(bEpNum);
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80042bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042c0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d019      	beq.n	8004304 <ClearDTOG_TX+0x58>
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80042d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042da:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80042de:	79fa      	ldrb	r2, [r7, #7]
 80042e0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80042e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80042e8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	b292      	uxth	r2, r2
 80042f0:	4611      	mov	r1, r2
 80042f2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80042f6:	ea01 0202 	and.w	r2, r1, r2
 80042fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004302:	601a      	str	r2, [r3, #0]
}
 8004304:	f107 070c 	add.w	r7, r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop

08004310 <SetEPTxAddr>:
*                  wAddr: new address. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	71fa      	strb	r2, [r7, #7]
 800431c:	80bb      	strh	r3, [r7, #4]
  _SetEPTxAddr(bEpNum, wAddr);
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <SetEPTxAddr+0x44>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800432c:	18d3      	adds	r3, r2, r3
 800432e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004332:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004336:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800433a:	88ba      	ldrh	r2, [r7, #4]
 800433c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004340:	b292      	uxth	r2, r2
 8004342:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	f107 070c 	add.w	r7, r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40005c50 	.word	0x40005c50

08004358 <SetEPRxAddr>:
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	71fa      	strb	r2, [r7, #7]
 8004364:	80bb      	strh	r3, [r7, #4]
  _SetEPRxAddr(bEpNum, wAddr);
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <SetEPRxAddr+0x40>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004374:	18d2      	adds	r2, r2, r3
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <SetEPRxAddr+0x44>)
 8004378:	18d3      	adds	r3, r2, r3
 800437a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800437e:	88ba      	ldrh	r2, [r7, #4]
 8004380:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004384:	b292      	uxth	r2, r2
 8004386:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800438a:	601a      	str	r2, [r3, #0]
}
 800438c:	f107 070c 	add.w	r7, r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40005c50 	.word	0x40005c50
 800439c:	20003004 	.word	0x20003004

080043a0 <GetEPTxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
  return(_GetEPTxAddr(bEpNum));
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <GetEPTxAddr+0x38>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80043be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80043c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	f107 070c 	add.w	r7, r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40005c50 	.word	0x40005c50

080043dc <GetEPRxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxAddr(bEpNum));
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <GetEPRxAddr+0x34>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <GetEPRxAddr+0x38>)
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
}
 8004402:	4618      	mov	r0, r3
 8004404:	f107 070c 	add.w	r7, r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40005c50 	.word	0x40005c50
 8004414:	20003004 	.word	0x20003004

08004418 <SetEPTxCount>:
*                  wCount: new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	71fa      	strb	r2, [r7, #7]
 8004424:	80bb      	strh	r3, [r7, #4]
  _SetEPTxCount(bEpNum, wCount);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <SetEPTxCount+0x34>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004434:	18d2      	adds	r2, r2, r3
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <SetEPTxCount+0x38>)
 8004438:	18d3      	adds	r3, r2, r3
 800443a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800443e:	88ba      	ldrh	r2, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	f107 070c 	add.w	r7, r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40005c50 	.word	0x40005c50
 8004450:	20003002 	.word	0x20003002

08004454 <SetEPRxCount>:
*                  wCount: the new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	71fa      	strb	r2, [r7, #7]
 8004460:	80bb      	strh	r3, [r7, #4]
  _SetEPRxCount(bEpNum, wCount);
 8004462:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <SetEPRxCount+0x8c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	461a      	mov	r2, r3
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004470:	18d2      	adds	r2, r2, r3
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <SetEPRxCount+0x90>)
 8004474:	18d3      	adds	r3, r2, r3
 8004476:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	88bb      	ldrh	r3, [r7, #4]
 800447e:	2b3e      	cmp	r3, #62	; 0x3e
 8004480:	d915      	bls.n	80044ae <SetEPRxCount+0x5a>
 8004482:	88bb      	ldrh	r3, [r7, #4]
 8004484:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004488:	81fb      	strh	r3, [r7, #14]
 800448a:	88bb      	ldrh	r3, [r7, #4]
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <SetEPRxCount+0x48>
 8004494:	89fb      	ldrh	r3, [r7, #14]
 8004496:	f103 33ff 	add.w	r3, r3, #4294967295
 800449a:	81fb      	strh	r3, [r7, #14]
 800449c:	89fb      	ldrh	r3, [r7, #14]
 800449e:	ea4f 2383 	mov.w	r3, r3, lsl #10
 80044a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e013      	b.n	80044d6 <SetEPRxCount+0x82>
 80044ae:	88bb      	ldrh	r3, [r7, #4]
 80044b0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80044b4:	81fb      	strh	r3, [r7, #14]
 80044b6:	88bb      	ldrh	r3, [r7, #4]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <SetEPRxCount+0x76>
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	f103 0301 	add.w	r3, r3, #1
 80044c8:	81fb      	strh	r3, [r7, #14]
 80044ca:	89fb      	ldrh	r3, [r7, #14]
 80044cc:	ea4f 2383 	mov.w	r3, r3, lsl #10
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	f107 0714 	add.w	r7, r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40005c50 	.word	0x40005c50
 80044e4:	20003006 	.word	0x20003006

080044e8 <GetEPRxCount>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxCount(bEpNum));
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <GetEPRxCount+0x3c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004500:	18d2      	adds	r2, r2, r3
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <GetEPRxCount+0x40>)
 8004504:	18d3      	adds	r3, r2, r3
 8004506:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8004512:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8004516:	b29b      	uxth	r3, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	f107 070c 	add.w	r7, r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	40005c50 	.word	0x40005c50
 8004528:	20003006 	.word	0x20003006

0800452c <ByteSwap>:
* Input          : wSwW: word to Swap.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ByteSwap(uint16_t wSwW)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	80fb      	strh	r3, [r7, #6]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	73fb      	strb	r3, [r7, #15]
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004540:	b29b      	uxth	r3, r3
 8004542:	b29a      	uxth	r2, r3
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800454a:	b29b      	uxth	r3, r3
 800454c:	ea42 0303 	orr.w	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	81bb      	strh	r3, [r7, #12]
  return(wRet);
 8004554:	89bb      	ldrh	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	f107 0714 	add.w	r7, r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop

08004564 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <USB_SIL_Init+0x28>)
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <USB_SIL_Init+0x2c>)
 8004572:	f44f 4206 	mov.w	r2, #34304	; 0x8600
 8004576:	801a      	strh	r2, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <USB_SIL_Init+0x30>)
 800457a:	4a05      	ldr	r2, [pc, #20]	; (8004590 <USB_SIL_Init+0x2c>)
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	601a      	str	r2, [r3, #0]
  /* Perform OTG Device initialization procedure (including EP0 init) */
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
 8004580:	f04f 0300 	mov.w	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	40005c44 	.word	0x40005c44
 8004590:	20000ed4 	.word	0x20000ed4
 8004594:	40005c40 	.word	0x40005c40

08004598 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	71fb      	strb	r3, [r7, #7]
  uint32_t DataLength = 0;
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff ff98 	bl	80044e8 <GetEPRxCount>
 80045b8:	4603      	mov	r3, r0
 80045ba:	60fb      	str	r3, [r7, #12]
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff09 	bl	80043dc <GetEPRxAddr>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	6838      	ldr	r0, [r7, #0]
 80045d4:	4611      	mov	r1, r2
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7ff fccc 	bl	8003f74 <PMAToUserBufferCopy>
  PCD_EP_Read (bEpAddr, pBufferPointer, DataLength);
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	f107 0710 	add.w	r7, r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <NVIC_PriorityGroupConfig+0x20>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
 80045f8:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80045fc:	60d3      	str	r3, [r2, #12]
}
 80045fe:	f107 070c 	add.w	r7, r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	f04f 030f 	mov.w	r3, #15
 8004624:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	78db      	ldrb	r3, [r3, #3]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d03f      	beq.n	80046ae <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800462e:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <NVIC_Init+0xd0>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	ea6f 0303 	mvn.w	r3, r3
 8004636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800463a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800463e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f1c3 0304 	rsb	r3, r3, #4
 8004646:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	461a      	mov	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	789b      	ldrb	r3, [r3, #2]
 8004664:	461a      	mov	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	ea02 0303 	and.w	r3, r2, r3
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	ea42 0303 	orr.w	r3, r2, r3
 8004672:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800467a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <NVIC_Init+0xd4>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	18cb      	adds	r3, r1, r3
 8004688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <NVIC_Init+0xd4>)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8004696:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	7809      	ldrb	r1, [r1, #0]
 800469c:	f001 011f 	and.w	r1, r1, #31
 80046a0:	f04f 0001 	mov.w	r0, #1
 80046a4:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80046a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80046ac:	e011      	b.n	80046d2 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <NVIC_Init+0xd4>)
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80046b8:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	7809      	ldrb	r1, [r1, #0]
 80046be:	f001 011f 	and.w	r1, r1, #31
 80046c2:	f04f 0001 	mov.w	r0, #1
 80046c6:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80046ca:	f102 0220 	add.w	r2, r2, #32
 80046ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80046d2:	f107 071c 	add.w	r7, r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	e000ed00 	.word	0xe000ed00
 80046e0:	e000e100 	.word	0xe000e100

080046e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	789b      	ldrb	r3, [r3, #2]
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	ea42 0303 	orr.w	r3, r2, r3
 8004732:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800473c:	2b00      	cmp	r3, #0
 800473e:	d051      	beq.n	80047e4 <GPIO_Init+0x100>
  {
    tmpreg = GPIOx->CRL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e044      	b.n	80047d8 <GPIO_Init+0xf4>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f04f 0201 	mov.w	r2, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	ea02 0303 	and.w	r3, r2, r3
 8004766:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	429a      	cmp	r2, r3
 800476e:	d12f      	bne.n	80047d0 <GPIO_Init+0xec>
      {
        pos = pinpos << 2;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004776:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f04f 020f 	mov.w	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	ea6f 0303 	mvn.w	r3, r3
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	ea02 0303 	and.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	ea42 0303 	orr.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	78db      	ldrb	r3, [r3, #3]
 80047a6:	2b28      	cmp	r3, #40	; 0x28
 80047a8:	d107      	bne.n	80047ba <GPIO_Init+0xd6>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f04f 0201 	mov.w	r2, #1
 80047b0:	fa02 f203 	lsl.w	r2, r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	615a      	str	r2, [r3, #20]
 80047b8:	e00a      	b.n	80047d0 <GPIO_Init+0xec>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	78db      	ldrb	r3, [r3, #3]
 80047be:	2b48      	cmp	r3, #72	; 0x48
 80047c0:	d106      	bne.n	80047d0 <GPIO_Init+0xec>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f04f 0201 	mov.w	r2, #1
 80047c8:	fa02 f203 	lsl.w	r2, r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f103 0301 	add.w	r3, r3, #1
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b07      	cmp	r3, #7
 80047dc:	d9b7      	bls.n	800474e <GPIO_Init+0x6a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	2bff      	cmp	r3, #255	; 0xff
 80047ea:	d956      	bls.n	800489a <GPIO_Init+0x1b6>
  {
    tmpreg = GPIOx->CRH;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e049      	b.n	800488e <GPIO_Init+0x1aa>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f103 0308 	add.w	r3, r3, #8
 8004800:	f04f 0201 	mov.w	r2, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	ea02 0303 	and.w	r3, r2, r3
 8004816:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	429a      	cmp	r2, r3
 800481e:	d132      	bne.n	8004886 <GPIO_Init+0x1a2>
      {
        pos = pinpos << 2;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004826:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f04f 020f 	mov.w	r2, #15
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	ea6f 0303 	mvn.w	r3, r3
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	ea02 0303 	and.w	r3, r2, r3
 8004840:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	ea42 0303 	orr.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	78db      	ldrb	r3, [r3, #3]
 8004856:	2b28      	cmp	r3, #40	; 0x28
 8004858:	d108      	bne.n	800486c <GPIO_Init+0x188>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	f103 0308 	add.w	r3, r3, #8
 8004860:	f04f 0201 	mov.w	r2, #1
 8004864:	fa02 f203 	lsl.w	r2, r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	78db      	ldrb	r3, [r3, #3]
 8004870:	2b48      	cmp	r3, #72	; 0x48
 8004872:	d108      	bne.n	8004886 <GPIO_Init+0x1a2>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f103 0308 	add.w	r3, r3, #8
 800487a:	f04f 0201 	mov.w	r2, #1
 800487e:	fa02 f203 	lsl.w	r2, r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f103 0301 	add.w	r3, r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b07      	cmp	r3, #7
 8004892:	d9b2      	bls.n	80047fa <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]
  }
}
 800489a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80048b0:	887a      	ldrh	r2, [r7, #2]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]
}
 80048b6:	f107 070c 	add.w	r7, r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80048cc:	887a      	ldrh	r2, [r7, #2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	615a      	str	r2, [r3, #20]
}
 80048d2:	f107 070c 	add.w	r7, r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80048e4:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <RCC_USBCLKConfig+0x18>)
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	f107 070c 	add.w	r7, r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	424200d8 	.word	0x424200d8

080048f8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <RCC_APB2PeriphClockCmd+0x40>)
 800490c:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <RCC_APB2PeriphClockCmd+0x40>)
 800490e:	6991      	ldr	r1, [r2, #24]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	ea41 0202 	orr.w	r2, r1, r2
 8004916:	619a      	str	r2, [r3, #24]
 8004918:	e008      	b.n	800492c <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <RCC_APB2PeriphClockCmd+0x40>)
 800491c:	4a06      	ldr	r2, [pc, #24]	; (8004938 <RCC_APB2PeriphClockCmd+0x40>)
 800491e:	6991      	ldr	r1, [r2, #24]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	ea6f 0202 	mvn.w	r2, r2
 8004926:	ea01 0202 	and.w	r2, r1, r2
 800492a:	619a      	str	r2, [r3, #24]
  }
}
 800492c:	f107 070c 	add.w	r7, r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000

0800493c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <RCC_APB1PeriphClockCmd+0x40>)
 8004950:	4a0a      	ldr	r2, [pc, #40]	; (800497c <RCC_APB1PeriphClockCmd+0x40>)
 8004952:	69d1      	ldr	r1, [r2, #28]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	ea41 0202 	orr.w	r2, r1, r2
 800495a:	61da      	str	r2, [r3, #28]
 800495c:	e008      	b.n	8004970 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <RCC_APB1PeriphClockCmd+0x40>)
 8004960:	4a06      	ldr	r2, [pc, #24]	; (800497c <RCC_APB1PeriphClockCmd+0x40>)
 8004962:	69d1      	ldr	r1, [r2, #28]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	ea6f 0202 	mvn.w	r2, r2
 800496a:	ea01 0202 	and.w	r2, r1, r2
 800496e:	61da      	str	r2, [r3, #28]
  }
}
 8004970:	f107 070c 	add.w	r7, r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000

08004980 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	889b      	ldrh	r3, [r3, #4]
 800498c:	b29b      	uxth	r3, r3
 800498e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8004992:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8004996:	b29b      	uxth	r3, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	f107 070c 	add.w	r7, r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	ea02 0303 	and.w	r3, r2, r3
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 80049c8:	f04f 0301 	mov.w	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	e002      	b.n	80049d6 <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	f107 0714 	add.w	r7, r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
 80049e4:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
 80049e8:	f3ef 8408 	mrs	r4, MSP
 80049ec:	4620      	mov	r0, r4
 80049ee:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 80049f0:	4623      	mov	r3, r4
}
 80049f2:	4618      	mov	r0, r3

080049f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <SystemInit+0x5c>)
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <SystemInit+0x5c>)
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004a04:	4a12      	ldr	r2, [pc, #72]	; (8004a50 <SystemInit+0x5c>)
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <SystemInit+0x5c>)
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <SystemInit+0x60>)
 8004a0c:	ea01 0303 	and.w	r3, r1, r3
 8004a10:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004a12:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <SystemInit+0x5c>)
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <SystemInit+0x5c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a20:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <SystemInit+0x5c>)
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <SystemInit+0x5c>)
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <SystemInit+0x5c>)
 8004a30:	4a07      	ldr	r2, [pc, #28]	; (8004a50 <SystemInit+0x5c>)
 8004a32:	6852      	ldr	r2, [r2, #4]
 8004a34:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004a38:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <SystemInit+0x5c>)
 8004a3c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004a40:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004a42:	f000 f80b 	bl	8004a5c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004a46:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <SystemInit+0x64>)
 8004a48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a4c:	609a      	str	r2, [r3, #8]
#endif 
}
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	f8ff0000 	.word	0xf8ff0000
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8004a60:	f000 f802 	bl	8004a68 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop

08004a68 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <SetSysClockTo72+0x100>)
 8004a7c:	4a3a      	ldr	r2, [pc, #232]	; (8004b68 <SetSysClockTo72+0x100>)
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a84:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004a86:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <SetSysClockTo72+0x100>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f103 0301 	add.w	r3, r3, #1
 8004a96:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <SetSysClockTo72+0x3e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004aa4:	d1ef      	bne.n	8004a86 <SetSysClockTo72+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004aa6:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <SetSysClockTo72+0x100>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <SetSysClockTo72+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 8004ab2:	f04f 0301 	mov.w	r3, #1
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	e002      	b.n	8004ac0 <SetSysClockTo72+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d14b      	bne.n	8004b5e <SetSysClockTo72+0xf6>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004ac6:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <SetSysClockTo72+0x104>)
 8004ac8:	4a28      	ldr	r2, [pc, #160]	; (8004b6c <SetSysClockTo72+0x104>)
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	f042 0210 	orr.w	r2, r2, #16
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <SetSysClockTo72+0x104>)
 8004ad4:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <SetSysClockTo72+0x104>)
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	f022 0203 	bic.w	r2, r2, #3
 8004adc:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <SetSysClockTo72+0x104>)
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <SetSysClockTo72+0x104>)
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	f042 0202 	orr.w	r2, r2, #2
 8004ae8:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004aea:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <SetSysClockTo72+0x100>)
 8004aec:	4a1e      	ldr	r2, [pc, #120]	; (8004b68 <SetSysClockTo72+0x100>)
 8004aee:	6852      	ldr	r2, [r2, #4]
 8004af0:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004af2:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <SetSysClockTo72+0x100>)
 8004af4:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <SetSysClockTo72+0x100>)
 8004af6:	6852      	ldr	r2, [r2, #4]
 8004af8:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <SetSysClockTo72+0x100>)
 8004afc:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <SetSysClockTo72+0x100>)
 8004afe:	6852      	ldr	r2, [r2, #4]
 8004b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b04:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8004b06:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b08:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b0a:	6852      	ldr	r2, [r2, #4]
 8004b0c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8004b10:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b16:	6852      	ldr	r2, [r2, #4]
 8004b18:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8004b1c:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b20:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004b28:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004b2a:	bf00      	nop
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f9      	beq.n	8004b2c <SetSysClockTo72+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b3a:	4a0b      	ldr	r2, [pc, #44]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b3c:	6852      	ldr	r2, [r2, #4]
 8004b3e:	f022 0203 	bic.w	r2, r2, #3
 8004b42:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b48:	6852      	ldr	r2, [r2, #4]
 8004b4a:	f042 0202 	orr.w	r2, r2, #2
 8004b4e:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004b50:	bf00      	nop
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <SetSysClockTo72+0x100>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d1f9      	bne.n	8004b52 <SetSysClockTo72+0xea>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8004b5e:	f107 070c 	add.w	r7, r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40022000 	.word	0x40022000

08004b70 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b72:	e003      	b.n	8004b7c <LoopCopyDataInit>

08004b74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 8004b76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b7a:	3104      	adds	r1, #4

08004b7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b7c:	4809      	ldr	r0, [pc, #36]	; (8004ba4 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8004b80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b84:	d3f6      	bcc.n	8004b74 <CopyDataInit>
  ldr  r2, =_sbss
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8004b88:	e002      	b.n	8004b90 <LoopFillZerobss>

08004b8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b8c:	f842 3b04 	str.w	r3, [r2], #4

08004b90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8004b92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b94:	d3f9      	bcc.n	8004b8a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b96:	f7ff ff2d 	bl	80049f4 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8004b9a:	f7fd fbbf 	bl	800231c <main>
  bx  lr    
 8004b9e:	4770      	bx	lr
 8004ba0:	08005a5c 	.word	0x08005a5c
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	200005e8 	.word	0x200005e8
 8004bac:	200005e8 	.word	0x200005e8
 8004bb0:	20000ee0 	.word	0x20000ee0

08004bb4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bb4:	e7fe      	b.n	8004bb4 <ADC1_2_IRQHandler>
 8004bb6:	0000      	movs	r0, r0
 8004bb8:	6c6c6548 	.word	0x6c6c6548
 8004bbc:	6f77206f 	.word	0x6f77206f
 8004bc0:	21646c72 	.word	0x21646c72
 8004bc4:	0000000d 	.word	0x0000000d
 8004bc8:	70616548 	.word	0x70616548
 8004bcc:	646e6120 	.word	0x646e6120
 8004bd0:	61747320 	.word	0x61747320
 8004bd4:	63206b63 	.word	0x63206b63
 8004bd8:	696c6c6f 	.word	0x696c6c6f
 8004bdc:	6e6f6973 	.word	0x6e6f6973
 8004be0:	0000000a 	.word	0x0000000a

08004be4 <Virtual_Com_Port_DeviceDescriptor>:
 8004be4:	02000112 40000002 57400483 02010200     .......@..@W....
 8004bf4:	00000103                                ....

08004bf8 <Virtual_Com_Port_ConfigDescriptor>:
 8004bf8:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8004c08:	24050001 05011000 01000124 02022404     ...$....$....$..
 8004c18:	00062405 82050701 ff000803 00010409     .$..............
 8004c28:	00000a02 03050700 00004002 02810507     .........@......
 8004c38:	00000040                                @...

08004c3c <Virtual_Com_Port_StringLangID>:
 8004c3c:	04090304                                ....

08004c40 <Virtual_Com_Port_StringVendor>:
 8004c40:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8004c50:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8004c60:	00630069 00000073                       i.c.s...

08004c68 <Virtual_Com_Port_StringProduct>:
 8004c68:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8004c78:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8004c88:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8004c98:	00000020                                 ...

08004c9c <__sf_fake_stdin>:
	...

08004cbc <__sf_fake_stdout>:
	...

08004cdc <__sf_fake_stderr>:
	...

08004cfc <_global_impure_ptr>:
 8004cfc:	200000e8 0000000a 00000043              ... ....C...

08004d08 <_init>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr

08004d14 <_fini>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr
